# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vrcfd', [dirname(__file__)])
        except ImportError:
            import _vrcfd
            return _vrcfd
        if fp is not None:
            try:
                _mod = imp.load_module('_vrcfd', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vrcfd = swig_import_helper()
    del swig_import_helper
else:
    import _vrcfd
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrcfd.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_Vector
    __del__ = lambda self : None;
    def set(self, *args): return _vrcfd.Vector_set(self, *args)
    def __add__(self, *args): return _vrcfd.Vector___add__(self, *args)
    def __sub__(self, *args): return _vrcfd.Vector___sub__(self, *args)
    def __div__(self, *args): return _vrcfd.Vector___div__(self, *args)
    def __mul__(self, *args): return _vrcfd.Vector___mul__(self, *args)
    def __xor__(self, *args): return _vrcfd.Vector___xor__(self, *args)
    def __iadd__(self, *args): return _vrcfd.Vector___iadd__(self, *args)
    def __isub__(self, *args): return _vrcfd.Vector___isub__(self, *args)
    def __imul__(self, *args): return _vrcfd.Vector___imul__(self, *args)
    def __idiv__(self, *args): return _vrcfd.Vector___idiv__(self, *args)
    def __call__(self, *args): return _vrcfd.Vector___call__(self, *args)
    def X(self): return _vrcfd.Vector_X(self)
    def Y(self): return _vrcfd.Vector_Y(self)
    def Z(self): return _vrcfd.Vector_Z(self)
    def magnitude(self): return _vrcfd.Vector_magnitude(self)
    def unitvector(self): return _vrcfd.Vector_unitvector(self)
    def normalize(self): return _vrcfd.Vector_normalize(self)
    def __eq__(self, *args): return _vrcfd.Vector___eq__(self, *args)
    def __ne__(self, *args): return _vrcfd.Vector___ne__(self, *args)
    def __lt__(self, *args): return _vrcfd.Vector___lt__(self, *args)
    def __le__(self, *args): return _vrcfd.Vector___le__(self, *args)
    def __gt__(self, *args): return _vrcfd.Vector___gt__(self, *args)
    def __ge__(self, *args): return _vrcfd.Vector___ge__(self, *args)
Vector_swigregister = _vrcfd.Vector_swigregister
Vector_swigregister(Vector)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrcfd.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_Color
    __del__ = lambda self : None;
    def set(self, *args): return _vrcfd.Color_set(self, *args)
    def __add__(self, *args): return _vrcfd.Color___add__(self, *args)
    def __sub__(self, *args): return _vrcfd.Color___sub__(self, *args)
    def __div__(self, *args): return _vrcfd.Color___div__(self, *args)
    def __mul__(self, *args): return _vrcfd.Color___mul__(self, *args)
    def __iadd__(self, *args): return _vrcfd.Color___iadd__(self, *args)
    def __isub__(self, *args): return _vrcfd.Color___isub__(self, *args)
    def __imul__(self, *args): return _vrcfd.Color___imul__(self, *args)
    def __idiv__(self, *args): return _vrcfd.Color___idiv__(self, *args)
    def __call__(self, *args): return _vrcfd.Color___call__(self, *args)
    def X(self): return _vrcfd.Color_X(self)
    def Y(self): return _vrcfd.Color_Y(self)
    def Z(self): return _vrcfd.Color_Z(self)
    def W(self): return _vrcfd.Color_W(self)
    def __eq__(self, *args): return _vrcfd.Color___eq__(self, *args)
    def __ne__(self, *args): return _vrcfd.Color___ne__(self, *args)
Color_swigregister = _vrcfd.Color_swigregister
Color_swigregister(Color)

class VolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_VolumeBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_VolumeBase
    __del__ = lambda self : None;
    def transform(self, *args): return _vrcfd.VolumeBase_transform(self, *args)
    def addAttribute(self, *args): return _vrcfd.VolumeBase_addAttribute(self, *args)
    def attribute(self, *args): return _vrcfd.VolumeBase_attribute(self, *args)
VolumeBase_swigregister = _vrcfd.VolumeBase_swigregister
VolumeBase_swigregister(VolumeBase)

class ScalarVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_ScalarVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_ScalarVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _vrcfd.ScalarVolume_eval(self, *args)
    def grad(self, *args): return _vrcfd.ScalarVolume_grad(self, *args)
    def getFloatElement(self, *args): return _vrcfd.ScalarVolume_getFloatElement(self, *args)
    def getColorElement(self, *args): return _vrcfd.ScalarVolume_getColorElement(self, *args)
    def getVectorElement(self, *args): return _vrcfd.ScalarVolume_getVectorElement(self, *args)
ScalarVolume_swigregister = _vrcfd.ScalarVolume_swigregister
ScalarVolume_swigregister(ScalarVolume)

class VectorVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_VectorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_VectorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _vrcfd.VectorVolume_eval(self, *args)
    def grad(self, *args): return _vrcfd.VectorVolume_grad(self, *args)
    def getFloatElement(self, *args): return _vrcfd.VectorVolume_getFloatElement(self, *args)
    def getColorElement(self, *args): return _vrcfd.VectorVolume_getColorElement(self, *args)
    def getVectorElement(self, *args): return _vrcfd.VectorVolume_getVectorElement(self, *args)
VectorVolume_swigregister = _vrcfd.VectorVolume_swigregister
VectorVolume_swigregister(VectorVolume)

class ColorVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_ColorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_ColorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _vrcfd.ColorVolume_eval(self, *args)
    def grad(self, *args): return _vrcfd.ColorVolume_grad(self, *args)
    def getFloatElement(self, *args): return _vrcfd.ColorVolume_getFloatElement(self, *args)
    def getColorElement(self, *args): return _vrcfd.ColorVolume_getColorElement(self, *args)
    def getVectorElement(self, *args): return _vrcfd.ColorVolume_getVectorElement(self, *args)
ColorVolume_swigregister = _vrcfd.ColorVolume_swigregister
ColorVolume_swigregister(ColorVolume)


def versionString():
  return _vrcfd.versionString()
versionString = _vrcfd.versionString
LABSHORTLOGO = _vrcfd.LABSHORTLOGO
LABLOGOSTRING = _vrcfd.LABLOGOSTRING

def LabLogo():
  return _vrcfd.LabLogo()
LabLogo = _vrcfd.LabLogo

def LabShortLogo():
  return _vrcfd.LabShortLogo()
LabShortLogo = _vrcfd.LabShortLogo
class RectangularGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectangularGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RectangularGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_RectangularGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_RectangularGrid
    __del__ = lambda self : None;
    def init(self, *args): return _vrcfd.RectangularGrid_init(self, *args)
    def index(self, *args): return _vrcfd.RectangularGrid_index(self, *args)
    def nx(self): return _vrcfd.RectangularGrid_nx(self)
    def ny(self): return _vrcfd.RectangularGrid_ny(self)
    def nz(self): return _vrcfd.RectangularGrid_nz(self)
    def llc(self): return _vrcfd.RectangularGrid_llc(self)
    def urc(self): return _vrcfd.RectangularGrid_urc(self)
    def dx(self): return _vrcfd.RectangularGrid_dx(self)
    def dy(self): return _vrcfd.RectangularGrid_dy(self)
    def dz(self): return _vrcfd.RectangularGrid_dz(self)
    def Lx(self): return _vrcfd.RectangularGrid_Lx(self)
    def Ly(self): return _vrcfd.RectangularGrid_Ly(self)
    def Lz(self): return _vrcfd.RectangularGrid_Lz(self)
    def evalP(self, *args): return _vrcfd.RectangularGrid_evalP(self, *args)
    def isInside(self, *args): return _vrcfd.RectangularGrid_isInside(self, *args)
    def getBox(self, *args): return _vrcfd.RectangularGrid_getBox(self, *args)
    def getGridIndex(self, *args): return _vrcfd.RectangularGrid_getGridIndex(self, *args)
    def getLinearInterpolation(self, *args): return _vrcfd.RectangularGrid_getLinearInterpolation(self, *args)
    def transform(self, *args): return _vrcfd.RectangularGrid_transform(self, *args)
    def setPeriodic(self): return _vrcfd.RectangularGrid_setPeriodic(self)
RectangularGrid_swigregister = _vrcfd.RectangularGrid_swigregister
RectangularGrid_swigregister(RectangularGrid)

class SparseMapRectangularGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseMapRectangularGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SparseMapRectangularGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_SparseMapRectangularGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_SparseMapRectangularGrid
    __del__ = lambda self : None;
    def init(self, *args): return _vrcfd.SparseMapRectangularGrid_init(self, *args)
    def llc(self): return _vrcfd.SparseMapRectangularGrid_llc(self)
    def dx(self): return _vrcfd.SparseMapRectangularGrid_dx(self)
    def dy(self): return _vrcfd.SparseMapRectangularGrid_dy(self)
    def dz(self): return _vrcfd.SparseMapRectangularGrid_dz(self)
    def evalP(self, *args): return _vrcfd.SparseMapRectangularGrid_evalP(self, *args)
    def getBox(self, *args): return _vrcfd.SparseMapRectangularGrid_getBox(self, *args)
    def getGridIndex(self, *args): return _vrcfd.SparseMapRectangularGrid_getGridIndex(self, *args)
    def getLinearInterpolation(self, *args): return _vrcfd.SparseMapRectangularGrid_getLinearInterpolation(self, *args)
    def transform(self, *args): return _vrcfd.SparseMapRectangularGrid_transform(self, *args)
SparseMapRectangularGrid_swigregister = _vrcfd.SparseMapRectangularGrid_swigregister
SparseMapRectangularGrid_swigregister(SparseMapRectangularGrid)


def WriteFloatVolumeGrid(*args):
  return _vrcfd.WriteFloatVolumeGrid(*args)
WriteFloatVolumeGrid = _vrcfd.WriteFloatVolumeGrid

def ReadFloatVolumeGrid(*args):
  return _vrcfd.ReadFloatVolumeGrid(*args)
ReadFloatVolumeGrid = _vrcfd.ReadFloatVolumeGrid
class FloatVolumeGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolumeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolumeGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_FloatVolumeGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_FloatVolumeGrid
    __del__ = lambda self : None;
    def init(self, *args): return _vrcfd.FloatVolumeGrid_init(self, *args)
    def setClearValue(self, *args): return _vrcfd.FloatVolumeGrid_setClearValue(self, *args)
    def rawPtr(self): return _vrcfd.FloatVolumeGrid_rawPtr(self)
    def value(self, *args): return _vrcfd.FloatVolumeGrid_value(self, *args)
    def set(self, *args): return _vrcfd.FloatVolumeGrid_set(self, *args)
    def eval(self, *args): return _vrcfd.FloatVolumeGrid_eval(self, *args)
    def normalize(self, *args): return _vrcfd.FloatVolumeGrid_normalize(self, *args)
FloatVolumeGrid_swigregister = _vrcfd.FloatVolumeGrid_swigregister
FloatVolumeGrid_swigregister(FloatVolumeGrid)

class VectorVolumeGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolumeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolumeGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_VectorVolumeGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_VectorVolumeGrid
    __del__ = lambda self : None;
    def init(self, *args): return _vrcfd.VectorVolumeGrid_init(self, *args)
    def setClearValue(self, *args): return _vrcfd.VectorVolumeGrid_setClearValue(self, *args)
    def rawPtr(self): return _vrcfd.VectorVolumeGrid_rawPtr(self)
    def value(self, *args): return _vrcfd.VectorVolumeGrid_value(self, *args)
    def set(self, *args): return _vrcfd.VectorVolumeGrid_set(self, *args)
    def eval(self, *args): return _vrcfd.VectorVolumeGrid_eval(self, *args)
    def normalize(self, *args): return _vrcfd.VectorVolumeGrid_normalize(self, *args)
VectorVolumeGrid_swigregister = _vrcfd.VectorVolumeGrid_swigregister
VectorVolumeGrid_swigregister(VectorVolumeGrid)

class ColorVolumeGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolumeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolumeGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_ColorVolumeGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_ColorVolumeGrid
    __del__ = lambda self : None;
    def init(self, *args): return _vrcfd.ColorVolumeGrid_init(self, *args)
    def setClearValue(self, *args): return _vrcfd.ColorVolumeGrid_setClearValue(self, *args)
    def rawPtr(self): return _vrcfd.ColorVolumeGrid_rawPtr(self)
    def value(self, *args): return _vrcfd.ColorVolumeGrid_value(self, *args)
    def set(self, *args): return _vrcfd.ColorVolumeGrid_set(self, *args)
    def eval(self, *args): return _vrcfd.ColorVolumeGrid_eval(self, *args)
    def normalize(self, *args): return _vrcfd.ColorVolumeGrid_normalize(self, *args)
ColorVolumeGrid_swigregister = _vrcfd.ColorVolumeGrid_swigregister
ColorVolumeGrid_swigregister(ColorVolumeGrid)

class SparseGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrcfd.new_SparseGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _vrcfd.SparseGrid_init(self, *args)
    def get(self, *args): return _vrcfd.SparseGrid_get(self, *args)
    def setDefVal(self, *args): return _vrcfd.SparseGrid_setDefVal(self, *args)
    def getDefVal(self): return _vrcfd.SparseGrid_getDefVal(self)
    def setPartitionSize(self, *args): return _vrcfd.SparseGrid_setPartitionSize(self, *args)
    def set(self, *args): return _vrcfd.SparseGrid_set(self, *args)
    def size(self): return _vrcfd.SparseGrid_size(self)
    def blockBounds(self, *args): return _vrcfd.SparseGrid_blockBounds(self, *args)
    def blockSize(self): return _vrcfd.SparseGrid_blockSize(self)
    def eval(self, *args): return _vrcfd.SparseGrid_eval(self, *args)
    def goodBlock(self, *args): return _vrcfd.SparseGrid_goodBlock(self, *args)
    def index(self, *args): return _vrcfd.SparseGrid_index(self, *args)
    __swig_destroy__ = _vrcfd.delete_SparseGrid
    __del__ = lambda self : None;
SparseGrid_swigregister = _vrcfd.SparseGrid_swigregister
SparseGrid_swigregister(SparseGrid)

class SparseColorGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseColorGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseColorGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vrcfd.new_SparseColorGrid()
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _vrcfd.SparseColorGrid_init(self, *args)
    def get(self, *args): return _vrcfd.SparseColorGrid_get(self, *args)
    def setDefVal(self, *args): return _vrcfd.SparseColorGrid_setDefVal(self, *args)
    def getDefVal(self): return _vrcfd.SparseColorGrid_getDefVal(self)
    def setPartitionSize(self, *args): return _vrcfd.SparseColorGrid_setPartitionSize(self, *args)
    def set(self, *args): return _vrcfd.SparseColorGrid_set(self, *args)
    def eval(self, *args): return _vrcfd.SparseColorGrid_eval(self, *args)
    def normalize(self, *args): return _vrcfd.SparseColorGrid_normalize(self, *args)
    __swig_destroy__ = _vrcfd.delete_SparseColorGrid
    __del__ = lambda self : None;
SparseColorGrid_swigregister = _vrcfd.SparseColorGrid_swigregister
SparseColorGrid_swigregister(SparseColorGrid)

class GasSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GasSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vrcfd.new_GasSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vrcfd.delete_GasSystem
    __del__ = lambda self : None;
    def getVelocityGrid(self): return _vrcfd.GasSystem_getVelocityGrid(self)
    def getDensityGrid(self): return _vrcfd.GasSystem_getDensityGrid(self)
    def setDensitySource(self, *args): return _vrcfd.GasSystem_setDensitySource(self, *args)
    def setExternalForce(self, *args): return _vrcfd.GasSystem_setExternalForce(self, *args)
    def update(self, *args): return _vrcfd.GasSystem_update(self, *args)
    def InitializeDensity(self, *args): return _vrcfd.GasSystem_InitializeDensity(self, *args)
    def InitializeVelocity(self, *args): return _vrcfd.GasSystem_InitializeVelocity(self, *args)
    def setStepsPerUpdate(self, *args): return _vrcfd.GasSystem_setStepsPerUpdate(self, *args)
    def setProjectionTolerance(self, *args): return _vrcfd.GasSystem_setProjectionTolerance(self, *args)
    def setNbDivFreeIterations(self, *args): return _vrcfd.GasSystem_setNbDivFreeIterations(self, *args)
GasSystem_swigregister = _vrcfd.GasSystem_swigregister
GasSystem_swigregister(GasSystem)

def WriteVolumeGrid(*args):
  return _vrcfd.WriteVolumeGrid(*args)
WriteVolumeGrid = _vrcfd.WriteVolumeGrid

def ReadVolumeGrid(*args):
  return _vrcfd.ReadVolumeGrid(*args)
ReadVolumeGrid = _vrcfd.ReadVolumeGrid

def Blur(*args):
  return _vrcfd.Blur(*args)
Blur = _vrcfd.Blur


def GaussSeidelPoissonSolver(*args):
  return _vrcfd.GaussSeidelPoissonSolver(*args)
GaussSeidelPoissonSolver = _vrcfd.GaussSeidelPoissonSolver

def GaussSeidelDivFree(*args):
  return _vrcfd.GaussSeidelDivFree(*args)
GaussSeidelDivFree = _vrcfd.GaussSeidelDivFree

def FFTDivFree(*args):
  return _vrcfd.FFTDivFree(*args)
FFTDivFree = _vrcfd.FFTDivFree
# This file is compatible with both classic and new-style classes.


