# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bishop', [dirname(__file__)])
        except ImportError:
            import _bishop
            return _bishop
        if fp is not None:
            try:
                _mod = imp.load_module('_bishop', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bishop = swig_import_helper()
    del swig_import_helper
else:
    import _bishop
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_bishop.SHARED_PTR_DISOWN_swigconstant(_bishop)
SHARED_PTR_DISOWN = _bishop.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bishop.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _bishop.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _bishop.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _bishop.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _bishop.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _bishop.SwigPyIterator_equal(self, x)

    def copy(self):
        return _bishop.SwigPyIterator_copy(self)

    def next(self):
        return _bishop.SwigPyIterator_next(self)

    def __next__(self):
        return _bishop.SwigPyIterator___next__(self)

    def previous(self):
        return _bishop.SwigPyIterator_previous(self)

    def advance(self, n):
        return _bishop.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _bishop.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _bishop.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _bishop.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _bishop.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _bishop.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _bishop.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _bishop.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.StringArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.StringArray___nonzero__(self)

    def __bool__(self):
        return _bishop.StringArray___bool__(self)

    def __len__(self):
        return _bishop.StringArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.StringArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.StringArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.StringArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.StringArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.StringArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.StringArray___setitem__(self, *args)

    def pop(self):
        return _bishop.StringArray_pop(self)

    def append(self, x):
        return _bishop.StringArray_append(self, x)

    def empty(self):
        return _bishop.StringArray_empty(self)

    def size(self):
        return _bishop.StringArray_size(self)

    def swap(self, v):
        return _bishop.StringArray_swap(self, v)

    def begin(self):
        return _bishop.StringArray_begin(self)

    def end(self):
        return _bishop.StringArray_end(self)

    def rbegin(self):
        return _bishop.StringArray_rbegin(self)

    def rend(self):
        return _bishop.StringArray_rend(self)

    def clear(self):
        return _bishop.StringArray_clear(self)

    def get_allocator(self):
        return _bishop.StringArray_get_allocator(self)

    def pop_back(self):
        return _bishop.StringArray_pop_back(self)

    def erase(self, *args):
        return _bishop.StringArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_StringArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.StringArray_push_back(self, x)

    def front(self):
        return _bishop.StringArray_front(self)

    def back(self):
        return _bishop.StringArray_back(self)

    def assign(self, n, x):
        return _bishop.StringArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.StringArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.StringArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.StringArray_reserve(self, n)

    def capacity(self):
        return _bishop.StringArray_capacity(self)
    __swig_destroy__ = _bishop.delete_StringArray
    __del__ = lambda self: None
StringArray_swigregister = _bishop.StringArray_swigregister
StringArray_swigregister(StringArray)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_Vector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Vector
    __del__ = lambda self: None

    def set(self, vx, vy, vz):
        return _bishop.Vector_set(self, vx, vy, vz)

    def __add__(self, v):
        return _bishop.Vector___add__(self, v)

    def __sub__(self, v):
        return _bishop.Vector___sub__(self, v)

    def __div__(self, v):
        return _bishop.Vector___div__(self, v)

    def __mul__(self, *args):
        return _bishop.Vector___mul__(self, *args)

    def __xor__(self, v):
        return _bishop.Vector___xor__(self, v)

    def __iadd__(self, v):
        return _bishop.Vector___iadd__(self, v)

    def __isub__(self, v):
        return _bishop.Vector___isub__(self, v)

    def __imul__(self, v):
        return _bishop.Vector___imul__(self, v)

    def __idiv__(self, v):
        return _bishop.Vector___idiv__(self, v)

    def __call__(self, v):
        return _bishop.Vector___call__(self, v)

    def X(self):
        return _bishop.Vector_X(self)

    def Y(self):
        return _bishop.Vector_Y(self)

    def Z(self):
        return _bishop.Vector_Z(self)

    def magnitude(self):
        return _bishop.Vector_magnitude(self)

    def unitvector(self):
        return _bishop.Vector_unitvector(self)

    def normalize(self):
        return _bishop.Vector_normalize(self)

    def __eq__(self, v):
        return _bishop.Vector___eq__(self, v)

    def __ne__(self, v):
        return _bishop.Vector___ne__(self, v)

    def __lt__(self, v):
        return _bishop.Vector___lt__(self, v)

    def __le__(self, v):
        return _bishop.Vector___le__(self, v)

    def __gt__(self, v):
        return _bishop.Vector___gt__(self, v)

    def __ge__(self, v):
        return _bishop.Vector___ge__(self, v)

    def __str__(self):
        return _bishop.Vector___str__(self)
Vector_swigregister = _bishop.Vector_swigregister
Vector_swigregister(Vector)

class Form(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Form, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Form, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_Form(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Form
    __del__ = lambda self: None

    def set(self, vx, vy, vz, vw):
        return _bishop.Form_set(self, vx, vy, vz, vw)

    def __add__(self, v):
        return _bishop.Form___add__(self, v)

    def __sub__(self, v):
        return _bishop.Form___sub__(self, v)

    def __mul__(self, v):
        return _bishop.Form___mul__(self, v)

    def __div__(self, v):
        return _bishop.Form___div__(self, v)

    def __xor__(self, v):
        return _bishop.Form___xor__(self, v)

    def star(self):
        return _bishop.Form_star(self)

    def __iadd__(self, v):
        return _bishop.Form___iadd__(self, v)

    def __isub__(self, v):
        return _bishop.Form___isub__(self, v)

    def __imul__(self, v):
        return _bishop.Form___imul__(self, v)

    def __idiv__(self, v):
        return _bishop.Form___idiv__(self, v)

    def zero(self, *args):
        return _bishop.Form_zero(self, *args)

    def one(self, *args):
        return _bishop.Form_one(self, *args)

    def two(self, *args):
        return _bishop.Form_two(self, *args)

    def three(self, *args):
        return _bishop.Form_three(self, *args)

    def __eq__(self, v):
        return _bishop.Form___eq__(self, v)

    def __ne__(self, v):
        return _bishop.Form___ne__(self, v)

    def __str__(self):
        return _bishop.Form___str__(self)
Form_swigregister = _bishop.Form_swigregister
Form_swigregister(Form)

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_Matrix(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Matrix
    __del__ = lambda self: None

    def __call__(self, a, b):
        return _bishop.Matrix___call__(self, a, b)

    def __add__(self, v):
        return _bishop.Matrix___add__(self, v)

    def __sub__(self, v):
        return _bishop.Matrix___sub__(self, v)

    def __div__(self, v):
        return _bishop.Matrix___div__(self, v)

    def __mul__(self, *args):
        return _bishop.Matrix___mul__(self, *args)

    def __iadd__(self, v):
        return _bishop.Matrix___iadd__(self, v)

    def __isub__(self, v):
        return _bishop.Matrix___isub__(self, v)

    def __imul__(self, *args):
        return _bishop.Matrix___imul__(self, *args)

    def __idiv__(self, v):
        return _bishop.Matrix___idiv__(self, v)

    def __eq__(self, v):
        return _bishop.Matrix___eq__(self, v)

    def __ne__(self, v):
        return _bishop.Matrix___ne__(self, v)

    def __lt__(self, v):
        return _bishop.Matrix___lt__(self, v)

    def __le__(self, v):
        return _bishop.Matrix___le__(self, v)

    def __gt__(self, v):
        return _bishop.Matrix___gt__(self, v)

    def __ge__(self, v):
        return _bishop.Matrix___ge__(self, v)

    def inverse(self):
        return _bishop.Matrix_inverse(self)

    def transpose(self):
        return _bishop.Matrix_transpose(self)

    def det(self):
        return _bishop.Matrix_det(self)

    def trace(self):
        return _bishop.Matrix_trace(self)

    def exp(self):
        return _bishop.Matrix_exp(self)

    def setExpRange(self, n):
        return _bishop.Matrix_setExpRange(self, n)

    def getExpRange(self, n):
        return _bishop.Matrix_getExpRange(self, n)

    def sinch(self):
        return _bishop.Matrix_sinch(self)

    def Get(self, a, b):
        return _bishop.Matrix_Get(self, a, b)

    def Set(self, a, b, value):
        return _bishop.Matrix_Set(self, a, b, value)

    def __str__(self):
        return _bishop.Matrix___str__(self)
Matrix_swigregister = _bishop.Matrix_swigregister
Matrix_swigregister(Matrix)


def __sub__(m):
    return _bishop.__sub__(m)
__sub__ = _bishop.__sub__
class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_Camera()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Camera
    __del__ = lambda self: None

    def setEyeViewUp(self, eye, view, up):
        return _bishop.Camera_setEyeViewUp(self, eye, view, up)

    def eye(self):
        return _bishop.Camera_eye(self)

    def up(self):
        return _bishop.Camera_up(self)

    def view(self, *args):
        return _bishop.Camera_view(self, *args)

    def XY(self, P, x, y):
        return _bishop.Camera_XY(self, P, x, y)

    def XYZ(self, P, x, y, z):
        return _bishop.Camera_XYZ(self, P, x, y, z)

    def setFov(self, fov):
        return _bishop.Camera_setFov(self, fov)

    def fov(self):
        return _bishop.Camera_fov(self)

    def setAspectRatio(self, ar):
        return _bishop.Camera_setAspectRatio(self, ar)

    def aspectRatio(self):
        return _bishop.Camera_aspectRatio(self)

    def setNearPlane(self, n):
        return _bishop.Camera_setNearPlane(self, n)

    def nearPlane(self):
        return _bishop.Camera_nearPlane(self)

    def setFarPlane(self, n):
        return _bishop.Camera_setFarPlane(self, n)

    def farPlane(self):
        return _bishop.Camera_farPlane(self)

    def isVisible(self, P):
        return _bishop.Camera_isVisible(self, P)

    def __str__(self):
        return _bishop.Camera___str__(self)
Camera_swigregister = _bishop.Camera_swigregister
Camera_swigregister(Camera)

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_Image()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Image
    __del__ = lambda self: None

    def reset(self, w, h, d=3):
        return _bishop.Image_reset(self, w, h, d)

    def value(self, *args):
        return _bishop.Image_value(self, *args)

    def pixel(self, *args):
        return _bishop.Image_pixel(self, *args)

    def Width(self):
        return _bishop.Image_Width(self)

    def Height(self):
        return _bishop.Image_Height(self)

    def Depth(self):
        return _bishop.Image_Depth(self)

    def index(self, x, y):
        return _bishop.Image_index(self, x, y)

    def interpolatedValue(self, x, y, c):
        return _bishop.Image_interpolatedValue(self, x, y, c)

    def interpolatedPixel(self, x, y):
        return _bishop.Image_interpolatedPixel(self, x, y)

    def pixels(self):
        return _bishop.Image_pixels(self)
Image_swigregister = _bishop.Image_swigregister
Image_swigregister(Image)


def setPixel(*args):
    return _bishop.setPixel(*args)
setPixel = _bishop.setPixel
class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_Color(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Color
    __del__ = lambda self: None

    def set(self, vx, vy, vz, vw):
        return _bishop.Color_set(self, vx, vy, vz, vw)

    def __add__(self, v):
        return _bishop.Color___add__(self, v)

    def __sub__(self, v):
        return _bishop.Color___sub__(self, v)

    def __div__(self, v):
        return _bishop.Color___div__(self, v)

    def __mul__(self, *args):
        return _bishop.Color___mul__(self, *args)

    def __iadd__(self, v):
        return _bishop.Color___iadd__(self, v)

    def __isub__(self, v):
        return _bishop.Color___isub__(self, v)

    def __imul__(self, *args):
        return _bishop.Color___imul__(self, *args)

    def __idiv__(self, v):
        return _bishop.Color___idiv__(self, v)

    def __call__(self, v):
        return _bishop.Color___call__(self, v)

    def X(self):
        return _bishop.Color_X(self)

    def Y(self):
        return _bishop.Color_Y(self)

    def Z(self):
        return _bishop.Color_Z(self)

    def W(self):
        return _bishop.Color_W(self)

    def red(self):
        return _bishop.Color_red(self)

    def green(self):
        return _bishop.Color_green(self)

    def blue(self):
        return _bishop.Color_blue(self)

    def alpha(self):
        return _bishop.Color_alpha(self)

    def __eq__(self, v):
        return _bishop.Color___eq__(self, v)

    def __ne__(self, v):
        return _bishop.Color___ne__(self, v)

    def __str__(self):
        return _bishop.Color___str__(self)
Color_swigregister = _bishop.Color_swigregister
Color_swigregister(Color)

class AARectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AARectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AARectangle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AARectangle(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AARectangle
    __del__ = lambda self: None

    def isInside(self, P):
        return _bishop.AARectangle_isInside(self, P)

    def signedDistance(self, P):
        return _bishop.AARectangle_signedDistance(self, P)

    def intersection(self, P, D, close, far):
        return _bishop.AARectangle_intersection(self, P, D, close, far)

    def farIntersection(self, P, D):
        return _bishop.AARectangle_farIntersection(self, P, D)

    def nearIntersection(self, P, D):
        return _bishop.AARectangle_nearIntersection(self, P, D)

    def normal(self, P):
        return _bishop.AARectangle_normal(self, P)

    def llc(self):
        return _bishop.AARectangle_llc(self)

    def urc(self):
        return _bishop.AARectangle_urc(self)

    def length(self):
        return _bishop.AARectangle_length(self)

    def center(self):
        return _bishop.AARectangle_center(self)

    def split(self, component, aabb1, aabb2):
        return _bishop.AARectangle_split(self, component, aabb1, aabb2)

    def intersects(self, aabb):
        return _bishop.AARectangle_intersects(self, aabb)

    def Union(self, aabb):
        return _bishop.AARectangle_Union(self, aabb)
AARectangle_swigregister = _bishop.AARectangle_swigregister
AARectangle_swigregister(AARectangle)

class AABB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AABB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AABB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AABB(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AABB
    __del__ = lambda self: None
AABB_swigregister = _bishop.AABB_swigregister
AABB_swigregister(AABB)


def makeAABB(llc, urc):
    return _bishop.makeAABB(llc, urc)
makeAABB = _bishop.makeAABB

def expandAABB(*args):
    return _bishop.expandAABB(*args)
expandAABB = _bishop.expandAABB

def shrinkAABB(*args):
    return _bishop.shrinkAABB(*args)
shrinkAABB = _bishop.shrinkAABB

def translateAABB(aabb, t):
    return _bishop.translateAABB(aabb, t)
translateAABB = _bishop.translateAABB

def isInside(aabb, P):
    return _bishop.isInside(aabb, P)
isInside = _bishop.isInside

def getAABBLLC(aabb):
    return _bishop.getAABBLLC(aabb)
getAABBLLC = _bishop.getAABBLLC

def getAABBURC(aabb):
    return _bishop.getAABBURC(aabb)
getAABBURC = _bishop.getAABBURC

def getAABBCenter(aabb):
    return _bishop.getAABBCenter(aabb)
getAABBCenter = _bishop.getAABBCenter

def getAABBLength(aabb):
    return _bishop.getAABBLength(aabb)
getAABBLength = _bishop.getAABBLength
class IntervalData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tmin"] = _bishop.IntervalData_tmin_set
    __swig_getmethods__["tmin"] = _bishop.IntervalData_tmin_get
    if _newclass:
        tmin = _swig_property(_bishop.IntervalData_tmin_get, _bishop.IntervalData_tmin_set)
    __swig_setmethods__["tmax"] = _bishop.IntervalData_tmax_set
    __swig_getmethods__["tmax"] = _bishop.IntervalData_tmax_get
    if _newclass:
        tmax = _swig_property(_bishop.IntervalData_tmax_get, _bishop.IntervalData_tmax_set)
    __swig_setmethods__["status"] = _bishop.IntervalData_status_set
    __swig_getmethods__["status"] = _bishop.IntervalData_status_get
    if _newclass:
        status = _swig_property(_bishop.IntervalData_status_get, _bishop.IntervalData_status_set)

    def __init__(self):
        this = _bishop.new_IntervalData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_IntervalData
    __del__ = lambda self: None
IntervalData_swigregister = _bishop.IntervalData_swigregister
IntervalData_swigregister(IntervalData)

class IntervalTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalTree, name)
    __repr__ = _swig_repr

    def __init__(self, llc, urc, lvl, maxlvl, minobj):
        this = _bishop.new_IntervalTree(llc, urc, lvl, maxlvl, minobj)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_IntervalTree
    __del__ = lambda self: None

    def Divide(self):
        return _bishop.IntervalTree_Divide(self)

    def addObject(self, *args):
        return _bishop.IntervalTree_addObject(self, *args)

    def interval_intersect(self, start, direction):
        return _bishop.IntervalTree_interval_intersect(self, start, direction)

    def nbObjects(self):
        return _bishop.IntervalTree_nbObjects(self)

    def objects(self):
        return _bishop.IntervalTree_objects(self)

    def object(self, i):
        return _bishop.IntervalTree_object(self, i)
IntervalTree_swigregister = _bishop.IntervalTree_swigregister
IntervalTree_swigregister(IntervalTree)

class IntervalSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalSet, name)
    __repr__ = _swig_repr

    def __init__(self, llc, urc, lvl, maxlvl, minobj):
        this = _bishop.new_IntervalSet(llc, urc, lvl, maxlvl, minobj)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_IntervalSet
    __del__ = lambda self: None
IntervalSet_swigregister = _bishop.IntervalSet_swigregister
IntervalSet_swigregister(IntervalSet)


def makeIntervalSet(llc, urc, lvl, maxlvl, minobj):
    return _bishop.makeIntervalSet(llc, urc, lvl, maxlvl, minobj)
makeIntervalSet = _bishop.makeIntervalSet

def AddIntervalSetAABB(arg1, aabb):
    return _bishop.AddIntervalSetAABB(arg1, aabb)
AddIntervalSetAABB = _bishop.AddIntervalSetAABB

def DivideIntervalSet(arg1):
    return _bishop.DivideIntervalSet(arg1)
DivideIntervalSet = _bishop.DivideIntervalSet
class AABBBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AABBBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AABBBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_AABBBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AABBBase
    __del__ = lambda self: None
AABBBase_swigregister = _bishop.AABBBase_swigregister
AABBBase_swigregister(AABBBase)

class VolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VolumeBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeBase
    __del__ = lambda self: None

    def addAttribute(self, name, value):
        return _bishop.VolumeBase_addAttribute(self, name, value)

    def attribute(self, name):
        return _bishop.VolumeBase_attribute(self, name)
VolumeBase_swigregister = _bishop.VolumeBase_swigregister
VolumeBase_swigregister(VolumeBase)

class FDGradHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDGradHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDGradHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_FDGradHandler()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FDGradHandler
    __del__ = lambda self: None

    def setNbTerms(self, n):
        return _bishop.FDGradHandler_setNbTerms(self, n)

    def nbTerms(self):
        return _bishop.FDGradHandler_nbTerms(self)

    def setStep(self, *args):
        return _bishop.FDGradHandler_setStep(self, *args)

    def step(self):
        return _bishop.FDGradHandler_step(self)

    def step_x(self):
        return _bishop.FDGradHandler_step_x(self)

    def step_y(self):
        return _bishop.FDGradHandler_step_y(self)

    def step_z(self):
        return _bishop.FDGradHandler_step_z(self)

    def coefficient(self, n):
        return _bishop.FDGradHandler_coefficient(self, n)
FDGradHandler_swigregister = _bishop.FDGradHandler_swigregister
FDGradHandler_swigregister(FDGradHandler)

class ScalarField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ScalarField(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarField
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.ScalarField___str__(self)

    def __doc__(self):
        return _bishop.ScalarField___doc__(self)

    def __add__(self, e2):
        return _bishop.ScalarField___add__(self, e2)

    def __sub__(self, e2):
        return _bishop.ScalarField___sub__(self, e2)

    def __neg__(self):
        return _bishop.ScalarField___neg__(self)

    def __div__(self, e2):
        return _bishop.ScalarField___div__(self, e2)

    def __xor__(self, e2):
        return _bishop.ScalarField___xor__(self, e2)

    def __mul__(self, *args):
        return _bishop.ScalarField___mul__(self, *args)
ScalarField_swigregister = _bishop.ScalarField_swigregister
ScalarField_swigregister(ScalarField)

class VectorField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VectorField(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorField
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.VectorField___str__(self)

    def __doc__(self):
        return _bishop.VectorField___doc__(self)

    def __add__(self, e2):
        return _bishop.VectorField___add__(self, e2)

    def __sub__(self, e2):
        return _bishop.VectorField___sub__(self, e2)

    def __neg__(self):
        return _bishop.VectorField___neg__(self)

    def __div__(self, e2):
        return _bishop.VectorField___div__(self, e2)

    def __xor__(self, e2):
        return _bishop.VectorField___xor__(self, e2)

    def __mul__(self, *args):
        return _bishop.VectorField___mul__(self, *args)
VectorField_swigregister = _bishop.VectorField_swigregister
VectorField_swigregister(VectorField)

class ColorField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ColorField(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorField
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.ColorField___str__(self)

    def __add__(self, e2):
        return _bishop.ColorField___add__(self, e2)

    def __sub__(self, e2):
        return _bishop.ColorField___sub__(self, e2)

    def __neg__(self):
        return _bishop.ColorField___neg__(self)

    def __mul__(self, *args):
        return _bishop.ColorField___mul__(self, *args)

    def __div__(self, e2):
        return _bishop.ColorField___div__(self, e2)
ColorField_swigregister = _bishop.ColorField_swigregister
ColorField_swigregister(ColorField)

class MatrixField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MatrixField(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MatrixField
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.MatrixField___str__(self)

    def __doc__(self):
        return _bishop.MatrixField___doc__(self)

    def __add__(self, e2):
        return _bishop.MatrixField___add__(self, e2)

    def __sub__(self, e2):
        return _bishop.MatrixField___sub__(self, e2)

    def __neg__(self):
        return _bishop.MatrixField___neg__(self)

    def __mul__(self, *args):
        return _bishop.MatrixField___mul__(self, *args)

    def __div__(self, e2):
        return _bishop.MatrixField___div__(self, e2)
MatrixField_swigregister = _bishop.MatrixField_swigregister
MatrixField_swigregister(MatrixField)

class FormField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FormField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FormField(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FormField
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.FormField___str__(self)

    def __doc__(self):
        return _bishop.FormField___doc__(self)

    def __add__(self, e2):
        return _bishop.FormField___add__(self, e2)

    def __sub__(self, e2):
        return _bishop.FormField___sub__(self, e2)

    def __neg__(self):
        return _bishop.FormField___neg__(self)

    def __div__(self, e2):
        return _bishop.FormField___div__(self, e2)

    def __mul__(self, e1):
        return _bishop.FormField___mul__(self, e1)

    def __xor__(self, e2):
        return _bishop.FormField___xor__(self, e2)
    __swig_setmethods__["isGrad"] = _bishop.FormField_isGrad_set
    __swig_getmethods__["isGrad"] = _bishop.FormField_isGrad_get
    if _newclass:
        isGrad = _swig_property(_bishop.FormField_isGrad_get, _bishop.FormField_isGrad_set)
FormField_swigregister = _bishop.FormField_swigregister
FormField_swigregister(FormField)


def SF(v):
    return _bishop.SF(v)
SF = _bishop.SF

def VF(v):
    return _bishop.VF(v)
VF = _bishop.VF

def CF(v):
    return _bishop.CF(v)
CF = _bishop.CF

def MF(v):
    return _bishop.MF(v)
MF = _bishop.MF

def FF(v):
    return _bishop.FF(v)
FF = _bishop.FF
class ScalarVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ScalarVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ScalarVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ScalarVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ScalarVolume_typelabel(self)

    def documentation(self):
        return _bishop.ScalarVolume_documentation(self)
    __swig_setmethods__["gradParams"] = _bishop.ScalarVolume_gradParams_set
    __swig_getmethods__["gradParams"] = _bishop.ScalarVolume_gradParams_get
    if _newclass:
        gradParams = _swig_property(_bishop.ScalarVolume_gradParams_get, _bishop.ScalarVolume_gradParams_set)

    def setFDSize(self, nb):
        return _bishop.ScalarVolume_setFDSize(self, nb)

    def setFDStep(self, *args):
        return _bishop.ScalarVolume_setFDStep(self, *args)
ScalarVolume_swigregister = _bishop.ScalarVolume_swigregister
ScalarVolume_swigregister(ScalarVolume)

class VectorVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VectorVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.VectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.VectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.VectorVolume_typelabel(self)

    def documentation(self):
        return _bishop.VectorVolume_documentation(self)
    __swig_setmethods__["gradParams"] = _bishop.VectorVolume_gradParams_set
    __swig_getmethods__["gradParams"] = _bishop.VectorVolume_gradParams_get
    if _newclass:
        gradParams = _swig_property(_bishop.VectorVolume_gradParams_get, _bishop.VectorVolume_gradParams_set)

    def setFDSize(self, nb):
        return _bishop.VectorVolume_setFDSize(self, nb)

    def setFDStep(self, *args):
        return _bishop.VectorVolume_setFDStep(self, *args)
VectorVolume_swigregister = _bishop.VectorVolume_swigregister
VectorVolume_swigregister(VectorVolume)

class ColorVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ColorVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ColorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ColorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ColorVolume_typelabel(self)

    def documentation(self):
        return _bishop.ColorVolume_documentation(self)
    __swig_setmethods__["gradParams"] = _bishop.ColorVolume_gradParams_set
    __swig_getmethods__["gradParams"] = _bishop.ColorVolume_gradParams_get
    if _newclass:
        gradParams = _swig_property(_bishop.ColorVolume_gradParams_get, _bishop.ColorVolume_gradParams_set)

    def setFDSize(self, nb):
        return _bishop.ColorVolume_setFDSize(self, nb)

    def setFDStep(self, *args):
        return _bishop.ColorVolume_setFDStep(self, *args)
ColorVolume_swigregister = _bishop.ColorVolume_swigregister
ColorVolume_swigregister(ColorVolume)

class ScalarFieldBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFieldBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ScalarFieldBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarFieldBase
    __del__ = lambda self: None
ScalarFieldBase_swigregister = _bishop.ScalarFieldBase_swigregister
ScalarFieldBase_swigregister(ScalarFieldBase)

class VectorFieldBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFieldBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VectorFieldBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorFieldBase
    __del__ = lambda self: None
VectorFieldBase_swigregister = _bishop.VectorFieldBase_swigregister
VectorFieldBase_swigregister(VectorFieldBase)

class ColorFieldBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorFieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorFieldBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ColorFieldBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorFieldBase
    __del__ = lambda self: None
ColorFieldBase_swigregister = _bishop.ColorFieldBase_swigregister
ColorFieldBase_swigregister(ColorFieldBase)

class VolumeLight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeLight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeLight, name)
    __repr__ = _swig_repr

    def __init__(self, bnds, prob, cd, threshold):
        this = _bishop.new_VolumeLight(bnds, prob, cd, threshold)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeLight
    __del__ = lambda self: None

    def setSeed(self, seed):
        return _bishop.VolumeLight_setSeed(self, seed)

    def setSampleLimit(self, lim):
        return _bishop.VolumeLight_setSampleLimit(self, lim)

    def setThreshold(self, thresh):
        return _bishop.VolumeLight_setThreshold(self, thresh)

    def getSampleLimit(self):
        return _bishop.VolumeLight_getSampleLimit(self)

    def getThreshold(self):
        return _bishop.VolumeLight_getThreshold(self)

    def getBounds(self):
        return _bishop.VolumeLight_getBounds(self)

    def getLight(self, pos, cd):
        return _bishop.VolumeLight_getLight(self, pos, cd)

    def typelabel(self):
        return _bishop.VolumeLight_typelabel(self)

    def documentation(self):
        return _bishop.VolumeLight_documentation(self)
VolumeLight_swigregister = _bishop.VolumeLight_swigregister
VolumeLight_swigregister(VolumeLight)

class VolumeLightField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeLightField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeLightField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VolumeLightField(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeLightField
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.VolumeLightField___str__(self)

    def __doc__(self):
        return _bishop.VolumeLightField___doc__(self)
VolumeLightField_swigregister = _bishop.VolumeLightField_swigregister
VolumeLightField_swigregister(VolumeLightField)


def makeVolumeLight(bnds, prob, cd, threshold):
    return _bishop.makeVolumeLight(bnds, prob, cd, threshold)
makeVolumeLight = _bishop.makeVolumeLight

def SetSampleLimit(vlf, value):
    return _bishop.SetSampleLimit(vlf, value)
SetSampleLimit = _bishop.SetSampleLimit

def SetThreshold(vlf, value):
    return _bishop.SetThreshold(vlf, value)
SetThreshold = _bishop.SetThreshold

def SetSeed(vlf, value):
    return _bishop.SetSeed(vlf, value)
SetSeed = _bishop.SetSeed
class VLBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VLBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VLBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VLBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VLBase
    __del__ = lambda self: None
VLBase_swigregister = _bishop.VLBase_swigregister
VLBase_swigregister(VLBase)

class ProgressMeter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressMeter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressMeter, name)
    __repr__ = _swig_repr

    def __init__(self, nb, ttl):
        this = _bishop.new_ProgressMeter(nb, ttl)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def update(self):
        return _bishop.ProgressMeter_update(self)
    __swig_destroy__ = _bishop.delete_ProgressMeter
    __del__ = lambda self: None
ProgressMeter_swigregister = _bishop.ProgressMeter_swigregister
ProgressMeter_swigregister(ProgressMeter)

class Noise_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Noise_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Noise_t, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_Noise_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["frequency"] = _bishop.Noise_t_frequency_set
    __swig_getmethods__["frequency"] = _bishop.Noise_t_frequency_get
    if _newclass:
        frequency = _swig_property(_bishop.Noise_t_frequency_get, _bishop.Noise_t_frequency_set)
    __swig_setmethods__["translate"] = _bishop.Noise_t_translate_set
    __swig_getmethods__["translate"] = _bishop.Noise_t_translate_get
    if _newclass:
        translate = _swig_property(_bishop.Noise_t_translate_get, _bishop.Noise_t_translate_set)
    __swig_setmethods__["octaves"] = _bishop.Noise_t_octaves_set
    __swig_getmethods__["octaves"] = _bishop.Noise_t_octaves_get
    if _newclass:
        octaves = _swig_property(_bishop.Noise_t_octaves_get, _bishop.Noise_t_octaves_set)
    __swig_setmethods__["amplitude"] = _bishop.Noise_t_amplitude_set
    __swig_getmethods__["amplitude"] = _bishop.Noise_t_amplitude_get
    if _newclass:
        amplitude = _swig_property(_bishop.Noise_t_amplitude_get, _bishop.Noise_t_amplitude_set)
    __swig_setmethods__["offset"] = _bishop.Noise_t_offset_set
    __swig_getmethods__["offset"] = _bishop.Noise_t_offset_get
    if _newclass:
        offset = _swig_property(_bishop.Noise_t_offset_get, _bishop.Noise_t_offset_set)
    __swig_setmethods__["fjump"] = _bishop.Noise_t_fjump_set
    __swig_getmethods__["fjump"] = _bishop.Noise_t_fjump_get
    if _newclass:
        fjump = _swig_property(_bishop.Noise_t_fjump_get, _bishop.Noise_t_fjump_set)
    __swig_setmethods__["roughness"] = _bishop.Noise_t_roughness_set
    __swig_getmethods__["roughness"] = _bishop.Noise_t_roughness_get
    if _newclass:
        roughness = _swig_property(_bishop.Noise_t_roughness_get, _bishop.Noise_t_roughness_set)
    __swig_setmethods__["radius"] = _bishop.Noise_t_radius_set
    __swig_getmethods__["radius"] = _bishop.Noise_t_radius_get
    if _newclass:
        radius = _swig_property(_bishop.Noise_t_radius_get, _bishop.Noise_t_radius_set)
    __swig_setmethods__["capradius"] = _bishop.Noise_t_capradius_set
    __swig_getmethods__["capradius"] = _bishop.Noise_t_capradius_get
    if _newclass:
        capradius = _swig_property(_bishop.Noise_t_capradius_get, _bishop.Noise_t_capradius_set)
    __swig_setmethods__["pscale"] = _bishop.Noise_t_pscale_set
    __swig_getmethods__["pscale"] = _bishop.Noise_t_pscale_get
    if _newclass:
        pscale = _swig_property(_bishop.Noise_t_pscale_get, _bishop.Noise_t_pscale_set)
    __swig_setmethods__["gamma"] = _bishop.Noise_t_gamma_set
    __swig_getmethods__["gamma"] = _bishop.Noise_t_gamma_get
    if _newclass:
        gamma = _swig_property(_bishop.Noise_t_gamma_get, _bishop.Noise_t_gamma_set)
    __swig_setmethods__["time"] = _bishop.Noise_t_time_set
    __swig_getmethods__["time"] = _bishop.Noise_t_time_get
    if _newclass:
        time = _swig_property(_bishop.Noise_t_time_get, _bishop.Noise_t_time_set)
    __swig_setmethods__["fftLowCutoff"] = _bishop.Noise_t_fftLowCutoff_set
    __swig_getmethods__["fftLowCutoff"] = _bishop.Noise_t_fftLowCutoff_get
    if _newclass:
        fftLowCutoff = _swig_property(_bishop.Noise_t_fftLowCutoff_get, _bishop.Noise_t_fftLowCutoff_set)
    __swig_setmethods__["fftHighCutoff"] = _bishop.Noise_t_fftHighCutoff_set
    __swig_getmethods__["fftHighCutoff"] = _bishop.Noise_t_fftHighCutoff_get
    if _newclass:
        fftHighCutoff = _swig_property(_bishop.Noise_t_fftHighCutoff_get, _bishop.Noise_t_fftHighCutoff_set)
    __swig_setmethods__["fftPower"] = _bishop.Noise_t_fftPower_set
    __swig_getmethods__["fftPower"] = _bishop.Noise_t_fftPower_get
    if _newclass:
        fftPower = _swig_property(_bishop.Noise_t_fftPower_get, _bishop.Noise_t_fftPower_set)
    __swig_setmethods__["fftNbGridPoints"] = _bishop.Noise_t_fftNbGridPoints_set
    __swig_getmethods__["fftNbGridPoints"] = _bishop.Noise_t_fftNbGridPoints_get
    if _newclass:
        fftNbGridPoints = _swig_property(_bishop.Noise_t_fftNbGridPoints_get, _bishop.Noise_t_fftNbGridPoints_set)
    __swig_setmethods__["fftLength"] = _bishop.Noise_t_fftLength_set
    __swig_getmethods__["fftLength"] = _bishop.Noise_t_fftLength_get
    if _newclass:
        fftLength = _swig_property(_bishop.Noise_t_fftLength_get, _bishop.Noise_t_fftLength_set)
    __swig_setmethods__["lognormalmean"] = _bishop.Noise_t_lognormalmean_set
    __swig_getmethods__["lognormalmean"] = _bishop.Noise_t_lognormalmean_get
    if _newclass:
        lognormalmean = _swig_property(_bishop.Noise_t_lognormalmean_get, _bishop.Noise_t_lognormalmean_set)
    __swig_setmethods__["gaussianstandarddeviation"] = _bishop.Noise_t_gaussianstandarddeviation_set
    __swig_getmethods__["gaussianstandarddeviation"] = _bishop.Noise_t_gaussianstandarddeviation_get
    if _newclass:
        gaussianstandarddeviation = _swig_property(_bishop.Noise_t_gaussianstandarddeviation_get, _bishop.Noise_t_gaussianstandarddeviation_set)
    __swig_setmethods__["seed"] = _bishop.Noise_t_seed_set
    __swig_getmethods__["seed"] = _bishop.Noise_t_seed_get
    if _newclass:
        seed = _swig_property(_bishop.Noise_t_seed_get, _bishop.Noise_t_seed_set)
    __swig_setmethods__["tangent"] = _bishop.Noise_t_tangent_set
    __swig_getmethods__["tangent"] = _bishop.Noise_t_tangent_get
    if _newclass:
        tangent = _swig_property(_bishop.Noise_t_tangent_get, _bishop.Noise_t_tangent_set)
    __swig_setmethods__["normal"] = _bishop.Noise_t_normal_set
    __swig_getmethods__["normal"] = _bishop.Noise_t_normal_get
    if _newclass:
        normal = _swig_property(_bishop.Noise_t_normal_get, _bishop.Noise_t_normal_set)
    __swig_setmethods__["binormal"] = _bishop.Noise_t_binormal_set
    __swig_getmethods__["binormal"] = _bishop.Noise_t_binormal_get
    if _newclass:
        binormal = _swig_property(_bishop.Noise_t_binormal_get, _bishop.Noise_t_binormal_set)
    __swig_setmethods__["axis"] = _bishop.Noise_t_axis_set
    __swig_getmethods__["axis"] = _bishop.Noise_t_axis_get
    if _newclass:
        axis = _swig_property(_bishop.Noise_t_axis_get, _bishop.Noise_t_axis_set)
    __swig_setmethods__["angle"] = _bishop.Noise_t_angle_set
    __swig_getmethods__["angle"] = _bishop.Noise_t_angle_get
    if _newclass:
        angle = _swig_property(_bishop.Noise_t_angle_get, _bishop.Noise_t_angle_set)
    __swig_setmethods__["P"] = _bishop.Noise_t_P_set
    __swig_getmethods__["P"] = _bishop.Noise_t_P_get
    if _newclass:
        P = _swig_property(_bishop.Noise_t_P_get, _bishop.Noise_t_P_set)
    __swig_setmethods__["v"] = _bishop.Noise_t_v_set
    __swig_getmethods__["v"] = _bishop.Noise_t_v_get
    if _newclass:
        v = _swig_property(_bishop.Noise_t_v_get, _bishop.Noise_t_v_set)
    __swig_setmethods__["A"] = _bishop.Noise_t_A_set
    __swig_getmethods__["A"] = _bishop.Noise_t_A_get
    if _newclass:
        A = _swig_property(_bishop.Noise_t_A_get, _bishop.Noise_t_A_set)
    __swig_setmethods__["age"] = _bishop.Noise_t_age_set
    __swig_getmethods__["age"] = _bishop.Noise_t_age_get
    if _newclass:
        age = _swig_property(_bishop.Noise_t_age_get, _bishop.Noise_t_age_set)
    __swig_setmethods__["lifeTime"] = _bishop.Noise_t_lifeTime_set
    __swig_getmethods__["lifeTime"] = _bishop.Noise_t_lifeTime_get
    if _newclass:
        lifeTime = _swig_property(_bishop.Noise_t_lifeTime_get, _bishop.Noise_t_lifeTime_set)
    __swig_setmethods__["shutter"] = _bishop.Noise_t_shutter_set
    __swig_getmethods__["shutter"] = _bishop.Noise_t_shutter_get
    if _newclass:
        shutter = _swig_property(_bishop.Noise_t_shutter_get, _bishop.Noise_t_shutter_set)
    __swig_setmethods__["frameRate"] = _bishop.Noise_t_frameRate_set
    __swig_getmethods__["frameRate"] = _bishop.Noise_t_frameRate_get
    if _newclass:
        frameRate = _swig_property(_bishop.Noise_t_frameRate_get, _bishop.Noise_t_frameRate_set)
    __swig_setmethods__["falloff"] = _bishop.Noise_t_falloff_set
    __swig_getmethods__["falloff"] = _bishop.Noise_t_falloff_get
    if _newclass:
        falloff = _swig_property(_bishop.Noise_t_falloff_get, _bishop.Noise_t_falloff_set)
    __swig_setmethods__["Cd"] = _bishop.Noise_t_Cd_set
    __swig_getmethods__["Cd"] = _bishop.Noise_t_Cd_get
    if _newclass:
        Cd = _swig_property(_bishop.Noise_t_Cd_get, _bishop.Noise_t_Cd_set)
    __swig_setmethods__["nbWisps"] = _bishop.Noise_t_nbWisps_set
    __swig_getmethods__["nbWisps"] = _bishop.Noise_t_nbWisps_get
    if _newclass:
        nbWisps = _swig_property(_bishop.Noise_t_nbWisps_get, _bishop.Noise_t_nbWisps_set)
    __swig_setmethods__["wispOctaves"] = _bishop.Noise_t_wispOctaves_set
    __swig_getmethods__["wispOctaves"] = _bishop.Noise_t_wispOctaves_get
    if _newclass:
        wispOctaves = _swig_property(_bishop.Noise_t_wispOctaves_get, _bishop.Noise_t_wispOctaves_set)
    __swig_setmethods__["wispFreq"] = _bishop.Noise_t_wispFreq_set
    __swig_getmethods__["wispFreq"] = _bishop.Noise_t_wispFreq_get
    if _newclass:
        wispFreq = _swig_property(_bishop.Noise_t_wispFreq_get, _bishop.Noise_t_wispFreq_set)
    __swig_setmethods__["wispTranslate"] = _bishop.Noise_t_wispTranslate_set
    __swig_getmethods__["wispTranslate"] = _bishop.Noise_t_wispTranslate_get
    if _newclass:
        wispTranslate = _swig_property(_bishop.Noise_t_wispTranslate_get, _bishop.Noise_t_wispTranslate_set)
    __swig_setmethods__["wispOffset"] = _bishop.Noise_t_wispOffset_set
    __swig_getmethods__["wispOffset"] = _bishop.Noise_t_wispOffset_get
    if _newclass:
        wispOffset = _swig_property(_bishop.Noise_t_wispOffset_get, _bishop.Noise_t_wispOffset_set)
    __swig_setmethods__["wispFjump"] = _bishop.Noise_t_wispFjump_set
    __swig_getmethods__["wispFjump"] = _bishop.Noise_t_wispFjump_get
    if _newclass:
        wispFjump = _swig_property(_bishop.Noise_t_wispFjump_get, _bishop.Noise_t_wispFjump_set)
    __swig_setmethods__["wispRoughness"] = _bishop.Noise_t_wispRoughness_set
    __swig_getmethods__["wispRoughness"] = _bishop.Noise_t_wispRoughness_get
    if _newclass:
        wispRoughness = _swig_property(_bishop.Noise_t_wispRoughness_get, _bishop.Noise_t_wispRoughness_set)
    __swig_setmethods__["wispCorrelation"] = _bishop.Noise_t_wispCorrelation_set
    __swig_getmethods__["wispCorrelation"] = _bishop.Noise_t_wispCorrelation_get
    if _newclass:
        wispCorrelation = _swig_property(_bishop.Noise_t_wispCorrelation_get, _bishop.Noise_t_wispCorrelation_set)
    __swig_setmethods__["wispRadialGroup"] = _bishop.Noise_t_wispRadialGroup_set
    __swig_getmethods__["wispRadialGroup"] = _bishop.Noise_t_wispRadialGroup_get
    if _newclass:
        wispRadialGroup = _swig_property(_bishop.Noise_t_wispRadialGroup_get, _bishop.Noise_t_wispRadialGroup_set)
    __swig_setmethods__["wispDisplacementScale"] = _bishop.Noise_t_wispDisplacementScale_set
    __swig_getmethods__["wispDisplacementScale"] = _bishop.Noise_t_wispDisplacementScale_get
    if _newclass:
        wispDisplacementScale = _swig_property(_bishop.Noise_t_wispDisplacementScale_get, _bishop.Noise_t_wispDisplacementScale_set)
    __swig_destroy__ = _bishop.delete_Noise_t
    __del__ = lambda self: None
Noise_t_swigregister = _bishop.Noise_t_swigregister
Noise_t_swigregister(Noise_t)

class Noise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Noise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Noise, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_Noise()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Noise
    __del__ = lambda self: None

    def eval(self, *args):
        return _bishop.Noise_eval(self, *args)

    def setParameters(self, parameters):
        return _bishop.Noise_setParameters(self, parameters)

    def getParameters(self, parameters):
        return _bishop.Noise_getParameters(self, parameters)
Noise_swigregister = _bishop.Noise_swigregister
Noise_swigregister(Noise)


def setAnchor(a, i, c):
    return _bishop.setAnchor(a, i, c)
setAnchor = _bishop.setAnchor

def getAnchor(a, i):
    return _bishop.getAnchor(a, i)
getAnchor = _bishop.getAnchor

def evaluateAnchorChain(alist, x):
    return _bishop.evaluateAnchorChain(alist, x)
evaluateAnchorChain = _bishop.evaluateAnchorChain

def interpolateAnchors(a1, a2, x):
    return _bishop.interpolateAnchors(a1, a2, x)
interpolateAnchors = _bishop.interpolateAnchors
class PRN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PRN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PRN, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PRN()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PRN
    __del__ = lambda self: None

    def eval(self):
        return _bishop.PRN_eval(self)

    def setParameters(self, parameters):
        return _bishop.PRN_setParameters(self, parameters)
PRN_swigregister = _bishop.PRN_swigregister
PRN_swigregister(PRN)


_bishop.PERLINB_swigconstant(_bishop)
PERLINB = _bishop.PERLINB
class PerlinNoise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerlinNoise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerlinNoise, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PerlinNoise()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PerlinNoise
    __del__ = lambda self: None

    def setTime(self, time):
        return _bishop.PerlinNoise_setTime(self, time)

    def eval(self, *args):
        return _bishop.PerlinNoise_eval(self, *args)
PerlinNoise_swigregister = _bishop.PerlinNoise_swigregister
PerlinNoise_swigregister(PerlinNoise)

class PerlinNoiseGustavson(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerlinNoiseGustavson, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PerlinNoiseGustavson, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PerlinNoiseGustavson()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PerlinNoiseGustavson
    __del__ = lambda self: None

    def setTime(self, t):
        return _bishop.PerlinNoiseGustavson_setTime(self, t)

    def eval(self, *args):
        return _bishop.PerlinNoiseGustavson_eval(self, *args)
PerlinNoiseGustavson_swigregister = _bishop.PerlinNoiseGustavson_swigregister
PerlinNoiseGustavson_swigregister(PerlinNoiseGustavson)

class PerlinFractalSum(Noise):
    __swig_setmethods__ = {}
    for _s in [Noise]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PerlinFractalSum, name, value)
    __swig_getmethods__ = {}
    for _s in [Noise]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PerlinFractalSum, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PerlinFractalSum()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PerlinFractalSum
    __del__ = lambda self: None

    def eval(self, *args):
        return _bishop.PerlinFractalSum_eval(self, *args)

    def setParameters(self, parameters):
        return _bishop.PerlinFractalSum_setParameters(self, parameters)

    def getParameters(self, parameters):
        return _bishop.PerlinFractalSum_getParameters(self, parameters)
PerlinFractalSum_swigregister = _bishop.PerlinFractalSum_swigregister
PerlinFractalSum_swigregister(PerlinFractalSum)

class AnchorChain(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnchorChain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnchorChain, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.AnchorChain_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.AnchorChain___nonzero__(self)

    def __bool__(self):
        return _bishop.AnchorChain___bool__(self)

    def __len__(self):
        return _bishop.AnchorChain___len__(self)

    def __getslice__(self, i, j):
        return _bishop.AnchorChain___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.AnchorChain___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.AnchorChain___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.AnchorChain___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.AnchorChain___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.AnchorChain___setitem__(self, *args)

    def pop(self):
        return _bishop.AnchorChain_pop(self)

    def append(self, x):
        return _bishop.AnchorChain_append(self, x)

    def empty(self):
        return _bishop.AnchorChain_empty(self)

    def size(self):
        return _bishop.AnchorChain_size(self)

    def swap(self, v):
        return _bishop.AnchorChain_swap(self, v)

    def begin(self):
        return _bishop.AnchorChain_begin(self)

    def end(self):
        return _bishop.AnchorChain_end(self)

    def rbegin(self):
        return _bishop.AnchorChain_rbegin(self)

    def rend(self):
        return _bishop.AnchorChain_rend(self)

    def clear(self):
        return _bishop.AnchorChain_clear(self)

    def get_allocator(self):
        return _bishop.AnchorChain_get_allocator(self)

    def pop_back(self):
        return _bishop.AnchorChain_pop_back(self)

    def erase(self, *args):
        return _bishop.AnchorChain_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_AnchorChain(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.AnchorChain_push_back(self, x)

    def front(self):
        return _bishop.AnchorChain_front(self)

    def back(self):
        return _bishop.AnchorChain_back(self)

    def assign(self, n, x):
        return _bishop.AnchorChain_assign(self, n, x)

    def resize(self, *args):
        return _bishop.AnchorChain_resize(self, *args)

    def insert(self, *args):
        return _bishop.AnchorChain_insert(self, *args)

    def reserve(self, n):
        return _bishop.AnchorChain_reserve(self, n)

    def capacity(self):
        return _bishop.AnchorChain_capacity(self)
    __swig_destroy__ = _bishop.delete_AnchorChain
    __del__ = lambda self: None
AnchorChain_swigregister = _bishop.AnchorChain_swigregister
AnchorChain_swigregister(AnchorChain)

class NoiseMachine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseMachine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseMachine, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NoiseMachine(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NoiseMachine
    __del__ = lambda self: None
NoiseMachine_swigregister = _bishop.NoiseMachine_swigregister
NoiseMachine_swigregister(NoiseMachine)


def perlin(n):
    return _bishop.perlin(n)
perlin = _bishop.perlin
class LognormalPRN(PRN):
    __swig_setmethods__ = {}
    for _s in [PRN]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LognormalPRN, name, value)
    __swig_getmethods__ = {}
    for _s in [PRN]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LognormalPRN, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_LognormalPRN()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_LognormalPRN
    __del__ = lambda self: None

    def setParameters(self, n):
        return _bishop.LognormalPRN_setParameters(self, n)

    def eval(self):
        return _bishop.LognormalPRN_eval(self)
LognormalPRN_swigregister = _bishop.LognormalPRN_swigregister
LognormalPRN_swigregister(LognormalPRN)

class RectangularGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectangularGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RectangularGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_RectangularGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RectangularGrid
    __del__ = lambda self: None

    def init(self, *args):
        return _bishop.RectangularGrid_init(self, *args)

    def reset(self, Lx, Ly, Lz, origin):
        return _bishop.RectangularGrid_reset(self, Lx, Ly, Lz, origin)

    def index(self, *args):
        return _bishop.RectangularGrid_index(self, *args)

    def triple(self, indx, i, j, k):
        return _bishop.RectangularGrid_triple(self, indx, i, j, k)

    def nx(self):
        return _bishop.RectangularGrid_nx(self)

    def ny(self):
        return _bishop.RectangularGrid_ny(self)

    def nz(self):
        return _bishop.RectangularGrid_nz(self)

    def llc(self):
        return _bishop.RectangularGrid_llc(self)

    def urc(self):
        return _bishop.RectangularGrid_urc(self)

    def dx(self):
        return _bishop.RectangularGrid_dx(self)

    def dy(self):
        return _bishop.RectangularGrid_dy(self)

    def dz(self):
        return _bishop.RectangularGrid_dz(self)

    def Lx(self):
        return _bishop.RectangularGrid_Lx(self)

    def Ly(self):
        return _bishop.RectangularGrid_Ly(self)

    def Lz(self):
        return _bishop.RectangularGrid_Lz(self)

    def evalP(self, i, j, k):
        return _bishop.RectangularGrid_evalP(self, i, j, k)

    def isInside(self, *args):
        return _bishop.RectangularGrid_isInside(self, *args)

    def getBox(self, lower, upper, ixl, ixu, iyl, iyu, izl, izu):
        return _bishop.RectangularGrid_getBox(self, lower, upper, ixl, ixu, iyl, iyu, izl, izu)

    def getGridIndex(self, P, ix, iy, iz):
        return _bishop.RectangularGrid_getGridIndex(self, P, ix, iy, iz)

    def getLinearInterpolation(self, P, ix, iix, wx, wwx, iy, iiy, wy, wwy, iz, iiz, wz, wwz):
        return _bishop.RectangularGrid_getLinearInterpolation(self, P, ix, iix, wx, wwx, iy, iiy, wy, wwy, iz, iiz, wz, wwz)

    def getHighOrderInterpolation(self, P, indices_x, indices_y, indices_z, weights_x, weights_y, weights_z):
        return _bishop.RectangularGrid_getHighOrderInterpolation(self, P, indices_x, indices_y, indices_z, weights_x, weights_y, weights_z)

    def transform(self, P):
        return _bishop.RectangularGrid_transform(self, P)

    def setPeriodic(self):
        return _bishop.RectangularGrid_setPeriodic(self)

    def setPeriodicX(self):
        return _bishop.RectangularGrid_setPeriodicX(self)

    def setPeriodicY(self):
        return _bishop.RectangularGrid_setPeriodicY(self)

    def setPeriodicZ(self):
        return _bishop.RectangularGrid_setPeriodicZ(self)

    def periodicX(self):
        return _bishop.RectangularGrid_periodicX(self)

    def periodicY(self):
        return _bishop.RectangularGrid_periodicY(self)

    def periodicZ(self):
        return _bishop.RectangularGrid_periodicZ(self)

    def setInterpolationOrder(self, o):
        return _bishop.RectangularGrid_setInterpolationOrder(self, o)

    def getInterpolationOrder(self):
        return _bishop.RectangularGrid_getInterpolationOrder(self)
RectangularGrid_swigregister = _bishop.RectangularGrid_swigregister
RectangularGrid_swigregister(RectangularGrid)

class GridBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridBox, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_GridBox(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GridBox
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.GridBox___iadd__(self, e2)

    def evalP(self, i, j, k):
        return _bishop.GridBox_evalP(self, i, j, k)

    def index(self, P):
        return _bishop.GridBox_index(self, P)

    def __str__(self):
        return _bishop.GridBox___str__(self)
GridBox_swigregister = _bishop.GridBox_swigregister
GridBox_swigregister(GridBox)


def makeGridBox(*args):
    return _bishop.makeGridBox(*args)
makeGridBox = _bishop.makeGridBox

def dx(gb):
    return _bishop.dx(gb)
dx = _bishop.dx

def dy(gb):
    return _bishop.dy(gb)
dy = _bishop.dy

def dz(gb):
    return _bishop.dz(gb)
dz = _bishop.dz

def Lx(gb):
    return _bishop.Lx(gb)
Lx = _bishop.Lx

def Ly(gb):
    return _bishop.Ly(gb)
Ly = _bishop.Ly

def Lz(gb):
    return _bishop.Lz(gb)
Lz = _bishop.Lz

def setPeriodic(gb):
    return _bishop.setPeriodic(gb)
setPeriodic = _bishop.setPeriodic

def setInterpOrder(gb, order):
    return _bishop.setInterpOrder(gb, order)
setInterpOrder = _bishop.setInterpOrder

def getInterpOrder(gb):
    return _bishop.getInterpOrder(gb)
getInterpOrder = _bishop.getInterpOrder

def getAABB(gb):
    return _bishop.getAABB(gb)
getAABB = _bishop.getAABB
class SparseMapRectangularGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseMapRectangularGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SparseMapRectangularGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_SparseMapRectangularGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SparseMapRectangularGrid
    __del__ = lambda self: None

    def init(self, dx, dy, dz, Origin):
        return _bishop.SparseMapRectangularGrid_init(self, dx, dy, dz, Origin)

    def llc(self):
        return _bishop.SparseMapRectangularGrid_llc(self)

    def dx(self):
        return _bishop.SparseMapRectangularGrid_dx(self)

    def dy(self):
        return _bishop.SparseMapRectangularGrid_dy(self)

    def dz(self):
        return _bishop.SparseMapRectangularGrid_dz(self)

    def evalP(self, i, j, k):
        return _bishop.SparseMapRectangularGrid_evalP(self, i, j, k)

    def getBox(self, lower, upper, ixl, ixu, iyl, iyu, izl, izu):
        return _bishop.SparseMapRectangularGrid_getBox(self, lower, upper, ixl, ixu, iyl, iyu, izl, izu)

    def getGridIndex(self, P, ix, iy, iz):
        return _bishop.SparseMapRectangularGrid_getGridIndex(self, P, ix, iy, iz)

    def getLinearInterpolation(self, P, ix, iix, wx, wwx, iy, iiy, wy, wwy, iz, iiz, wz, wwz):
        return _bishop.SparseMapRectangularGrid_getLinearInterpolation(self, P, ix, iix, wx, wwx, iy, iiy, wy, wwy, iz, iiz, wz, wwz)

    def transform(self, P):
        return _bishop.SparseMapRectangularGrid_transform(self, P)
SparseMapRectangularGrid_swigregister = _bishop.SparseMapRectangularGrid_swigregister
SparseMapRectangularGrid_swigregister(SparseMapRectangularGrid)

class FrustumGrid(Camera):
    __swig_setmethods__ = {}
    for _s in [Camera]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrustumGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Camera]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrustumGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_FrustumGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FrustumGrid
    __del__ = lambda self: None

    def init(self, nx, ny, nz):
        return _bishop.FrustumGrid_init(self, nx, ny, nz)

    def index(self, *args):
        return _bishop.FrustumGrid_index(self, *args)

    def nx(self):
        return _bishop.FrustumGrid_nx(self)

    def ny(self):
        return _bishop.FrustumGrid_ny(self)

    def nz(self):
        return _bishop.FrustumGrid_nz(self)

    def dx(self):
        return _bishop.FrustumGrid_dx(self)

    def dy(self):
        return _bishop.FrustumGrid_dy(self)

    def dz(self):
        return _bishop.FrustumGrid_dz(self)

    def camera(self):
        return _bishop.FrustumGrid_camera(self)

    def evalP(self, i, j, k):
        return _bishop.FrustumGrid_evalP(self, i, j, k)

    def isInside(self, P):
        return _bishop.FrustumGrid_isInside(self, P)

    def getBox(self, lower, upper, ixl, ixu, iyl, iyu, izl, izu):
        return _bishop.FrustumGrid_getBox(self, lower, upper, ixl, ixu, iyl, iyu, izl, izu)

    def getGridIndex(self, P, ix, iy, iz):
        return _bishop.FrustumGrid_getGridIndex(self, P, ix, iy, iz)

    def getLinearInterpolation(self, P, ix, iix, wx, wwx, iy, iiy, wy, wwy, iz, iiz, wz, wwz):
        return _bishop.FrustumGrid_getLinearInterpolation(self, P, ix, iix, wx, wwx, iy, iiy, wy, wwy, iz, iiz, wz, wwz)

    def transform(self, P):
        return _bishop.FrustumGrid_transform(self, P)

    def llc(self):
        return _bishop.FrustumGrid_llc(self)

    def urc(self):
        return _bishop.FrustumGrid_urc(self)
FrustumGrid_swigregister = _bishop.FrustumGrid_swigregister
FrustumGrid_swigregister(FrustumGrid)

class FrustumBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrustumBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrustumBox, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_FrustumBox(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FrustumBox
    __del__ = lambda self: None
FrustumBox_swigregister = _bishop.FrustumBox_swigregister
FrustumBox_swigregister(FrustumBox)


def makeFrustumBox(nx, ny, nz, cam):
    return _bishop.makeFrustumBox(nx, ny, nz, cam)
makeFrustumBox = _bishop.makeFrustumBox

def nx(*args):
    return _bishop.nx(*args)
nx = _bishop.nx

def ny(*args):
    return _bishop.ny(*args)
ny = _bishop.ny

def nz(*args):
    return _bishop.nz(*args)
nz = _bishop.nz

def camera(gb):
    return _bishop.camera(gb)
camera = _bishop.camera

def WriteFloatVolumeGrid(grid, fname):
    return _bishop.WriteFloatVolumeGrid(grid, fname)
WriteFloatVolumeGrid = _bishop.WriteFloatVolumeGrid

def ReadFloatVolumeGrid(grid, fname):
    return _bishop.ReadFloatVolumeGrid(grid, fname)
ReadFloatVolumeGrid = _bishop.ReadFloatVolumeGrid

def WriteVectorVolumeGrid(grid, fname):
    return _bishop.WriteVectorVolumeGrid(grid, fname)
WriteVectorVolumeGrid = _bishop.WriteVectorVolumeGrid

def ReadVectorVolumeGrid(grid, fname):
    return _bishop.ReadVectorVolumeGrid(grid, fname)
ReadVectorVolumeGrid = _bishop.ReadVectorVolumeGrid

def WriteColorVolumeGrid(grid, fname):
    return _bishop.WriteColorVolumeGrid(grid, fname)
WriteColorVolumeGrid = _bishop.WriteColorVolumeGrid

def ReadColorVolumeGrid(grid, fname):
    return _bishop.ReadColorVolumeGrid(grid, fname)
ReadColorVolumeGrid = _bishop.ReadColorVolumeGrid
class FloatVolumeGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolumeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolumeGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_FloatVolumeGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FloatVolumeGrid
    __del__ = lambda self: None

    def init(self, nx, ny, nz, Lx, Ly, Lz, Origin):
        return _bishop.FloatVolumeGrid_init(self, nx, ny, nz, Lx, Ly, Lz, Origin)

    def setClearValue(self, value):
        return _bishop.FloatVolumeGrid_setClearValue(self, value)

    def getClearValue(self):
        return _bishop.FloatVolumeGrid_getClearValue(self)

    def setOutsideValue(self, value):
        return _bishop.FloatVolumeGrid_setOutsideValue(self, value)

    def getOutsideValue(self):
        return _bishop.FloatVolumeGrid_getOutsideValue(self)

    def rawPtr(self):
        return _bishop.FloatVolumeGrid_rawPtr(self)

    def value(self, *args):
        return _bishop.FloatVolumeGrid_value(self, *args)

    def set(self, *args):
        return _bishop.FloatVolumeGrid_set(self, *args)

    def eval(self, P):
        return _bishop.FloatVolumeGrid_eval(self, P)

    def normalize(self, g):
        return _bishop.FloatVolumeGrid_normalize(self, g)
FloatVolumeGrid_swigregister = _bishop.FloatVolumeGrid_swigregister
FloatVolumeGrid_swigregister(FloatVolumeGrid)

class VectorVolumeGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolumeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolumeGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VectorVolumeGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorVolumeGrid
    __del__ = lambda self: None

    def init(self, nx, ny, nz, Lx, Ly, Lz, Origin):
        return _bishop.VectorVolumeGrid_init(self, nx, ny, nz, Lx, Ly, Lz, Origin)

    def setClearValue(self, value):
        return _bishop.VectorVolumeGrid_setClearValue(self, value)

    def getClearValue(self):
        return _bishop.VectorVolumeGrid_getClearValue(self)

    def setOutsideValue(self, value):
        return _bishop.VectorVolumeGrid_setOutsideValue(self, value)

    def getOutsideValue(self):
        return _bishop.VectorVolumeGrid_getOutsideValue(self)

    def rawPtr(self):
        return _bishop.VectorVolumeGrid_rawPtr(self)

    def value(self, *args):
        return _bishop.VectorVolumeGrid_value(self, *args)

    def set(self, *args):
        return _bishop.VectorVolumeGrid_set(self, *args)

    def eval(self, P):
        return _bishop.VectorVolumeGrid_eval(self, P)

    def normalize(self, g):
        return _bishop.VectorVolumeGrid_normalize(self, g)
VectorVolumeGrid_swigregister = _bishop.VectorVolumeGrid_swigregister
VectorVolumeGrid_swigregister(VectorVolumeGrid)

class ColorVolumeGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolumeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolumeGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ColorVolumeGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorVolumeGrid
    __del__ = lambda self: None

    def init(self, nx, ny, nz, Lx, Ly, Lz, Origin):
        return _bishop.ColorVolumeGrid_init(self, nx, ny, nz, Lx, Ly, Lz, Origin)

    def setClearValue(self, value):
        return _bishop.ColorVolumeGrid_setClearValue(self, value)

    def getClearValue(self):
        return _bishop.ColorVolumeGrid_getClearValue(self)

    def setOutsideValue(self, value):
        return _bishop.ColorVolumeGrid_setOutsideValue(self, value)

    def getOutsideValue(self):
        return _bishop.ColorVolumeGrid_getOutsideValue(self)

    def rawPtr(self):
        return _bishop.ColorVolumeGrid_rawPtr(self)

    def value(self, *args):
        return _bishop.ColorVolumeGrid_value(self, *args)

    def set(self, *args):
        return _bishop.ColorVolumeGrid_set(self, *args)

    def eval(self, P):
        return _bishop.ColorVolumeGrid_eval(self, P)

    def normalize(self, g):
        return _bishop.ColorVolumeGrid_normalize(self, g)
ColorVolumeGrid_swigregister = _bishop.ColorVolumeGrid_swigregister
ColorVolumeGrid_swigregister(ColorVolumeGrid)

class SparseGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseGrid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SparseGrid(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _bishop.SparseGrid_init(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def get(self, arg2, arg3, arg4):
        return _bishop.SparseGrid_get(self, arg2, arg3, arg4)

    def setDefVal(self, arg2):
        return _bishop.SparseGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.SparseGrid_getDefVal(self)

    def setPartitionSize(self, arg2):
        return _bishop.SparseGrid_setPartitionSize(self, arg2)

    def set(self, arg2, arg3, arg4, arg5):
        return _bishop.SparseGrid_set(self, arg2, arg3, arg4, arg5)

    def size(self):
        return _bishop.SparseGrid_size(self)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.SparseGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def blockSize(self):
        return _bishop.SparseGrid_blockSize(self)

    def eval(self, P):
        return _bishop.SparseGrid_eval(self, P)

    def goodBlock(self, *args):
        return _bishop.SparseGrid_goodBlock(self, *args)

    def index(self, arg2, arg3, arg4):
        return _bishop.SparseGrid_index(self, arg2, arg3, arg4)
    __swig_destroy__ = _bishop.delete_SparseGrid
    __del__ = lambda self: None
SparseGrid_swigregister = _bishop.SparseGrid_swigregister
SparseGrid_swigregister(SparseGrid)

class SparseColorGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseColorGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseColorGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_SparseColorGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _bishop.SparseColorGrid_init(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def get(self, arg2, arg3, arg4):
        return _bishop.SparseColorGrid_get(self, arg2, arg3, arg4)

    def setDefVal(self, arg2):
        return _bishop.SparseColorGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.SparseColorGrid_getDefVal(self)

    def setPartitionSize(self, arg2):
        return _bishop.SparseColorGrid_setPartitionSize(self, arg2)

    def set(self, arg2, arg3, arg4, arg5):
        return _bishop.SparseColorGrid_set(self, arg2, arg3, arg4, arg5)

    def eval(self, P):
        return _bishop.SparseColorGrid_eval(self, P)

    def normalize(self, g):
        return _bishop.SparseColorGrid_normalize(self, g)
    __swig_destroy__ = _bishop.delete_SparseColorGrid
    __del__ = lambda self: None
SparseColorGrid_swigregister = _bishop.SparseColorGrid_swigregister
SparseColorGrid_swigregister(SparseColorGrid)

class SparseVectorGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseVectorGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseVectorGrid, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_SparseVectorGrid()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _bishop.SparseVectorGrid_init(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def get(self, arg2, arg3, arg4):
        return _bishop.SparseVectorGrid_get(self, arg2, arg3, arg4)

    def setDefVal(self, arg2):
        return _bishop.SparseVectorGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.SparseVectorGrid_getDefVal(self)

    def setPartitionSize(self, arg2):
        return _bishop.SparseVectorGrid_setPartitionSize(self, arg2)

    def set(self, arg2, arg3, arg4, arg5):
        return _bishop.SparseVectorGrid_set(self, arg2, arg3, arg4, arg5)

    def eval(self, P):
        return _bishop.SparseVectorGrid_eval(self, P)

    def normalize(self, g):
        return _bishop.SparseVectorGrid_normalize(self, g)
    __swig_destroy__ = _bishop.delete_SparseVectorGrid
    __del__ = lambda self: None
SparseVectorGrid_swigregister = _bishop.SparseVectorGrid_swigregister
SparseVectorGrid_swigregister(SparseVectorGrid)


def WriteVolumeGrid(*args):
    return _bishop.WriteVolumeGrid(*args)
WriteVolumeGrid = _bishop.WriteVolumeGrid

def ReadVolumeGrid(*args):
    return _bishop.ReadVolumeGrid(*args)
ReadVolumeGrid = _bishop.ReadVolumeGrid
class ScalarGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_ScalarGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.ScalarGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.ScalarGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.ScalarGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.ScalarGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.ScalarGrid___idiv__(self, e2)
ScalarGrid_swigregister = _bishop.ScalarGrid_swigregister
ScalarGrid_swigregister(ScalarGrid)

class VectorGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_VectorGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.VectorGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.VectorGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.VectorGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.VectorGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.VectorGrid___idiv__(self, e2)
VectorGrid_swigregister = _bishop.VectorGrid_swigregister
VectorGrid_swigregister(VectorGrid)

class ColorGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_ColorGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.ColorGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.ColorGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.ColorGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.ColorGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.ColorGrid___idiv__(self, e2)
ColorGrid_swigregister = _bishop.ColorGrid_swigregister
ColorGrid_swigregister(ColorGrid)

class MatrixGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_MatrixGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MatrixGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.MatrixGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.MatrixGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.MatrixGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.MatrixGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.MatrixGrid___idiv__(self, e2)
MatrixGrid_swigregister = _bishop.MatrixGrid_swigregister
MatrixGrid_swigregister(MatrixGrid)

class ScalarFrustumGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFrustumGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFrustumGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_ScalarFrustumGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarFrustumGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.ScalarFrustumGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.ScalarFrustumGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.ScalarFrustumGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.ScalarFrustumGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.ScalarFrustumGrid___idiv__(self, e2)
ScalarFrustumGrid_swigregister = _bishop.ScalarFrustumGrid_swigregister
ScalarFrustumGrid_swigregister(ScalarFrustumGrid)

class VectorFrustumGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFrustumGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFrustumGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_VectorFrustumGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorFrustumGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.VectorFrustumGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.VectorFrustumGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.VectorFrustumGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.VectorFrustumGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.VectorFrustumGrid___idiv__(self, e2)
VectorFrustumGrid_swigregister = _bishop.VectorFrustumGrid_swigregister
VectorFrustumGrid_swigregister(VectorFrustumGrid)

class ColorFrustumGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorFrustumGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorFrustumGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_ColorFrustumGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorFrustumGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.ColorFrustumGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.ColorFrustumGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.ColorFrustumGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.ColorFrustumGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.ColorFrustumGrid___idiv__(self, e2)
ColorFrustumGrid_swigregister = _bishop.ColorFrustumGrid_swigregister
ColorFrustumGrid_swigregister(ColorFrustumGrid)

class MatrixFrustumGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFrustumGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFrustumGrid, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        this = _bishop.new_MatrixFrustumGrid(f)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MatrixFrustumGrid
    __del__ = lambda self: None

    def __iadd__(self, e2):
        return _bishop.MatrixFrustumGrid___iadd__(self, e2)

    def __isub__(self, e2):
        return _bishop.MatrixFrustumGrid___isub__(self, e2)

    def __neg__(self):
        return _bishop.MatrixFrustumGrid___neg__(self)

    def __imul__(self, e2):
        return _bishop.MatrixFrustumGrid___imul__(self, e2)

    def __idiv__(self, e2):
        return _bishop.MatrixFrustumGrid___idiv__(self, e2)
MatrixFrustumGrid_swigregister = _bishop.MatrixFrustumGrid_swigregister
MatrixFrustumGrid_swigregister(MatrixFrustumGrid)

class ScalarSGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_ScalarSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, lx, ly, lz, Origin):
        return _bishop.ScalarSGrid_init(self, Nx, Ny, Nz, lx, ly, lz, Origin)

    def clear(self):
        return _bishop.ScalarSGrid_clear(self)

    def get(self, i, j, k):
        return _bishop.ScalarSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.ScalarSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.ScalarSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.ScalarSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.ScalarSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_ScalarSGrid
    __del__ = lambda self: None

    def deallocate(self):
        return _bishop.ScalarSGrid_deallocate(self)

    def Size(self):
        return _bishop.ScalarSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.ScalarSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.ScalarSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.ScalarSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.ScalarSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def sindex(self, i, j, k):
        return _bishop.ScalarSGrid_sindex(self, i, j, k)
ScalarSGrid_swigregister = _bishop.ScalarSGrid_swigregister
ScalarSGrid_swigregister(ScalarSGrid)

class VectorSGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_VectorSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, lx, ly, lz, Origin):
        return _bishop.VectorSGrid_init(self, Nx, Ny, Nz, lx, ly, lz, Origin)

    def clear(self):
        return _bishop.VectorSGrid_clear(self)

    def get(self, i, j, k):
        return _bishop.VectorSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.VectorSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.VectorSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.VectorSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.VectorSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_VectorSGrid
    __del__ = lambda self: None

    def deallocate(self):
        return _bishop.VectorSGrid_deallocate(self)

    def Size(self):
        return _bishop.VectorSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.VectorSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.VectorSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.VectorSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.VectorSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def sindex(self, i, j, k):
        return _bishop.VectorSGrid_sindex(self, i, j, k)
VectorSGrid_swigregister = _bishop.VectorSGrid_swigregister
VectorSGrid_swigregister(VectorSGrid)

class ColorSGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_ColorSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, lx, ly, lz, Origin):
        return _bishop.ColorSGrid_init(self, Nx, Ny, Nz, lx, ly, lz, Origin)

    def clear(self):
        return _bishop.ColorSGrid_clear(self)

    def get(self, i, j, k):
        return _bishop.ColorSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.ColorSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.ColorSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.ColorSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.ColorSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_ColorSGrid
    __del__ = lambda self: None

    def deallocate(self):
        return _bishop.ColorSGrid_deallocate(self)

    def Size(self):
        return _bishop.ColorSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.ColorSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.ColorSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.ColorSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.ColorSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def sindex(self, i, j, k):
        return _bishop.ColorSGrid_sindex(self, i, j, k)
ColorSGrid_swigregister = _bishop.ColorSGrid_swigregister
ColorSGrid_swigregister(ColorSGrid)

class MatrixSGrid(RectangularGrid):
    __swig_setmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [RectangularGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_MatrixSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, lx, ly, lz, Origin):
        return _bishop.MatrixSGrid_init(self, Nx, Ny, Nz, lx, ly, lz, Origin)

    def clear(self):
        return _bishop.MatrixSGrid_clear(self)

    def get(self, i, j, k):
        return _bishop.MatrixSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.MatrixSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.MatrixSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.MatrixSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.MatrixSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_MatrixSGrid
    __del__ = lambda self: None

    def deallocate(self):
        return _bishop.MatrixSGrid_deallocate(self)

    def Size(self):
        return _bishop.MatrixSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.MatrixSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.MatrixSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.MatrixSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.MatrixSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def sindex(self, i, j, k):
        return _bishop.MatrixSGrid_sindex(self, i, j, k)
MatrixSGrid_swigregister = _bishop.MatrixSGrid_swigregister
MatrixSGrid_swigregister(MatrixSGrid)

class ScalarGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarGridBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ScalarGridBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarGridBase
    __del__ = lambda self: None
ScalarGridBase_swigregister = _bishop.ScalarGridBase_swigregister
ScalarGridBase_swigregister(ScalarGridBase)

class VectorGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorGridBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VectorGridBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorGridBase
    __del__ = lambda self: None
VectorGridBase_swigregister = _bishop.VectorGridBase_swigregister
VectorGridBase_swigregister(VectorGridBase)

class ColorGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorGridBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ColorGridBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorGridBase
    __del__ = lambda self: None
ColorGridBase_swigregister = _bishop.ColorGridBase_swigregister
ColorGridBase_swigregister(ColorGridBase)

class ScalarFSGrid(FrustumGrid):
    __swig_setmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_ScalarFSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, cam):
        return _bishop.ScalarFSGrid_init(self, Nx, Ny, Nz, cam)

    def get(self, i, j, k):
        return _bishop.ScalarFSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.ScalarFSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.ScalarFSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.ScalarFSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.ScalarFSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_ScalarFSGrid
    __del__ = lambda self: None

    def Size(self):
        return _bishop.ScalarFSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.ScalarFSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.ScalarFSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.ScalarFSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.ScalarFSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def index(self, i, j, k):
        return _bishop.ScalarFSGrid_index(self, i, j, k)
ScalarFSGrid_swigregister = _bishop.ScalarFSGrid_swigregister
ScalarFSGrid_swigregister(ScalarFSGrid)

class VectorFSGrid(FrustumGrid):
    __swig_setmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_VectorFSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, cam):
        return _bishop.VectorFSGrid_init(self, Nx, Ny, Nz, cam)

    def get(self, i, j, k):
        return _bishop.VectorFSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.VectorFSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.VectorFSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.VectorFSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.VectorFSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_VectorFSGrid
    __del__ = lambda self: None

    def Size(self):
        return _bishop.VectorFSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.VectorFSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.VectorFSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.VectorFSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.VectorFSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def index(self, i, j, k):
        return _bishop.VectorFSGrid_index(self, i, j, k)
VectorFSGrid_swigregister = _bishop.VectorFSGrid_swigregister
VectorFSGrid_swigregister(VectorFSGrid)

class ColorFSGrid(FrustumGrid):
    __swig_setmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorFSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorFSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_ColorFSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, cam):
        return _bishop.ColorFSGrid_init(self, Nx, Ny, Nz, cam)

    def get(self, i, j, k):
        return _bishop.ColorFSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.ColorFSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.ColorFSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.ColorFSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.ColorFSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_ColorFSGrid
    __del__ = lambda self: None

    def Size(self):
        return _bishop.ColorFSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.ColorFSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.ColorFSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.ColorFSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.ColorFSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def index(self, i, j, k):
        return _bishop.ColorFSGrid_index(self, i, j, k)
ColorFSGrid_swigregister = _bishop.ColorFSGrid_swigregister
ColorFSGrid_swigregister(ColorFSGrid)

class MatrixFSGrid(FrustumGrid):
    __swig_setmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFSGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [FrustumGrid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFSGrid, name)
    __repr__ = _swig_repr

    def __init__(self, psize=4):
        this = _bishop.new_MatrixFSGrid(psize)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, Nx, Ny, Nz, cam):
        return _bishop.MatrixFSGrid_init(self, Nx, Ny, Nz, cam)

    def get(self, i, j, k):
        return _bishop.MatrixFSGrid_get(self, i, j, k)

    def setDefVal(self, arg2):
        return _bishop.MatrixFSGrid_setDefVal(self, arg2)

    def getDefVal(self):
        return _bishop.MatrixFSGrid_getDefVal(self)

    def set(self, i, j, k, val):
        return _bishop.MatrixFSGrid_set(self, i, j, k, val)

    def eval(self, P):
        return _bishop.MatrixFSGrid_eval(self, P)
    __swig_destroy__ = _bishop.delete_MatrixFSGrid
    __del__ = lambda self: None

    def Size(self):
        return _bishop.MatrixFSGrid_Size(self)

    def NbPartitions(self):
        return _bishop.MatrixFSGrid_NbPartitions(self)

    def blockSize(self):
        return _bishop.MatrixFSGrid_blockSize(self)

    def goodBlock(self, *args):
        return _bishop.MatrixFSGrid_goodBlock(self, *args)

    def blockBounds(self, block, i0, j0, k0, i1, j1, k1):
        return _bishop.MatrixFSGrid_blockBounds(self, block, i0, j0, k0, i1, j1, k1)

    def index(self, i, j, k):
        return _bishop.MatrixFSGrid_index(self, i, j, k)
MatrixFSGrid_swigregister = _bishop.MatrixFSGrid_swigregister
MatrixFSGrid_swigregister(MatrixFSGrid)

class ScalarFrustumGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFrustumGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFrustumGridBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ScalarFrustumGridBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScalarFrustumGridBase
    __del__ = lambda self: None
ScalarFrustumGridBase_swigregister = _bishop.ScalarFrustumGridBase_swigregister
ScalarFrustumGridBase_swigregister(ScalarFrustumGridBase)

class VectorFrustumGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFrustumGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFrustumGridBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_VectorFrustumGridBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VectorFrustumGridBase
    __del__ = lambda self: None
VectorFrustumGridBase_swigregister = _bishop.VectorFrustumGridBase_swigregister
VectorFrustumGridBase_swigregister(VectorFrustumGridBase)

class ColorFrustumGridBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorFrustumGridBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorFrustumGridBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ColorFrustumGridBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ColorFrustumGridBase
    __del__ = lambda self: None
ColorFrustumGridBase_swigregister = _bishop.ColorFrustumGridBase_swigregister
ColorFrustumGridBase_swigregister(ColorFrustumGridBase)

class CurveFS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveFS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveFS, name)
    __repr__ = _swig_repr

    def __init__(self, Qmax, Qmin):
        this = _bishop.new_CurveFS(Qmax, Qmin)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CurveFS
    __del__ = lambda self: None

    def eval(self, q):
        return _bishop.CurveFS_eval(self, q)

    def grad(self, q):
        return _bishop.CurveFS_grad(self, q)

    def fsT(self, q):
        return _bishop.CurveFS_fsT(self, q)

    def fsN(self, q):
        return _bishop.CurveFS_fsN(self, q)

    def fsB(self, q):
        return _bishop.CurveFS_fsB(self, q)

    def speed(self, q):
        return _bishop.CurveFS_speed(self, q)

    def curvature(self, q):
        return _bishop.CurveFS_curvature(self, q)

    def torsion(self, q):
        return _bishop.CurveFS_torsion(self, q)

    def qMax(self):
        return _bishop.CurveFS_qMax(self)

    def qMin(self):
        return _bishop.CurveFS_qMin(self)

    def typelabel(self):
        return _bishop.CurveFS_typelabel(self)

    def documentation(self):
        return _bishop.CurveFS_documentation(self)
CurveFS_swigregister = _bishop.CurveFS_swigregister
CurveFS_swigregister(CurveFS)

class SpaceCurve(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceCurve, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceCurve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SpaceCurve(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SpaceCurve
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.SpaceCurve___str__(self)

    def __doc__(self):
        return _bishop.SpaceCurve___doc__(self)
SpaceCurve_swigregister = _bishop.SpaceCurve_swigregister
SpaceCurve_swigregister(SpaceCurve)

class SpaceCurvedBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceCurvedBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceCurvedBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_SpaceCurvedBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SpaceCurvedBase
    __del__ = lambda self: None
SpaceCurvedBase_swigregister = _bishop.SpaceCurvedBase_swigregister
SpaceCurvedBase_swigregister(SpaceCurvedBase)

class FadeCurve(CurveFS):
    __swig_setmethods__ = {}
    for _s in [CurveFS]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadeCurve, name, value)
    __swig_getmethods__ = {}
    for _s in [CurveFS]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FadeCurve, name)
    __repr__ = _swig_repr

    def __init__(self, Anchors, Qmin, Qmax):
        this = _bishop.new_FadeCurve(Anchors, Qmin, Qmax)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FadeCurve
    __del__ = lambda self: None

    def eval(self, t):
        return _bishop.FadeCurve_eval(self, t)

    def grad(self, q):
        return _bishop.FadeCurve_grad(self, q)

    def fsN(self, q):
        return _bishop.FadeCurve_fsN(self, q)

    def curvature(self, q):
        return _bishop.FadeCurve_curvature(self, q)

    def torsion(self, q):
        return _bishop.FadeCurve_torsion(self, q)
FadeCurve_swigregister = _bishop.FadeCurve_swigregister
FadeCurve_swigregister(FadeCurve)


def fadePath(Anchors):
    return _bishop.fadePath(Anchors)
fadePath = _bishop.fadePath

def ballisticPath(X0, V0, A0, startTime, targetTime):
    return _bishop.ballisticPath(X0, V0, A0, startTime, targetTime)
ballisticPath = _bishop.ballisticPath

def targetedPath(X0, X1, A0, startTime, targetTime):
    return _bishop.targetedPath(X0, X1, A0, startTime, targetTime)
targetedPath = _bishop.targetedPath

def splinePath(X0, X1, A0, startTime, midTime, targetTime):
    return _bishop.splinePath(X0, X1, A0, startTime, midTime, targetTime)
splinePath = _bishop.splinePath
class ConstantVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantVolume, name)
    __repr__ = _swig_repr

    def __init__(self, v):
        this = _bishop.new_ConstantVolume(v)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ConstantVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ConstantVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ConstantVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ConstantVolume_typelabel(self)
ConstantVolume_swigregister = _bishop.ConstantVolume_swigregister
ConstantVolume_swigregister(ConstantVolume)

class ExpVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ExpVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ExpVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ExpVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ExpVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ExpVolume_typelabel(self)
ExpVolume_swigregister = _bishop.ExpVolume_swigregister
ExpVolume_swigregister(ExpVolume)

class ReportVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ReportVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ReportVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ReportVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ReportVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ReportVolume_typelabel(self)
ReportVolume_swigregister = _bishop.ReportVolume_swigregister
ReportVolume_swigregister(ReportVolume)

class SphereVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, rad):
        this = _bishop.new_SphereVolume(cen, rad)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SphereVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SphereVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SphereVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SphereVolume_typelabel(self)
SphereVolume_swigregister = _bishop.SphereVolume_swigregister
SphereVolume_swigregister(SphereVolume)

class CsgBoxVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CsgBoxVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CsgBoxVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, rad, pwr):
        this = _bishop.new_CsgBoxVolume(cen, rad, pwr)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CsgBoxVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CsgBoxVolume_eval(self, P)

    def grad(self, P):
        return _bishop.CsgBoxVolume_grad(self, P)

    def typelabel(self):
        return _bishop.CsgBoxVolume_typelabel(self)
CsgBoxVolume_swigregister = _bishop.CsgBoxVolume_swigregister
CsgBoxVolume_swigregister(CsgBoxVolume)

class CsgRectangleVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CsgRectangleVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CsgRectangleVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, rad, asp, pwr):
        this = _bishop.new_CsgRectangleVolume(cen, rad, asp, pwr)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CsgRectangleVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CsgRectangleVolume_eval(self, P)

    def grad(self, P):
        return _bishop.CsgRectangleVolume_grad(self, P)

    def typelabel(self):
        return _bishop.CsgRectangleVolume_typelabel(self)
CsgRectangleVolume_swigregister = _bishop.CsgRectangleVolume_swigregister
CsgRectangleVolume_swigregister(CsgRectangleVolume)

class ConeVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConeVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, ax, h, theta):
        this = _bishop.new_ConeVolume(cen, ax, h, theta)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ConeVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ConeVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ConeVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ConeVolume_typelabel(self)
ConeVolume_swigregister = _bishop.ConeVolume_swigregister
ConeVolume_swigregister(ConeVolume)

class PlaneVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, norm):
        this = _bishop.new_PlaneVolume(cen, norm)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PlaneVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PlaneVolume_eval(self, P)

    def grad(self, P):
        return _bishop.PlaneVolume_grad(self, P)

    def typelabel(self):
        return _bishop.PlaneVolume_typelabel(self)
PlaneVolume_swigregister = _bishop.PlaneVolume_swigregister
PlaneVolume_swigregister(PlaneVolume)

class HardBoxVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardBoxVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HardBoxVolume, name)
    __repr__ = _swig_repr

    def __init__(self, _llc, _urc):
        this = _bishop.new_HardBoxVolume(_llc, _urc)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_HardBoxVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.HardBoxVolume_eval(self, P)

    def typelabel(self):
        return _bishop.HardBoxVolume_typelabel(self)
HardBoxVolume_swigregister = _bishop.HardBoxVolume_swigregister
HardBoxVolume_swigregister(HardBoxVolume)

class TorusVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TorusVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TorusVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, axis, majorRad, minorRad):
        this = _bishop.new_TorusVolume(cen, axis, majorRad, minorRad)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TorusVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.TorusVolume_eval(self, P)

    def grad(self, P):
        return _bishop.TorusVolume_grad(self, P)

    def typelabel(self):
        return _bishop.TorusVolume_typelabel(self)
TorusVolume_swigregister = _bishop.TorusVolume_swigregister
TorusVolume_swigregister(TorusVolume)

class MobiusStripVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MobiusStripVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MobiusStripVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, axis, rad, thick):
        this = _bishop.new_MobiusStripVolume(cen, axis, rad, thick)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MobiusStripVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MobiusStripVolume_eval(self, P)
MobiusStripVolume_swigregister = _bishop.MobiusStripVolume_swigregister
MobiusStripVolume_swigregister(MobiusStripVolume)

class SteinerPatchVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SteinerPatchVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SteinerPatchVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_SteinerPatchVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SteinerPatchVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SteinerPatchVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SteinerPatchVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SteinerPatchVolume_typelabel(self)
SteinerPatchVolume_swigregister = _bishop.SteinerPatchVolume_swigregister
SteinerPatchVolume_swigregister(SteinerPatchVolume)

class IcosahedronVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IcosahedronVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IcosahedronVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_IcosahedronVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_IcosahedronVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.IcosahedronVolume_eval(self, P)

    def typelabel(self):
        return _bishop.IcosahedronVolume_typelabel(self)
IcosahedronVolume_swigregister = _bishop.IcosahedronVolume_swigregister
IcosahedronVolume_swigregister(IcosahedronVolume)

class ScaleVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ScaleVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScaleVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ScaleVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ScaleVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ScaleVolume_typelabel(self)
ScaleVolume_swigregister = _bishop.ScaleVolume_swigregister
ScaleVolume_swigregister(ScaleVolume)

class TranslateVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_TranslateVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TranslateVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.TranslateVolume_eval(self, P)

    def grad(self, P):
        return _bishop.TranslateVolume_grad(self, P)

    def typelabel(self):
        return _bishop.TranslateVolume_typelabel(self)
TranslateVolume_swigregister = _bishop.TranslateVolume_swigregister
TranslateVolume_swigregister(TranslateVolume)

class RotateVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotateVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_RotateVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RotateVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.RotateVolume_eval(self, P)

    def grad(self, P):
        return _bishop.RotateVolume_grad(self, P)

    def typelabel(self):
        return _bishop.RotateVolume_typelabel(self)
RotateVolume_swigregister = _bishop.RotateVolume_swigregister
RotateVolume_swigregister(RotateVolume)

class NegateVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NegateVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NegateVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NegateVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NegateVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.NegateVolume_eval(self, P)

    def grad(self, P):
        return _bishop.NegateVolume_grad(self, P)

    def typelabel(self):
        return _bishop.NegateVolume_typelabel(self)
NegateVolume_swigregister = _bishop.NegateVolume_swigregister
NegateVolume_swigregister(NegateVolume)

class AbsoluteVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsoluteVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbsoluteVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AbsoluteVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AbsoluteVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AbsoluteVolume_eval(self, P)

    def grad(self, P):
        return _bishop.AbsoluteVolume_grad(self, P)

    def typelabel(self):
        return _bishop.AbsoluteVolume_typelabel(self)
AbsoluteVolume_swigregister = _bishop.AbsoluteVolume_swigregister
AbsoluteVolume_swigregister(AbsoluteVolume)

class MultiplyVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplyVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplyVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MultiplyVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MultiplyVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MultiplyVolume_eval(self, P)

    def grad(self, P):
        return _bishop.MultiplyVolume_grad(self, P)

    def typelabel(self):
        return _bishop.MultiplyVolume_typelabel(self)
MultiplyVolume_swigregister = _bishop.MultiplyVolume_swigregister
MultiplyVolume_swigregister(MultiplyVolume)

class DivideVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivideVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivideVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_DivideVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DivideVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.DivideVolume_eval(self, P)

    def grad(self, P):
        return _bishop.DivideVolume_grad(self, P)

    def typelabel(self):
        return _bishop.DivideVolume_typelabel(self)
DivideVolume_swigregister = _bishop.DivideVolume_swigregister
DivideVolume_swigregister(DivideVolume)

class AddVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AddVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AddVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AddVolume_eval(self, P)

    def grad(self, P):
        return _bishop.AddVolume_grad(self, P)

    def typelabel(self):
        return _bishop.AddVolume_typelabel(self)
AddVolume_swigregister = _bishop.AddVolume_swigregister
AddVolume_swigregister(AddVolume)

class SubtractVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubtractVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubtractVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SubtractVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SubtractVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SubtractVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SubtractVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SubtractVolume_typelabel(self)
SubtractVolume_swigregister = _bishop.SubtractVolume_swigregister
SubtractVolume_swigregister(SubtractVolume)

class MaskVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaskVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaskVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MaskVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MaskVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MaskVolume_eval(self, P)

    def grad(self, P):
        return _bishop.MaskVolume_grad(self, P)

    def typelabel(self):
        return _bishop.MaskVolume_typelabel(self)
MaskVolume_swigregister = _bishop.MaskVolume_swigregister
MaskVolume_swigregister(MaskVolume)

class ClampVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClampVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClampVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ClampVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ClampVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ClampVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ClampVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ClampVolume_typelabel(self)
ClampVolume_swigregister = _bishop.ClampVolume_swigregister
ClampVolume_swigregister(ClampVolume)

class GammaVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GammaVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GammaVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GammaVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GammaVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GammaVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GammaVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GammaVolume_typelabel(self)
GammaVolume_swigregister = _bishop.GammaVolume_swigregister
GammaVolume_swigregister(GammaVolume)

class VolumeGammaVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeGammaVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeGammaVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VolumeGammaVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeGammaVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.VolumeGammaVolume_eval(self, P)

    def grad(self, P):
        return _bishop.VolumeGammaVolume_grad(self, P)

    def typelabel(self):
        return _bishop.VolumeGammaVolume_typelabel(self)
VolumeGammaVolume_swigregister = _bishop.VolumeGammaVolume_swigregister
VolumeGammaVolume_swigregister(VolumeGammaVolume)

class BlinnBlendVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlinnBlendVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlinnBlendVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_BlinnBlendVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_BlinnBlendVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.BlinnBlendVolume_eval(self, P)

    def grad(self, P):
        return _bishop.BlinnBlendVolume_grad(self, P)

    def typelabel(self):
        return _bishop.BlinnBlendVolume_typelabel(self)
BlinnBlendVolume_swigregister = _bishop.BlinnBlendVolume_swigregister
BlinnBlendVolume_swigregister(BlinnBlendVolume)

class MultiBlendVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiBlendVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiBlendVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MultiBlendVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MultiBlendVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MultiBlendVolume_eval(self, P)

    def grad(self, P):
        return _bishop.MultiBlendVolume_grad(self, P)

    def typelabel(self):
        return _bishop.MultiBlendVolume_typelabel(self)
MultiBlendVolume_swigregister = _bishop.MultiBlendVolume_swigregister
MultiBlendVolume_swigregister(MultiBlendVolume)

class UnionVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnionVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnionVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_UnionVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_UnionVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.UnionVolume_eval(self, P)

    def grad(self, P):
        return _bishop.UnionVolume_grad(self, P)

    def typelabel(self):
        return _bishop.UnionVolume_typelabel(self)
UnionVolume_swigregister = _bishop.UnionVolume_swigregister
UnionVolume_swigregister(UnionVolume)

class IntersectionVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntersectionVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntersectionVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_IntersectionVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_IntersectionVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.IntersectionVolume_eval(self, P)

    def grad(self, P):
        return _bishop.IntersectionVolume_grad(self, P)

    def typelabel(self):
        return _bishop.IntersectionVolume_typelabel(self)
IntersectionVolume_swigregister = _bishop.IntersectionVolume_swigregister
IntersectionVolume_swigregister(IntersectionVolume)

class CutoutVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CutoutVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CutoutVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_CutoutVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CutoutVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CutoutVolume_eval(self, P)

    def grad(self, P):
        return _bishop.CutoutVolume_grad(self, P)

    def typelabel(self):
        return _bishop.CutoutVolume_typelabel(self)
CutoutVolume_swigregister = _bishop.CutoutVolume_swigregister
CutoutVolume_swigregister(CutoutVolume)

class PyroclasticVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyroclasticVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyroclasticVolume, name)
    __repr__ = _swig_repr

    def __init__(self, Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma=1):
        this = _bishop.new_PyroclasticVolume(Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PyroclasticVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PyroclasticVolume_eval(self, P)

    def typelabel(self):
        return _bishop.PyroclasticVolume_typelabel(self)
PyroclasticVolume_swigregister = _bishop.PyroclasticVolume_swigregister
PyroclasticVolume_swigregister(PyroclasticVolume)

class RadialPyroclasticVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadialPyroclasticVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadialPyroclasticVolume, name)
    __repr__ = _swig_repr

    def __init__(self, Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma=1):
        this = _bishop.new_RadialPyroclasticVolume(Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RadialPyroclasticVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.RadialPyroclasticVolume_eval(self, P)

    def typelabel(self):
        return _bishop.RadialPyroclasticVolume_typelabel(self)
RadialPyroclasticVolume_swigregister = _bishop.RadialPyroclasticVolume_swigregister
RadialPyroclasticVolume_swigregister(RadialPyroclasticVolume)

class FFTNoiseVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTNoiseVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFTNoiseVolume, name)
    __repr__ = _swig_repr

    def __init__(self, power, low, high, length, sz):
        this = _bishop.new_FFTNoiseVolume(power, low, high, length, sz)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FFTNoiseVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FFTNoiseVolume_eval(self, P)

    def typelabel(self):
        return _bishop.FFTNoiseVolume_typelabel(self)
FFTNoiseVolume_swigregister = _bishop.FFTNoiseVolume_swigregister
FFTNoiseVolume_swigregister(FFTNoiseVolume)

class NoiseVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NoiseVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NoiseVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.NoiseVolume_eval(self, P)

    def typelabel(self):
        return _bishop.NoiseVolume_typelabel(self)
NoiseVolume_swigregister = _bishop.NoiseVolume_swigregister
NoiseVolume_swigregister(NoiseVolume)

class GriddedVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GriddedVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedVolume_eval(self, P)

    def typelabel(self):
        return _bishop.GriddedVolume_typelabel(self)
GriddedVolume_swigregister = _bishop.GriddedVolume_swigregister
GriddedVolume_swigregister(GriddedVolume)

class GriddedSGridVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedSGridVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedSGridVolume, name)
    __repr__ = _swig_repr

    def __init__(self, g):
        this = _bishop.new_GriddedSGridVolume(g)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedSGridVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedSGridVolume_eval(self, P)

    def typelabel(self):
        return _bishop.GriddedSGridVolume_typelabel(self)
GriddedSGridVolume_swigregister = _bishop.GriddedSGridVolume_swigregister
GriddedSGridVolume_swigregister(GriddedSGridVolume)

class GriddedFrustumVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedFrustumVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedFrustumVolume, name)
    __repr__ = _swig_repr

    def __init__(self, g):
        this = _bishop.new_GriddedFrustumVolume(g)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedFrustumVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedFrustumVolume_eval(self, P)

    def typelabel(self):
        return _bishop.GriddedFrustumVolume_typelabel(self)
GriddedFrustumVolume_swigregister = _bishop.GriddedFrustumVolume_swigregister
GriddedFrustumVolume_swigregister(GriddedFrustumVolume)

class EllipseVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipseVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipseVolume, name)
    __repr__ = _swig_repr

    def __init__(self, cen, axs, majorrad, minorrad):
        this = _bishop.new_EllipseVolume(cen, axs, majorrad, minorrad)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_EllipseVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.EllipseVolume_eval(self, P)

    def grad(self, P):
        return _bishop.EllipseVolume_grad(self, P)

    def typelabel(self):
        return _bishop.EllipseVolume_typelabel(self)
EllipseVolume_swigregister = _bishop.EllipseVolume_swigregister
EllipseVolume_swigregister(EllipseVolume)

class JitterSampleVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JitterSampleVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JitterSampleVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_JitterSampleVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_JitterSampleVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.JitterSampleVolume_eval(self, P)

    def grad(self, P):
        return _bishop.JitterSampleVolume_grad(self, P)

    def typelabel(self):
        return _bishop.JitterSampleVolume_typelabel(self)
JitterSampleVolume_swigregister = _bishop.JitterSampleVolume_swigregister
JitterSampleVolume_swigregister(JitterSampleVolume)

class AdvectVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvectVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvectVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AdvectVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AdvectVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AdvectVolume_eval(self, P)

    def grad(self, P):
        return _bishop.AdvectVolume_grad(self, P)

    def typelabel(self):
        return _bishop.AdvectVolume_typelabel(self)
AdvectVolume_swigregister = _bishop.AdvectVolume_swigregister
AdvectVolume_swigregister(AdvectVolume)

class WarpVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_WarpVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_WarpVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.WarpVolume_eval(self, P)

    def grad(self, P):
        return _bishop.WarpVolume_grad(self, P)

    def typelabel(self):
        return _bishop.WarpVolume_typelabel(self)
WarpVolume_swigregister = _bishop.WarpVolume_swigregister
WarpVolume_swigregister(WarpVolume)

class PeriodicVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_PeriodicVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PeriodicVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PeriodicVolume_eval(self, P)

    def grad(self, P):
        return _bishop.PeriodicVolume_grad(self, P)

    def typelabel(self):
        return _bishop.PeriodicVolume_typelabel(self)
PeriodicVolume_swigregister = _bishop.PeriodicVolume_swigregister
PeriodicVolume_swigregister(PeriodicVolume)

class DetGradMapVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetGradMapVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DetGradMapVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_DetGradMapVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DetGradMapVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.DetGradMapVolume_eval(self, P)

    def grad(self, P):
        return _bishop.DetGradMapVolume_grad(self, P)
DetGradMapVolume_swigregister = _bishop.DetGradMapVolume_swigregister
DetGradMapVolume_swigregister(DetGradMapVolume)

class SwitchVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SwitchVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SwitchVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SwitchVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SwitchVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SwitchVolume_typelabel(self)
SwitchVolume_swigregister = _bishop.SwitchVolume_swigregister
SwitchVolume_swigregister(SwitchVolume)

class SineVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SineVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SineVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SineVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SineVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SineVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SineVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SineVolume_typelabel(self)
SineVolume_swigregister = _bishop.SineVolume_swigregister
SineVolume_swigregister(SineVolume)

class CosineVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosineVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_CosineVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CosineVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CosineVolume_eval(self, P)

    def grad(self, P):
        return _bishop.CosineVolume_grad(self, P)

    def typelabel(self):
        return _bishop.CosineVolume_typelabel(self)
CosineVolume_swigregister = _bishop.CosineVolume_swigregister
CosineVolume_swigregister(CosineVolume)

class TangentVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TangentVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TangentVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_TangentVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TangentVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.TangentVolume_eval(self, P)

    def grad(self, P):
        return _bishop.TangentVolume_grad(self, P)

    def typelabel(self):
        return _bishop.TangentVolume_typelabel(self)
TangentVolume_swigregister = _bishop.TangentVolume_swigregister
TangentVolume_swigregister(TangentVolume)

class ArcsineVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcsineVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArcsineVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ArcsineVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ArcsineVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ArcsineVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ArcsineVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ArcsineVolume_typelabel(self)
ArcsineVolume_swigregister = _bishop.ArcsineVolume_swigregister
ArcsineVolume_swigregister(ArcsineVolume)

class ArccosineVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArccosineVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArccosineVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ArccosineVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ArccosineVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ArccosineVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ArccosineVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ArccosineVolume_typelabel(self)
ArccosineVolume_swigregister = _bishop.ArccosineVolume_swigregister
ArccosineVolume_swigregister(ArccosineVolume)

class ArctangentVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArctangentVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArctangentVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ArctangentVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ArctangentVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ArctangentVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ArctangentVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ArctangentVolume_typelabel(self)
ArctangentVolume_swigregister = _bishop.ArctangentVolume_swigregister
ArctangentVolume_swigregister(ArctangentVolume)

class HyperbolicSineVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperbolicSineVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperbolicSineVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_HyperbolicSineVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_HyperbolicSineVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.HyperbolicSineVolume_eval(self, P)

    def grad(self, P):
        return _bishop.HyperbolicSineVolume_grad(self, P)

    def typelabel(self):
        return _bishop.HyperbolicSineVolume_typelabel(self)
HyperbolicSineVolume_swigregister = _bishop.HyperbolicSineVolume_swigregister
HyperbolicSineVolume_swigregister(HyperbolicSineVolume)

class HyperbolicCosineVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperbolicCosineVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperbolicCosineVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_HyperbolicCosineVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_HyperbolicCosineVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.HyperbolicCosineVolume_eval(self, P)

    def grad(self, P):
        return _bishop.HyperbolicCosineVolume_grad(self, P)

    def typelabel(self):
        return _bishop.HyperbolicCosineVolume_typelabel(self)
HyperbolicCosineVolume_swigregister = _bishop.HyperbolicCosineVolume_swigregister
HyperbolicCosineVolume_swigregister(HyperbolicCosineVolume)

class HyperbolicTangentVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperbolicTangentVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperbolicTangentVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_HyperbolicTangentVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_HyperbolicTangentVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.HyperbolicTangentVolume_eval(self, P)

    def grad(self, P):
        return _bishop.HyperbolicTangentVolume_grad(self, P)

    def typelabel(self):
        return _bishop.HyperbolicTangentVolume_typelabel(self)
HyperbolicTangentVolume_swigregister = _bishop.HyperbolicTangentVolume_swigregister
HyperbolicTangentVolume_swigregister(HyperbolicTangentVolume)

class XIdentityVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XIdentityVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XIdentityVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_XIdentityVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_XIdentityVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.XIdentityVolume_eval(self, P)

    def grad(self, P):
        return _bishop.XIdentityVolume_grad(self, P)

    def typelabel(self):
        return _bishop.XIdentityVolume_typelabel(self)
XIdentityVolume_swigregister = _bishop.XIdentityVolume_swigregister
XIdentityVolume_swigregister(XIdentityVolume)

class YIdentityVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YIdentityVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YIdentityVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_YIdentityVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_YIdentityVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.YIdentityVolume_eval(self, P)

    def grad(self, P):
        return _bishop.YIdentityVolume_grad(self, P)

    def typelabel(self):
        return _bishop.YIdentityVolume_typelabel(self)
YIdentityVolume_swigregister = _bishop.YIdentityVolume_swigregister
YIdentityVolume_swigregister(YIdentityVolume)

class ZIdentityVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZIdentityVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZIdentityVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ZIdentityVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ZIdentityVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ZIdentityVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ZIdentityVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ZIdentityVolume_typelabel(self)
ZIdentityVolume_swigregister = _bishop.ZIdentityVolume_swigregister
ZIdentityVolume_swigregister(ZIdentityVolume)

class ImplicitFunctionDisplacement(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitFunctionDisplacement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitFunctionDisplacement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ImplicitFunctionDisplacement(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ImplicitFunctionDisplacement
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ImplicitFunctionDisplacement_eval(self, P)

    def grad(self, P):
        return _bishop.ImplicitFunctionDisplacement_grad(self, P)

    def typelabel(self):
        return _bishop.ImplicitFunctionDisplacement_typelabel(self)
ImplicitFunctionDisplacement_swigregister = _bishop.ImplicitFunctionDisplacement_swigregister
ImplicitFunctionDisplacement_swigregister(ImplicitFunctionDisplacement)

class InfiniteCylinder(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfiniteCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfiniteCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, axis, rad):
        this = _bishop.new_InfiniteCylinder(axis, rad)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_InfiniteCylinder
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.InfiniteCylinder_eval(self, P)

    def grad(self, P):
        return _bishop.InfiniteCylinder_grad(self, P)

    def typelabel(self):
        return _bishop.InfiniteCylinder_typelabel(self)
InfiniteCylinder_swigregister = _bishop.InfiniteCylinder_swigregister
InfiniteCylinder_swigregister(InfiniteCylinder)

class ImplicitCylinder(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, cen, axis, length, radius):
        this = _bishop.new_ImplicitCylinder(cen, axis, length, radius)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ImplicitCylinder
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ImplicitCylinder_eval(self, P)

    def grad(self, P):
        return _bishop.ImplicitCylinder_grad(self, P)

    def typelabel(self):
        return _bishop.ImplicitCylinder_typelabel(self)
ImplicitCylinder_swigregister = _bishop.ImplicitCylinder_swigregister
ImplicitCylinder_swigregister(ImplicitCylinder)

class ImplicitShell(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitShell, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitShell, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ImplicitShell(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ImplicitShell
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ImplicitShell_eval(self, P)

    def grad(self, P):
        return _bishop.ImplicitShell_grad(self, P)

    def typelabel(self):
        return _bishop.ImplicitShell_typelabel(self)
ImplicitShell_swigregister = _bishop.ImplicitShell_swigregister
ImplicitShell_swigregister(ImplicitShell)

class ProceduralDSM(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProceduralDSM, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProceduralDSM, name)
    __repr__ = _swig_repr

    def __init__(self, density, lghtP, atten, step):
        this = _bishop.new_ProceduralDSM(density, lghtP, atten, step)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ProceduralDSM
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ProceduralDSM_eval(self, P)

    def grad(self, P):
        return _bishop.ProceduralDSM_grad(self, P)

    def typelabel(self):
        return _bishop.ProceduralDSM_typelabel(self)
ProceduralDSM_swigregister = _bishop.ProceduralDSM_swigregister
ProceduralDSM_swigregister(ProceduralDSM)

class Bretzel2Volume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bretzel2Volume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bretzel2Volume, name)
    __repr__ = _swig_repr

    def __init__(self, c=1.0):
        this = _bishop.new_Bretzel2Volume(c)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Bretzel2Volume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.Bretzel2Volume_eval(self, P)

    def typelabel(self):
        return _bishop.Bretzel2Volume_typelabel(self)
Bretzel2Volume_swigregister = _bishop.Bretzel2Volume_swigregister
Bretzel2Volume_swigregister(Bretzel2Volume)

class CumuloVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumuloVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CumuloVolume, name)
    __repr__ = _swig_repr

    def __init__(self, basefunction, dispArray, step, nbIterations):
        this = _bishop.new_CumuloVolume(basefunction, dispArray, step, nbIterations)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CumuloVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CumuloVolume_eval(self, P)

    def typelabel(self):
        return _bishop.CumuloVolume_typelabel(self)
CumuloVolume_swigregister = _bishop.CumuloVolume_swigregister
CumuloVolume_swigregister(CumuloVolume)

class SpaceCurveVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpaceCurveVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpaceCurveVolume, name)
    __repr__ = _swig_repr

    def __init__(self, c, rad):
        this = _bishop.new_SpaceCurveVolume(c, rad)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SpaceCurveVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SpaceCurveVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SpaceCurveVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SpaceCurveVolume_typelabel(self)
SpaceCurveVolume_swigregister = _bishop.SpaceCurveVolume_swigregister
SpaceCurveVolume_swigregister(SpaceCurveVolume)

class PiecewiseCurveVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseCurveVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseCurveVolume, name)
    __repr__ = _swig_repr

    def __init__(self, c):
        this = _bishop.new_PiecewiseCurveVolume(c)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PiecewiseCurveVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PiecewiseCurveVolume_eval(self, P)

    def grad(self, P):
        return _bishop.PiecewiseCurveVolume_grad(self, P)

    def typelabel(self):
        return _bishop.PiecewiseCurveVolume_typelabel(self)
PiecewiseCurveVolume_swigregister = _bishop.PiecewiseCurveVolume_swigregister
PiecewiseCurveVolume_swigregister(PiecewiseCurveVolume)

class PiecewisePyroCurveVolume(PiecewiseCurveVolume):
    __swig_setmethods__ = {}
    for _s in [PiecewiseCurveVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewisePyroCurveVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [PiecewiseCurveVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewisePyroCurveVolume, name)
    __repr__ = _swig_repr

    def __init__(self, c):
        this = _bishop.new_PiecewisePyroCurveVolume(c)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PiecewisePyroCurveVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PiecewisePyroCurveVolume_eval(self, P)

    def typelabel(self):
        return _bishop.PiecewisePyroCurveVolume_typelabel(self)
PiecewisePyroCurveVolume_swigregister = _bishop.PiecewisePyroCurveVolume_swigregister
PiecewisePyroCurveVolume_swigregister(PiecewisePyroCurveVolume)

class PiecewiseNoiseCurveVolume(PiecewiseCurveVolume):
    __swig_setmethods__ = {}
    for _s in [PiecewiseCurveVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PiecewiseNoiseCurveVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [PiecewiseCurveVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PiecewiseNoiseCurveVolume, name)
    __repr__ = _swig_repr

    def __init__(self, c):
        this = _bishop.new_PiecewiseNoiseCurveVolume(c)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PiecewiseNoiseCurveVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PiecewiseNoiseCurveVolume_eval(self, P)

    def fade(self, t):
        return _bishop.PiecewiseNoiseCurveVolume_fade(self, t)

    def typelabel(self):
        return _bishop.PiecewiseNoiseCurveVolume_typelabel(self)
PiecewiseNoiseCurveVolume_swigregister = _bishop.PiecewiseNoiseCurveVolume_swigregister
PiecewiseNoiseCurveVolume_swigregister(PiecewiseNoiseCurveVolume)

class BoxedVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxedVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxedVolume, name)
    __repr__ = _swig_repr

    def __init__(self, f, llc, urc, arg5):
        this = _bishop.new_BoxedVolume(f, llc, urc, arg5)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_BoxedVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.BoxedVolume_eval(self, P)

    def typelabel(self):
        return _bishop.BoxedVolume_typelabel(self)
BoxedVolume_swigregister = _bishop.BoxedVolume_swigregister
BoxedVolume_swigregister(BoxedVolume)

class ConstantVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, v):
        this = _bishop.new_ConstantVectorVolume(v)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ConstantVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ConstantVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ConstantVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ConstantVectorVolume_typelabel(self)
ConstantVectorVolume_swigregister = _bishop.ConstantVectorVolume_swigregister
ConstantVectorVolume_swigregister(ConstantVectorVolume)

class ComponentVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ComponentVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ComponentVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ComponentVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ComponentVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ComponentVectorVolume_typelabel(self)
ComponentVectorVolume_swigregister = _bishop.ComponentVectorVolume_swigregister
ComponentVectorVolume_swigregister(ComponentVectorVolume)

class XVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_XVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_XVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.XVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.XVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.XVectorVolume_typelabel(self)
XVectorVolume_swigregister = _bishop.XVectorVolume_swigregister
XVectorVolume_swigregister(XVectorVolume)

class YVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_YVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_YVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.YVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.YVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.YVectorVolume_typelabel(self)
YVectorVolume_swigregister = _bishop.YVectorVolume_swigregister
YVectorVolume_swigregister(YVectorVolume)

class ZVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ZVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ZVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ZVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ZVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ZVectorVolume_typelabel(self)
ZVectorVolume_swigregister = _bishop.ZVectorVolume_swigregister
ZVectorVolume_swigregister(ZVectorVolume)

class TranslateVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_TranslateVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TranslateVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.TranslateVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.TranslateVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.TranslateVectorVolume_typelabel(self)
TranslateVectorVolume_swigregister = _bishop.TranslateVectorVolume_swigregister
TranslateVectorVolume_swigregister(TranslateVectorVolume)

class ScaleVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ScaleVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScaleVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ScaleVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ScaleVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ScaleVectorVolume_typelabel(self)
ScaleVectorVolume_swigregister = _bishop.ScaleVectorVolume_swigregister
ScaleVectorVolume_swigregister(ScaleVectorVolume)

class RotateVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotateVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_RotateVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RotateVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.RotateVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.RotateVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.RotateVectorVolume_typelabel(self)
RotateVectorVolume_swigregister = _bishop.RotateVectorVolume_swigregister
RotateVectorVolume_swigregister(RotateVectorVolume)

class NegateVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NegateVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NegateVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NegateVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NegateVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.NegateVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.NegateVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.NegateVectorVolume_typelabel(self)
NegateVectorVolume_swigregister = _bishop.NegateVectorVolume_swigregister
NegateVectorVolume_swigregister(NegateVectorVolume)

class DotProductVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotProductVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotProductVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_DotProductVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DotProductVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.DotProductVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.DotProductVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.DotProductVectorVolume_typelabel(self)
DotProductVectorVolume_swigregister = _bishop.DotProductVectorVolume_swigregister
DotProductVectorVolume_swigregister(DotProductVectorVolume)

class MagnitudeVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagnitudeVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagnitudeVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MagnitudeVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MagnitudeVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MagnitudeVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.MagnitudeVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.MagnitudeVectorVolume_typelabel(self)
MagnitudeVectorVolume_swigregister = _bishop.MagnitudeVectorVolume_swigregister
MagnitudeVectorVolume_swigregister(MagnitudeVectorVolume)

class UnitVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_UnitVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_UnitVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.UnitVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.UnitVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.UnitVectorVolume_typelabel(self)
UnitVectorVolume_swigregister = _bishop.UnitVectorVolume_swigregister
UnitVectorVolume_swigregister(UnitVectorVolume)

class MultiplyVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplyVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplyVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MultiplyVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MultiplyVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MultiplyVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.MultiplyVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.MultiplyVectorVolume_typelabel(self)
MultiplyVectorVolume_swigregister = _bishop.MultiplyVectorVolume_swigregister
MultiplyVectorVolume_swigregister(MultiplyVectorVolume)

class DivideVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivideVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivideVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_DivideVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DivideVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.DivideVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.DivideVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.DivideVectorVolume_typelabel(self)
DivideVectorVolume_swigregister = _bishop.DivideVectorVolume_swigregister
DivideVectorVolume_swigregister(DivideVectorVolume)

class AddVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AddVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AddVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AddVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.AddVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.AddVectorVolume_typelabel(self)
AddVectorVolume_swigregister = _bishop.AddVectorVolume_swigregister
AddVectorVolume_swigregister(AddVectorVolume)

class SubtractVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubtractVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubtractVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SubtractVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SubtractVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SubtractVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SubtractVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SubtractVectorVolume_typelabel(self)
SubtractVectorVolume_swigregister = _bishop.SubtractVectorVolume_swigregister
SubtractVectorVolume_swigregister(SubtractVectorVolume)

class IdentityVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_IdentityVectorVolume()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_IdentityVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.IdentityVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.IdentityVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.IdentityVectorVolume_typelabel(self)
IdentityVectorVolume_swigregister = _bishop.IdentityVectorVolume_swigregister
IdentityVectorVolume_swigregister(IdentityVectorVolume)

class ImplicitPointVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitPointVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitPointVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ImplicitPointVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ImplicitPointVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ImplicitPointVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ImplicitPointVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ImplicitPointVectorVolume_typelabel(self)
ImplicitPointVectorVolume_swigregister = _bishop.ImplicitPointVectorVolume_swigregister
ImplicitPointVectorVolume_swigregister(ImplicitPointVectorVolume)

class GradientVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GradientVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GradientVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GradientVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GradientVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GradientVectorVolume_typelabel(self)
GradientVectorVolume_swigregister = _bishop.GradientVectorVolume_swigregister
GradientVectorVolume_swigregister(GradientVectorVolume)

class FiniteDifferenceGradientVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteDifferenceGradientVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteDifferenceGradientVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FiniteDifferenceGradientVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FiniteDifferenceGradientVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FiniteDifferenceGradientVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FiniteDifferenceGradientVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FiniteDifferenceGradientVectorVolume_typelabel(self)
FiniteDifferenceGradientVectorVolume_swigregister = _bishop.FiniteDifferenceGradientVectorVolume_swigregister
FiniteDifferenceGradientVectorVolume_swigregister(FiniteDifferenceGradientVectorVolume)

class FiniteDifferenceBoundedGradientVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteDifferenceBoundedGradientVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteDifferenceBoundedGradientVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FiniteDifferenceBoundedGradientVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FiniteDifferenceBoundedGradientVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FiniteDifferenceBoundedGradientVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FiniteDifferenceBoundedGradientVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FiniteDifferenceBoundedGradientVectorVolume_typelabel(self)
FiniteDifferenceBoundedGradientVectorVolume_swigregister = _bishop.FiniteDifferenceBoundedGradientVectorVolume_swigregister
FiniteDifferenceBoundedGradientVectorVolume_swigregister(FiniteDifferenceBoundedGradientVectorVolume)

class FiniteDifferenceInteriorGradientVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteDifferenceInteriorGradientVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteDifferenceInteriorGradientVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FiniteDifferenceInteriorGradientVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FiniteDifferenceInteriorGradientVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FiniteDifferenceInteriorGradientVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FiniteDifferenceInteriorGradientVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FiniteDifferenceInteriorGradientVectorVolume_typelabel(self)
FiniteDifferenceInteriorGradientVectorVolume_swigregister = _bishop.FiniteDifferenceInteriorGradientVectorVolume_swigregister
FiniteDifferenceInteriorGradientVectorVolume_swigregister(FiniteDifferenceInteriorGradientVectorVolume)

class CrossProductVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossProductVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossProductVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_CrossProductVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CrossProductVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CrossProductVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.CrossProductVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.CrossProductVectorVolume_typelabel(self)
CrossProductVectorVolume_swigregister = _bishop.CrossProductVectorVolume_swigregister
CrossProductVectorVolume_swigregister(CrossProductVectorVolume)

class DivergenceVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivergenceVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivergenceVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_DivergenceVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DivergenceVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.DivergenceVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.DivergenceVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.DivergenceVectorVolume_typelabel(self)
DivergenceVectorVolume_swigregister = _bishop.DivergenceVectorVolume_swigregister
DivergenceVectorVolume_swigregister(DivergenceVectorVolume)

class FiniteDifferenceDivergenceVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteDifferenceDivergenceVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteDifferenceDivergenceVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FiniteDifferenceDivergenceVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FiniteDifferenceDivergenceVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FiniteDifferenceDivergenceVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FiniteDifferenceDivergenceVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FiniteDifferenceDivergenceVectorVolume_typelabel(self)
FiniteDifferenceDivergenceVectorVolume_swigregister = _bishop.FiniteDifferenceDivergenceVectorVolume_swigregister
FiniteDifferenceDivergenceVectorVolume_swigregister(FiniteDifferenceDivergenceVectorVolume)

class FiniteDifferenceBoundedDivergenceVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteDifferenceBoundedDivergenceVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteDifferenceBoundedDivergenceVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FiniteDifferenceBoundedDivergenceVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FiniteDifferenceBoundedDivergenceVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FiniteDifferenceBoundedDivergenceVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FiniteDifferenceBoundedDivergenceVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FiniteDifferenceBoundedDivergenceVectorVolume_typelabel(self)
FiniteDifferenceBoundedDivergenceVectorVolume_swigregister = _bishop.FiniteDifferenceBoundedDivergenceVectorVolume_swigregister
FiniteDifferenceBoundedDivergenceVectorVolume_swigregister(FiniteDifferenceBoundedDivergenceVectorVolume)

class FiniteDifferenceInteriorDivergenceVectorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteDifferenceInteriorDivergenceVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteDifferenceInteriorDivergenceVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FiniteDifferenceInteriorDivergenceVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FiniteDifferenceInteriorDivergenceVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FiniteDifferenceInteriorDivergenceVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FiniteDifferenceInteriorDivergenceVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FiniteDifferenceInteriorDivergenceVectorVolume_typelabel(self)
FiniteDifferenceInteriorDivergenceVectorVolume_swigregister = _bishop.FiniteDifferenceInteriorDivergenceVectorVolume_swigregister
FiniteDifferenceInteriorDivergenceVectorVolume_swigregister(FiniteDifferenceInteriorDivergenceVectorVolume)

class CurlVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurlVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_CurlVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_CurlVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.CurlVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.CurlVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.CurlVectorVolume_typelabel(self)
CurlVectorVolume_swigregister = _bishop.CurlVectorVolume_swigregister
CurlVectorVolume_swigregister(CurlVectorVolume)

class ReportVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ReportVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ReportVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ReportVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ReportVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ReportVectorVolume_typelabel(self)
ReportVectorVolume_swigregister = _bishop.ReportVectorVolume_swigregister
ReportVectorVolume_swigregister(ReportVectorVolume)

class AdvectVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvectVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvectVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AdvectVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AdvectVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AdvectVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.AdvectVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.AdvectVectorVolume_typelabel(self)
AdvectVectorVolume_swigregister = _bishop.AdvectVectorVolume_swigregister
AdvectVectorVolume_swigregister(AdvectVectorVolume)

class DisplaceVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplaceVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplaceVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_DisplaceVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DisplaceVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.DisplaceVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.DisplaceVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.DisplaceVectorVolume_typelabel(self)
DisplaceVectorVolume_swigregister = _bishop.DisplaceVectorVolume_swigregister
DisplaceVectorVolume_swigregister(DisplaceVectorVolume)

class ContinuedFractionDisplacementVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContinuedFractionDisplacementVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuedFractionDisplacementVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ContinuedFractionDisplacementVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ContinuedFractionDisplacementVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ContinuedFractionDisplacementVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.ContinuedFractionDisplacementVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.ContinuedFractionDisplacementVectorVolume_typelabel(self)
ContinuedFractionDisplacementVectorVolume_swigregister = _bishop.ContinuedFractionDisplacementVectorVolume_swigregister
ContinuedFractionDisplacementVectorVolume_swigregister(ContinuedFractionDisplacementVectorVolume)

class WarpVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_WarpVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_WarpVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.WarpVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.WarpVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.WarpVectorVolume_typelabel(self)
WarpVectorVolume_swigregister = _bishop.WarpVectorVolume_swigregister
WarpVectorVolume_swigregister(WarpVectorVolume)

class NoiseVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NoiseVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NoiseVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.NoiseVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.NoiseVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.NoiseVectorVolume_typelabel(self)
NoiseVectorVolume_swigregister = _bishop.NoiseVectorVolume_swigregister
NoiseVectorVolume_swigregister(NoiseVectorVolume)

class NoiseSampleVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoiseSampleVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoiseSampleVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NoiseSampleVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NoiseSampleVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.NoiseSampleVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.NoiseSampleVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.NoiseSampleVectorVolume_typelabel(self)
NoiseSampleVectorVolume_swigregister = _bishop.NoiseSampleVectorVolume_swigregister
NoiseSampleVectorVolume_swigregister(NoiseSampleVectorVolume)

class GriddedVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GriddedVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GriddedVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GriddedVectorVolume_typelabel(self)
GriddedVectorVolume_swigregister = _bishop.GriddedVectorVolume_swigregister
GriddedVectorVolume_swigregister(GriddedVectorVolume)

class GriddedSGridVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedSGridVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedSGridVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, g):
        this = _bishop.new_GriddedSGridVectorVolume(g)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedSGridVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedSGridVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GriddedSGridVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GriddedSGridVectorVolume_typelabel(self)
GriddedSGridVectorVolume_swigregister = _bishop.GriddedSGridVectorVolume_swigregister
GriddedSGridVectorVolume_swigregister(GriddedSGridVectorVolume)

class GriddedFrustumVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedFrustumVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedFrustumVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, g):
        this = _bishop.new_GriddedFrustumVectorVolume(g)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedFrustumVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedFrustumVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GriddedFrustumVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GriddedFrustumVectorVolume_typelabel(self)
GriddedFrustumVectorVolume_swigregister = _bishop.GriddedFrustumVectorVolume_swigregister
GriddedFrustumVectorVolume_swigregister(GriddedFrustumVectorVolume)

class PeriodicVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_PeriodicVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PeriodicVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PeriodicVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.PeriodicVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.PeriodicVectorVolume_typelabel(self)
PeriodicVectorVolume_swigregister = _bishop.PeriodicVectorVolume_swigregister
PeriodicVectorVolume_swigregister(PeriodicVectorVolume)

class SwitchVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SwitchVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SwitchVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SwitchVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.SwitchVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.SwitchVectorVolume_typelabel(self)
SwitchVectorVolume_swigregister = _bishop.SwitchVectorVolume_swigregister
SwitchVectorVolume_swigregister(SwitchVectorVolume)

class GradientStretchCMVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientStretchCMVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientStretchCMVolume, name)
    __repr__ = _swig_repr

    def __init__(self, vel, T, nbiter):
        this = _bishop.new_GradientStretchCMVolume(vel, T, nbiter)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GradientStretchCMVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GradientStretchCMVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GradientStretchCMVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GradientStretchCMVolume_typelabel(self)
GradientStretchCMVolume_swigregister = _bishop.GradientStretchCMVolume_swigregister
GradientStretchCMVolume_swigregister(GradientStretchCMVolume)

class FFTDivFreeNoiseVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTDivFreeNoiseVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFTDivFreeNoiseVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, powerLaw, largeScale, smallScale, length, dim, seed):
        this = _bishop.new_FFTDivFreeNoiseVectorVolume(powerLaw, largeScale, smallScale, length, dim, seed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FFTDivFreeNoiseVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FFTDivFreeNoiseVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.FFTDivFreeNoiseVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.FFTDivFreeNoiseVectorVolume_typelabel(self)
FFTDivFreeNoiseVectorVolume_swigregister = _bishop.FFTDivFreeNoiseVectorVolume_swigregister
FFTDivFreeNoiseVectorVolume_swigregister(FFTDivFreeNoiseVectorVolume)

class GradDisplaceVectorVolume(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradDisplaceVectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradDisplaceVectorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GradDisplaceVectorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GradDisplaceVectorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GradDisplaceVectorVolume_eval(self, P)

    def grad(self, P):
        return _bishop.GradDisplaceVectorVolume_grad(self, P)

    def typelabel(self):
        return _bishop.GradDisplaceVectorVolume_typelabel(self)
GradDisplaceVectorVolume_swigregister = _bishop.GradDisplaceVectorVolume_swigregister
GradDisplaceVectorVolume_swigregister(GradDisplaceVectorVolume)

class ConstantColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantColor, name)
    __repr__ = _swig_repr

    def __init__(self, v):
        this = _bishop.new_ConstantColor(v)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ConstantColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ConstantColor_eval(self, P)

    def typelabel(self):
        return _bishop.ConstantColor_typelabel(self)
ConstantColor_swigregister = _bishop.ConstantColor_swigregister
ConstantColor_swigregister(ConstantColor)

class FloatMultiplyColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMultiplyColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMultiplyColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FloatMultiplyColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FloatMultiplyColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FloatMultiplyColor_eval(self, P)

    def typelabel(self):
        return _bishop.FloatMultiplyColor_typelabel(self)
FloatMultiplyColor_swigregister = _bishop.FloatMultiplyColor_swigregister
FloatMultiplyColor_swigregister(FloatMultiplyColor)

class VolumeMultiplyColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeMultiplyColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeMultiplyColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VolumeMultiplyColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeMultiplyColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.VolumeMultiplyColor_eval(self, P)

    def typelabel(self):
        return _bishop.VolumeMultiplyColor_typelabel(self)
VolumeMultiplyColor_swigregister = _bishop.VolumeMultiplyColor_swigregister
VolumeMultiplyColor_swigregister(VolumeMultiplyColor)

class FloatDivideColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatDivideColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatDivideColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FloatDivideColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FloatDivideColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FloatDivideColor_eval(self, P)

    def typelabel(self):
        return _bishop.FloatDivideColor_typelabel(self)
FloatDivideColor_swigregister = _bishop.FloatDivideColor_swigregister
FloatDivideColor_swigregister(FloatDivideColor)

class VolumeDivideColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeDivideColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeDivideColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VolumeDivideColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeDivideColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.VolumeDivideColor_eval(self, P)

    def typelabel(self):
        return _bishop.VolumeDivideColor_typelabel(self)
VolumeDivideColor_swigregister = _bishop.VolumeDivideColor_swigregister
VolumeDivideColor_swigregister(VolumeDivideColor)

class MultiplyColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplyColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplyColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_MultiplyColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_MultiplyColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.MultiplyColor_eval(self, P)

    def typelabel(self):
        return _bishop.MultiplyColor_typelabel(self)
MultiplyColor_swigregister = _bishop.MultiplyColor_swigregister
MultiplyColor_swigregister(MultiplyColor)

class ChromaColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChromaColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChromaColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ChromaColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ChromaColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ChromaColor_eval(self, P)

    def typelabel(self):
        return _bishop.ChromaColor_typelabel(self)
ChromaColor_swigregister = _bishop.ChromaColor_swigregister
ChromaColor_swigregister(ChromaColor)

class FloatGammaColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatGammaColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatGammaColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_FloatGammaColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FloatGammaColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.FloatGammaColor_eval(self, P)

    def typelabel(self):
        return _bishop.FloatGammaColor_typelabel(self)
FloatGammaColor_swigregister = _bishop.FloatGammaColor_swigregister
FloatGammaColor_swigregister(FloatGammaColor)

class VolumeGammaColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeGammaColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeGammaColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VolumeGammaColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeGammaColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.VolumeGammaColor_eval(self, P)

    def typelabel(self):
        return _bishop.VolumeGammaColor_typelabel(self)
VolumeGammaColor_swigregister = _bishop.VolumeGammaColor_swigregister
VolumeGammaColor_swigregister(VolumeGammaColor)

class AddColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AddColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AddColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AddColor_eval(self, P)

    def typelabel(self):
        return _bishop.AddColor_typelabel(self)
AddColor_swigregister = _bishop.AddColor_swigregister
AddColor_swigregister(AddColor)

class SubtractColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubtractColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubtractColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SubtractColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SubtractColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SubtractColor_eval(self, P)

    def typelabel(self):
        return _bishop.SubtractColor_typelabel(self)
SubtractColor_swigregister = _bishop.SubtractColor_swigregister
SubtractColor_swigregister(SubtractColor)

class GriddedColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GriddedColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedColor_eval(self, P)

    def typelabel(self):
        return _bishop.GriddedColor_typelabel(self)
GriddedColor_swigregister = _bishop.GriddedColor_swigregister
GriddedColor_swigregister(GriddedColor)

class GriddedSGridColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedSGridColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedSGridColor, name)
    __repr__ = _swig_repr

    def __init__(self, g):
        this = _bishop.new_GriddedSGridColor(g)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedSGridColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedSGridColor_eval(self, P)

    def typelabel(self):
        return _bishop.GriddedSGridColor_typelabel(self)
GriddedSGridColor_swigregister = _bishop.GriddedSGridColor_swigregister
GriddedSGridColor_swigregister(GriddedSGridColor)

class GriddedFrustumColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GriddedFrustumColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GriddedFrustumColor, name)
    __repr__ = _swig_repr

    def __init__(self, g):
        this = _bishop.new_GriddedFrustumColor(g)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GriddedFrustumColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GriddedFrustumColor_eval(self, P)

    def typelabel(self):
        return _bishop.GriddedFrustumColor_typelabel(self)
GriddedFrustumColor_swigregister = _bishop.GriddedFrustumColor_swigregister
GriddedFrustumColor_swigregister(GriddedFrustumColor)

class JitterSampleColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JitterSampleColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JitterSampleColor, name)
    __repr__ = _swig_repr

    def __init__(self, v, rad, nb, seed=2847573):
        this = _bishop.new_JitterSampleColor(v, rad, nb, seed)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_JitterSampleColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.JitterSampleColor_eval(self, P)

    def typelabel(self):
        return _bishop.JitterSampleColor_typelabel(self)
JitterSampleColor_swigregister = _bishop.JitterSampleColor_swigregister
JitterSampleColor_swigregister(JitterSampleColor)

class RotateColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotateColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotateColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_RotateColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RotateColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.RotateColor_eval(self, P)

    def typelabel(self):
        return _bishop.RotateColor_typelabel(self)
RotateColor_swigregister = _bishop.RotateColor_swigregister
RotateColor_swigregister(RotateColor)

class ScaleColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScaleColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScaleColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ScaleColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ScaleColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ScaleColor_eval(self, P)

    def typelabel(self):
        return _bishop.ScaleColor_typelabel(self)
ScaleColor_swigregister = _bishop.ScaleColor_swigregister
ScaleColor_swigregister(ScaleColor)

class TranslateColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TranslateColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TranslateColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_TranslateColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TranslateColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.TranslateColor_eval(self, P)

    def typelabel(self):
        return _bishop.TranslateColor_typelabel(self)
TranslateColor_swigregister = _bishop.TranslateColor_swigregister
TranslateColor_swigregister(TranslateColor)

class NegateColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NegateColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NegateColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_NegateColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_NegateColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.NegateColor_eval(self, P)

    def typelabel(self):
        return _bishop.NegateColor_typelabel(self)
NegateColor_swigregister = _bishop.NegateColor_swigregister
NegateColor_swigregister(NegateColor)

class ComponentColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ComponentColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ComponentColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ComponentColor_eval(self, P)

    def typelabel(self):
        return _bishop.ComponentColor_typelabel(self)
ComponentColor_swigregister = _bishop.ComponentColor_swigregister
ComponentColor_swigregister(ComponentColor)

class RColorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_RColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.RColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.RColorVolume_typelabel(self)
RColorVolume_swigregister = _bishop.RColorVolume_swigregister
RColorVolume_swigregister(RColorVolume)

class GColorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_GColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.GColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.GColorVolume_typelabel(self)
GColorVolume_swigregister = _bishop.GColorVolume_swigregister
GColorVolume_swigregister(GColorVolume)

class BColorVolume(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_BColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_BColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.BColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.BColorVolume_typelabel(self)
BColorVolume_swigregister = _bishop.BColorVolume_swigregister
BColorVolume_swigregister(BColorVolume)

class VolumeLUTColor(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeLUTColor, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeLUTColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_VolumeLUTColor(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_VolumeLUTColor
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.VolumeLUTColor_eval(self, P)

    def typelabel(self):
        return _bishop.VolumeLUTColor_typelabel(self)
VolumeLUTColor_swigregister = _bishop.VolumeLUTColor_swigregister
VolumeLUTColor_swigregister(VolumeLUTColor)

class ReportColorVolume(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_ReportColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ReportColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.ReportColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.ReportColorVolume_typelabel(self)
ReportColorVolume_swigregister = _bishop.ReportColorVolume_swigregister
ReportColorVolume_swigregister(ReportColorVolume)

class WarpColorVolume(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WarpColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_WarpColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_WarpColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.WarpColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.WarpColorVolume_typelabel(self)
WarpColorVolume_swigregister = _bishop.WarpColorVolume_swigregister
WarpColorVolume_swigregister(WarpColorVolume)

class PeriodicColorVolume(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeriodicColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_PeriodicColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PeriodicColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PeriodicColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.PeriodicColorVolume_typelabel(self)
PeriodicColorVolume_swigregister = _bishop.PeriodicColorVolume_swigregister
PeriodicColorVolume_swigregister(PeriodicColorVolume)

class AdvectColorVolume(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvectColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvectColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_AdvectColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_AdvectColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.AdvectColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.AdvectColorVolume_typelabel(self)
AdvectColorVolume_swigregister = _bishop.AdvectColorVolume_swigregister
AdvectColorVolume_swigregister(AdvectColorVolume)

class SwitchColorVolume(ColorVolume):
    __swig_setmethods__ = {}
    for _s in [ColorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchColorVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SwitchColorVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SwitchColorVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.SwitchColorVolume_eval(self, P)

    def typelabel(self):
        return _bishop.SwitchColorVolume_typelabel(self)
SwitchColorVolume_swigregister = _bishop.SwitchColorVolume_swigregister
SwitchColorVolume_swigregister(SwitchColorVolume)


def evaluate(*args):
    return _bishop.evaluate(*args)
evaluate = _bishop.evaluate

def fdgrad(e, N, dx, dy, dz):
    return _bishop.fdgrad(e, N, dx, dy, dz)
fdgrad = _bishop.fdgrad

def fdboundedgrad(e, N, gb):
    return _bishop.fdboundedgrad(e, N, gb)
fdboundedgrad = _bishop.fdboundedgrad

def fdinteriorgrad(e, N, dx, dy, dz, gb):
    return _bishop.fdinteriorgrad(e, N, dx, dy, dz, gb)
fdinteriorgrad = _bishop.fdinteriorgrad

def grad(*args):
    return _bishop.grad(*args)
grad = _bishop.grad

def constant(*args):
    return _bishop.constant(*args)
constant = _bishop.constant

def scale(*args):
    return _bishop.scale(*args)
scale = _bishop.scale

def rotate(*args):
    return _bishop.rotate(*args)
rotate = _bishop.rotate

def report(*args):
    return _bishop.report(*args)
report = _bishop.report

def negate(*args):
    return _bishop.negate(*args)
negate = _bishop.negate

def abs(*args):
    return _bishop.abs(*args)
abs = _bishop.abs

def which(*args):
    return _bishop.which(*args)
which = _bishop.which

def multiply(*args):
    return _bishop.multiply(*args)
multiply = _bishop.multiply

def divide(*args):
    return _bishop.divide(*args)
divide = _bishop.divide

def add(*args):
    return _bishop.add(*args)
add = _bishop.add

def subtract(*args):
    return _bishop.subtract(*args)
subtract = _bishop.subtract

def Sphere(cen, rad):
    return _bishop.Sphere(cen, rad)
Sphere = _bishop.Sphere

def Ellipse(cen, axs, majorrad, minorrad):
    return _bishop.Ellipse(cen, axs, majorrad, minorrad)
Ellipse = _bishop.Ellipse

def CsgBox(cen, rad, pwr):
    return _bishop.CsgBox(cen, rad, pwr)
CsgBox = _bishop.CsgBox

def CsgRectangleBox(cen, rad, asp, pwr):
    return _bishop.CsgRectangleBox(cen, rad, asp, pwr)
CsgRectangleBox = _bishop.CsgRectangleBox

def HardBox(_llc, _urc):
    return _bishop.HardBox(_llc, _urc)
HardBox = _bishop.HardBox

def Cone(cen, ax, h, theta):
    return _bishop.Cone(cen, ax, h, theta)
Cone = _bishop.Cone

def Plane(cen, norm):
    return _bishop.Plane(cen, norm)
Plane = _bishop.Plane

def Torus(cen, axis, majorRad, minorRad):
    return _bishop.Torus(cen, axis, majorRad, minorRad)
Torus = _bishop.Torus

def SteinerPatch():
    return _bishop.SteinerPatch()
SteinerPatch = _bishop.SteinerPatch

def Icosahedron():
    return _bishop.Icosahedron()
Icosahedron = _bishop.Icosahedron

def Cylinder(axis, rad):
    return _bishop.Cylinder(axis, rad)
Cylinder = _bishop.Cylinder

def CappedCylinder(cen, axis, length, radius):
    return _bishop.CappedCylinder(cen, axis, length, radius)
CappedCylinder = _bishop.CappedCylinder

def Shell(v, thickness):
    return _bishop.Shell(v, thickness)
Shell = _bishop.Shell

def SpaceCurveField(curve, radius):
    return _bishop.SpaceCurveField(curve, radius)
SpaceCurveField = _bishop.SpaceCurveField

def PiecewiseCurveField(list):
    return _bishop.PiecewiseCurveField(list)
PiecewiseCurveField = _bishop.PiecewiseCurveField

def PiecewisePyroCurveField(list):
    return _bishop.PiecewisePyroCurveField(list)
PiecewisePyroCurveField = _bishop.PiecewisePyroCurveField

def PiecewiseNoiseCurveField(list):
    return _bishop.PiecewiseNoiseCurveField(list)
PiecewiseNoiseCurveField = _bishop.PiecewiseNoiseCurveField

def mask(v):
    return _bishop.mask(v)
mask = _bishop.mask

def clamp(v, minv, maxv):
    return _bishop.clamp(v, minv, maxv)
clamp = _bishop.clamp

def pow(*args):
    return _bishop.pow(*args)
pow = _bishop.pow

def BlinnBlend(v1, v2, _alpha=1.0):
    return _bishop.BlinnBlend(v1, v2, _alpha)
BlinnBlend = _bishop.BlinnBlend

def MultiBlend(vs, a=1.0):
    return _bishop.MultiBlend(vs, a)
MultiBlend = _bishop.MultiBlend

def intersection(v1, v2):
    return _bishop.intersection(v1, v2)
intersection = _bishop.intersection

def cutout(v1, v2):
    return _bishop.cutout(v1, v2)
cutout = _bishop.cutout

def boxed(v1, llc, urc, defvalue):
    return _bishop.boxed(v1, llc, urc, defvalue)
boxed = _bishop.boxed

def sin(v1):
    return _bishop.sin(v1)
sin = _bishop.sin

def cos(v1):
    return _bishop.cos(v1)
cos = _bishop.cos

def tan(v1):
    return _bishop.tan(v1)
tan = _bishop.tan

def acos(v1):
    return _bishop.acos(v1)
acos = _bishop.acos

def asin(v1):
    return _bishop.asin(v1)
asin = _bishop.asin

def atan(v1):
    return _bishop.atan(v1)
atan = _bishop.atan

def sinh(v1):
    return _bishop.sinh(v1)
sinh = _bishop.sinh

def cosh(v1):
    return _bishop.cosh(v1)
cosh = _bishop.cosh

def tanh(v1):
    return _bishop.tanh(v1)
tanh = _bishop.tanh

def outer(v1, v2):
    return _bishop.outer(v1, v2)
outer = _bishop.outer

def Pyroclast(Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma=1):
    return _bishop.Pyroclast(Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma)
Pyroclast = _bishop.Pyroclast

def RadialPyroclast(Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma=1):
    return _bishop.RadialPyroclast(Center, Radius, Amp, octaves, freq, rough, trans, time, Gamma)
RadialPyroclast = _bishop.RadialPyroclast

def SFFFTNoise(power, low, high, length, sz):
    return _bishop.SFFFTNoise(power, low, high, length, sz)
SFFFTNoise = _bishop.SFFFTNoise

def SFNoise(n, d=0.01):
    return _bishop.SFNoise(n, d)
SFNoise = _bishop.SFNoise

def VFNoise(n, d=0.01):
    return _bishop.VFNoise(n, d)
VFNoise = _bishop.VFNoise

def JitterSample(v, rad, nb, seed=2847573):
    return _bishop.JitterSample(v, rad, nb, seed)
JitterSample = _bishop.JitterSample

def gridded(*args):
    return _bishop.gridded(*args)
gridded = _bishop.gridded

def gradientStretchCM(v, T, nb):
    return _bishop.gradientStretchCM(v, T, nb)
gradientStretchCM = _bishop.gradientStretchCM

def gradientDisplacement(M, LS, step):
    return _bishop.gradientDisplacement(M, LS, step)
gradientDisplacement = _bishop.gradientDisplacement

def Periodic(*args):
    return _bishop.Periodic(*args)
Periodic = _bishop.Periodic

def wedge(*args):
    return _bishop.wedge(*args)
wedge = _bishop.wedge

def star(*args):
    return _bishop.star(*args)
star = _bishop.star

def contraction(v, f):
    return _bishop.contraction(v, f)
contraction = _bishop.contraction

def dot(e1, e2):
    return _bishop.dot(e1, e2)
dot = _bishop.dot

def unitvector(e):
    return _bishop.unitvector(e)
unitvector = _bishop.unitvector

def identity():
    return _bishop.identity()
identity = _bishop.identity

def xIdentity():
    return _bishop.xIdentity()
xIdentity = _bishop.xIdentity

def yIdentity():
    return _bishop.yIdentity()
yIdentity = _bishop.yIdentity

def zIdentity():
    return _bishop.zIdentity()
zIdentity = _bishop.zIdentity

def ImplicitSurfacePoint(e, step, nbIterations):
    return _bishop.ImplicitSurfacePoint(e, step, nbIterations)
ImplicitSurfacePoint = _bishop.ImplicitSurfacePoint

def cross(e1, e2):
    return _bishop.cross(e1, e2)
cross = _bishop.cross

def div(e):
    return _bishop.div(e)
div = _bishop.div

def fddiv(e, N, dx, dy, dz):
    return _bishop.fddiv(e, N, dx, dy, dz)
fddiv = _bishop.fddiv

def fdboundeddiv(e, N, gb):
    return _bishop.fdboundeddiv(e, N, gb)
fdboundeddiv = _bishop.fdboundeddiv

def fdinteriordiv(e, N, dx, dy, dz, gb):
    return _bishop.fdinteriordiv(e, N, dx, dy, dz, gb)
fdinteriordiv = _bishop.fdinteriordiv

def curl(e):
    return _bishop.curl(e)
curl = _bishop.curl

def ContinuedFractionDisplacement(dX, nbIterations):
    return _bishop.ContinuedFractionDisplacement(dX, nbIterations)
ContinuedFractionDisplacement = _bishop.ContinuedFractionDisplacement

def XYZ(x, y, z):
    return _bishop.XYZ(x, y, z)
XYZ = _bishop.XYZ

def Chroma(e):
    return _bishop.Chroma(e)
Chroma = _bishop.Chroma

def Blackbody(e):
    return _bishop.Blackbody(e)
Blackbody = _bishop.Blackbody

def RGB(red, green, blue):
    return _bishop.RGB(red, green, blue)
RGB = _bishop.RGB

def LUTColor(field, lut, maxValue, minValue):
    return _bishop.LUTColor(field, lut, maxValue, minValue)
LUTColor = _bishop.LUTColor

def DetGrad(e):
    return _bishop.DetGrad(e)
DetGrad = _bishop.DetGrad

def rComponent(C):
    return _bishop.rComponent(C)
rComponent = _bishop.rComponent

def gComponent(C):
    return _bishop.gComponent(C)
gComponent = _bishop.gComponent

def bComponent(C):
    return _bishop.bComponent(C)
bComponent = _bishop.bComponent

def rgbComponent(red, green, blue):
    return _bishop.rgbComponent(red, green, blue)
rgbComponent = _bishop.rgbComponent

def xComponent(X):
    return _bishop.xComponent(X)
xComponent = _bishop.xComponent

def yComponent(X):
    return _bishop.yComponent(X)
yComponent = _bishop.yComponent

def zComponent(X):
    return _bishop.zComponent(X)
zComponent = _bishop.zComponent

def zeroComponent(f):
    return _bishop.zeroComponent(f)
zeroComponent = _bishop.zeroComponent

def oneComponent(f):
    return _bishop.oneComponent(f)
oneComponent = _bishop.oneComponent

def twoComponent(f):
    return _bishop.twoComponent(f)
twoComponent = _bishop.twoComponent

def threeComponent(f):
    return _bishop.threeComponent(f)
threeComponent = _bishop.threeComponent

def component(*args):
    return _bishop.component(*args)
component = _bishop.component

def lie(X, a):
    return _bishop.lie(X, a)
lie = _bishop.lie

def transmissivity(density, start, end, step, scatter):
    return _bishop.transmissivity(density, start, end, step, scatter)
transmissivity = _bishop.transmissivity

def lineIntegral(density, color, start, end, step, scatter):
    return _bishop.lineIntegral(density, color, start, end, step, scatter)
lineIntegral = _bishop.lineIntegral

def fieldStatistics(*args):
    return _bishop.fieldStatistics(*args)
fieldStatistics = _bishop.fieldStatistics

def setFDSize(*args):
    return _bishop.setFDSize(*args)
setFDSize = _bishop.setFDSize

def setFDStep(*args):
    return _bishop.setFDStep(*args)
setFDStep = _bishop.setFDStep

def versionString():
    return _bishop.versionString()
versionString = _bishop.versionString
class FloatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.FloatArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.FloatArray___nonzero__(self)

    def __bool__(self):
        return _bishop.FloatArray___bool__(self)

    def __len__(self):
        return _bishop.FloatArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.FloatArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.FloatArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.FloatArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.FloatArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.FloatArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.FloatArray___setitem__(self, *args)

    def pop(self):
        return _bishop.FloatArray_pop(self)

    def append(self, x):
        return _bishop.FloatArray_append(self, x)

    def empty(self):
        return _bishop.FloatArray_empty(self)

    def size(self):
        return _bishop.FloatArray_size(self)

    def swap(self, v):
        return _bishop.FloatArray_swap(self, v)

    def begin(self):
        return _bishop.FloatArray_begin(self)

    def end(self):
        return _bishop.FloatArray_end(self)

    def rbegin(self):
        return _bishop.FloatArray_rbegin(self)

    def rend(self):
        return _bishop.FloatArray_rend(self)

    def clear(self):
        return _bishop.FloatArray_clear(self)

    def get_allocator(self):
        return _bishop.FloatArray_get_allocator(self)

    def pop_back(self):
        return _bishop.FloatArray_pop_back(self)

    def erase(self, *args):
        return _bishop.FloatArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_FloatArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.FloatArray_push_back(self, x)

    def front(self):
        return _bishop.FloatArray_front(self)

    def back(self):
        return _bishop.FloatArray_back(self)

    def assign(self, n, x):
        return _bishop.FloatArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.FloatArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.FloatArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.FloatArray_reserve(self, n)

    def capacity(self):
        return _bishop.FloatArray_capacity(self)
    __swig_destroy__ = _bishop.delete_FloatArray
    __del__ = lambda self: None
FloatArray_swigregister = _bishop.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

class PixelArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.PixelArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.PixelArray___nonzero__(self)

    def __bool__(self):
        return _bishop.PixelArray___bool__(self)

    def __len__(self):
        return _bishop.PixelArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.PixelArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.PixelArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.PixelArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.PixelArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.PixelArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.PixelArray___setitem__(self, *args)

    def pop(self):
        return _bishop.PixelArray_pop(self)

    def append(self, x):
        return _bishop.PixelArray_append(self, x)

    def empty(self):
        return _bishop.PixelArray_empty(self)

    def size(self):
        return _bishop.PixelArray_size(self)

    def swap(self, v):
        return _bishop.PixelArray_swap(self, v)

    def begin(self):
        return _bishop.PixelArray_begin(self)

    def end(self):
        return _bishop.PixelArray_end(self)

    def rbegin(self):
        return _bishop.PixelArray_rbegin(self)

    def rend(self):
        return _bishop.PixelArray_rend(self)

    def clear(self):
        return _bishop.PixelArray_clear(self)

    def get_allocator(self):
        return _bishop.PixelArray_get_allocator(self)

    def pop_back(self):
        return _bishop.PixelArray_pop_back(self)

    def erase(self, *args):
        return _bishop.PixelArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_PixelArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.PixelArray_push_back(self, x)

    def front(self):
        return _bishop.PixelArray_front(self)

    def back(self):
        return _bishop.PixelArray_back(self)

    def assign(self, n, x):
        return _bishop.PixelArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.PixelArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.PixelArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.PixelArray_reserve(self, n)

    def capacity(self):
        return _bishop.PixelArray_capacity(self)
    __swig_destroy__ = _bishop.delete_PixelArray
    __del__ = lambda self: None
PixelArray_swigregister = _bishop.PixelArray_swigregister
PixelArray_swigregister(PixelArray)

class ColorArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.ColorArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.ColorArray___nonzero__(self)

    def __bool__(self):
        return _bishop.ColorArray___bool__(self)

    def __len__(self):
        return _bishop.ColorArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.ColorArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.ColorArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.ColorArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.ColorArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.ColorArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.ColorArray___setitem__(self, *args)

    def pop(self):
        return _bishop.ColorArray_pop(self)

    def append(self, x):
        return _bishop.ColorArray_append(self, x)

    def empty(self):
        return _bishop.ColorArray_empty(self)

    def size(self):
        return _bishop.ColorArray_size(self)

    def swap(self, v):
        return _bishop.ColorArray_swap(self, v)

    def begin(self):
        return _bishop.ColorArray_begin(self)

    def end(self):
        return _bishop.ColorArray_end(self)

    def rbegin(self):
        return _bishop.ColorArray_rbegin(self)

    def rend(self):
        return _bishop.ColorArray_rend(self)

    def clear(self):
        return _bishop.ColorArray_clear(self)

    def get_allocator(self):
        return _bishop.ColorArray_get_allocator(self)

    def pop_back(self):
        return _bishop.ColorArray_pop_back(self)

    def erase(self, *args):
        return _bishop.ColorArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_ColorArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.ColorArray_push_back(self, x)

    def front(self):
        return _bishop.ColorArray_front(self)

    def back(self):
        return _bishop.ColorArray_back(self)

    def assign(self, n, x):
        return _bishop.ColorArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.ColorArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.ColorArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.ColorArray_reserve(self, n)

    def capacity(self):
        return _bishop.ColorArray_capacity(self)
    __swig_destroy__ = _bishop.delete_ColorArray
    __del__ = lambda self: None
ColorArray_swigregister = _bishop.ColorArray_swigregister
ColorArray_swigregister(ColorArray)

class VectorArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.VectorArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.VectorArray___nonzero__(self)

    def __bool__(self):
        return _bishop.VectorArray___bool__(self)

    def __len__(self):
        return _bishop.VectorArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.VectorArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.VectorArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.VectorArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.VectorArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.VectorArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.VectorArray___setitem__(self, *args)

    def pop(self):
        return _bishop.VectorArray_pop(self)

    def append(self, x):
        return _bishop.VectorArray_append(self, x)

    def empty(self):
        return _bishop.VectorArray_empty(self)

    def size(self):
        return _bishop.VectorArray_size(self)

    def swap(self, v):
        return _bishop.VectorArray_swap(self, v)

    def begin(self):
        return _bishop.VectorArray_begin(self)

    def end(self):
        return _bishop.VectorArray_end(self)

    def rbegin(self):
        return _bishop.VectorArray_rbegin(self)

    def rend(self):
        return _bishop.VectorArray_rend(self)

    def clear(self):
        return _bishop.VectorArray_clear(self)

    def get_allocator(self):
        return _bishop.VectorArray_get_allocator(self)

    def pop_back(self):
        return _bishop.VectorArray_pop_back(self)

    def erase(self, *args):
        return _bishop.VectorArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_VectorArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.VectorArray_push_back(self, x)

    def front(self):
        return _bishop.VectorArray_front(self)

    def back(self):
        return _bishop.VectorArray_back(self)

    def assign(self, n, x):
        return _bishop.VectorArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.VectorArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.VectorArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.VectorArray_reserve(self, n)

    def capacity(self):
        return _bishop.VectorArray_capacity(self)
    __swig_destroy__ = _bishop.delete_VectorArray
    __del__ = lambda self: None
VectorArray_swigregister = _bishop.VectorArray_swigregister
VectorArray_swigregister(VectorArray)

class FloatVolumeArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVolumeArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVolumeArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.FloatVolumeArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.FloatVolumeArray___nonzero__(self)

    def __bool__(self):
        return _bishop.FloatVolumeArray___bool__(self)

    def __len__(self):
        return _bishop.FloatVolumeArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.FloatVolumeArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.FloatVolumeArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.FloatVolumeArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.FloatVolumeArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.FloatVolumeArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.FloatVolumeArray___setitem__(self, *args)

    def pop(self):
        return _bishop.FloatVolumeArray_pop(self)

    def append(self, x):
        return _bishop.FloatVolumeArray_append(self, x)

    def empty(self):
        return _bishop.FloatVolumeArray_empty(self)

    def size(self):
        return _bishop.FloatVolumeArray_size(self)

    def swap(self, v):
        return _bishop.FloatVolumeArray_swap(self, v)

    def begin(self):
        return _bishop.FloatVolumeArray_begin(self)

    def end(self):
        return _bishop.FloatVolumeArray_end(self)

    def rbegin(self):
        return _bishop.FloatVolumeArray_rbegin(self)

    def rend(self):
        return _bishop.FloatVolumeArray_rend(self)

    def clear(self):
        return _bishop.FloatVolumeArray_clear(self)

    def get_allocator(self):
        return _bishop.FloatVolumeArray_get_allocator(self)

    def pop_back(self):
        return _bishop.FloatVolumeArray_pop_back(self)

    def erase(self, *args):
        return _bishop.FloatVolumeArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_FloatVolumeArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.FloatVolumeArray_push_back(self, x)

    def front(self):
        return _bishop.FloatVolumeArray_front(self)

    def back(self):
        return _bishop.FloatVolumeArray_back(self)

    def assign(self, n, x):
        return _bishop.FloatVolumeArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.FloatVolumeArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.FloatVolumeArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.FloatVolumeArray_reserve(self, n)

    def capacity(self):
        return _bishop.FloatVolumeArray_capacity(self)
    __swig_destroy__ = _bishop.delete_FloatVolumeArray
    __del__ = lambda self: None
FloatVolumeArray_swigregister = _bishop.FloatVolumeArray_swigregister
FloatVolumeArray_swigregister(FloatVolumeArray)

class AARectangleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AARectangleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AARectangleArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.AARectangleArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.AARectangleArray___nonzero__(self)

    def __bool__(self):
        return _bishop.AARectangleArray___bool__(self)

    def __len__(self):
        return _bishop.AARectangleArray___len__(self)

    def __getslice__(self, i, j):
        return _bishop.AARectangleArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.AARectangleArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.AARectangleArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.AARectangleArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.AARectangleArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.AARectangleArray___setitem__(self, *args)

    def pop(self):
        return _bishop.AARectangleArray_pop(self)

    def append(self, x):
        return _bishop.AARectangleArray_append(self, x)

    def empty(self):
        return _bishop.AARectangleArray_empty(self)

    def size(self):
        return _bishop.AARectangleArray_size(self)

    def swap(self, v):
        return _bishop.AARectangleArray_swap(self, v)

    def begin(self):
        return _bishop.AARectangleArray_begin(self)

    def end(self):
        return _bishop.AARectangleArray_end(self)

    def rbegin(self):
        return _bishop.AARectangleArray_rbegin(self)

    def rend(self):
        return _bishop.AARectangleArray_rend(self)

    def clear(self):
        return _bishop.AARectangleArray_clear(self)

    def get_allocator(self):
        return _bishop.AARectangleArray_get_allocator(self)

    def pop_back(self):
        return _bishop.AARectangleArray_pop_back(self)

    def erase(self, *args):
        return _bishop.AARectangleArray_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_AARectangleArray(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.AARectangleArray_push_back(self, x)

    def front(self):
        return _bishop.AARectangleArray_front(self)

    def back(self):
        return _bishop.AARectangleArray_back(self)

    def assign(self, n, x):
        return _bishop.AARectangleArray_assign(self, n, x)

    def resize(self, *args):
        return _bishop.AARectangleArray_resize(self, *args)

    def insert(self, *args):
        return _bishop.AARectangleArray_insert(self, *args)

    def reserve(self, n):
        return _bishop.AARectangleArray_reserve(self, n)

    def capacity(self):
        return _bishop.AARectangleArray_capacity(self)
    __swig_destroy__ = _bishop.delete_AARectangleArray
    __del__ = lambda self: None
AARectangleArray_swigregister = _bishop.AARectangleArray_swigregister
AARectangleArray_swigregister(AARectangleArray)

class PhaseFunctionBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhaseFunctionBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhaseFunctionBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PhaseFunctionBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PhaseFunctionBase
    __del__ = lambda self: None

    def eval(self, theta):
        return _bishop.PhaseFunctionBase_eval(self, theta)
PhaseFunctionBase_swigregister = _bishop.PhaseFunctionBase_swigregister
PhaseFunctionBase_swigregister(PhaseFunctionBase)

class UniformPhaseFunction(PhaseFunctionBase):
    __swig_setmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformPhaseFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformPhaseFunction, name)
    __repr__ = _swig_repr

    def __init__(self, val=1):
        this = _bishop.new_UniformPhaseFunction(val)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_UniformPhaseFunction
    __del__ = lambda self: None

    def eval(self, theta):
        return _bishop.UniformPhaseFunction_eval(self, theta)
UniformPhaseFunction_swigregister = _bishop.UniformPhaseFunction_swigregister
UniformPhaseFunction_swigregister(UniformPhaseFunction)

class HenyeyGreensteinPhaseFunction(PhaseFunctionBase):
    __swig_setmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HenyeyGreensteinPhaseFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HenyeyGreensteinPhaseFunction, name)
    __repr__ = _swig_repr

    def __init__(self, val=0.9):
        this = _bishop.new_HenyeyGreensteinPhaseFunction(val)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_HenyeyGreensteinPhaseFunction
    __del__ = lambda self: None

    def eval(self, theta):
        return _bishop.HenyeyGreensteinPhaseFunction_eval(self, theta)
HenyeyGreensteinPhaseFunction_swigregister = _bishop.HenyeyGreensteinPhaseFunction_swigregister
HenyeyGreensteinPhaseFunction_swigregister(HenyeyGreensteinPhaseFunction)

class DoubleHenyeyGreensteinPhaseFunction(PhaseFunctionBase):
    __swig_setmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleHenyeyGreensteinPhaseFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleHenyeyGreensteinPhaseFunction, name)
    __repr__ = _swig_repr

    def __init__(self, g0, g1, mix):
        this = _bishop.new_DoubleHenyeyGreensteinPhaseFunction(g0, g1, mix)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_DoubleHenyeyGreensteinPhaseFunction
    __del__ = lambda self: None

    def eval(self, theta):
        return _bishop.DoubleHenyeyGreensteinPhaseFunction_eval(self, theta)
DoubleHenyeyGreensteinPhaseFunction_swigregister = _bishop.DoubleHenyeyGreensteinPhaseFunction_swigregister
DoubleHenyeyGreensteinPhaseFunction_swigregister(DoubleHenyeyGreensteinPhaseFunction)

class FournierForandPhaseFunction(PhaseFunctionBase):
    __swig_setmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FournierForandPhaseFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [PhaseFunctionBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FournierForandPhaseFunction, name)
    __repr__ = _swig_repr

    def __init__(self, en, mu):
        this = _bishop.new_FournierForandPhaseFunction(en, mu)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_FournierForandPhaseFunction
    __del__ = lambda self: None

    def eval(self, theta):
        return _bishop.FournierForandPhaseFunction_eval(self, theta)
FournierForandPhaseFunction_swigregister = _bishop.FournierForandPhaseFunction_swigregister
FournierForandPhaseFunction_swigregister(FournierForandPhaseFunction)

class RenderData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_RenderData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_RenderData
    __del__ = lambda self: None
    __swig_setmethods__["densityField"] = _bishop.RenderData_densityField_set
    __swig_getmethods__["densityField"] = _bishop.RenderData_densityField_get
    if _newclass:
        densityField = _swig_property(_bishop.RenderData_densityField_get, _bishop.RenderData_densityField_set)
    __swig_setmethods__["ambientDensityField"] = _bishop.RenderData_ambientDensityField_set
    __swig_getmethods__["ambientDensityField"] = _bishop.RenderData_ambientDensityField_get
    if _newclass:
        ambientDensityField = _swig_property(_bishop.RenderData_ambientDensityField_get, _bishop.RenderData_ambientDensityField_set)
    __swig_setmethods__["dsmField"] = _bishop.RenderData_dsmField_set
    __swig_getmethods__["dsmField"] = _bishop.RenderData_dsmField_get
    if _newclass:
        dsmField = _swig_property(_bishop.RenderData_dsmField_get, _bishop.RenderData_dsmField_set)
    __swig_setmethods__["use_dsm_range"] = _bishop.RenderData_use_dsm_range_set
    __swig_getmethods__["use_dsm_range"] = _bishop.RenderData_use_dsm_range_get
    if _newclass:
        use_dsm_range = _swig_property(_bishop.RenderData_use_dsm_range_get, _bishop.RenderData_use_dsm_range_set)
    __swig_setmethods__["dsm_range"] = _bishop.RenderData_dsm_range_set
    __swig_getmethods__["dsm_range"] = _bishop.RenderData_dsm_range_get
    if _newclass:
        dsm_range = _swig_property(_bishop.RenderData_dsm_range_get, _bishop.RenderData_dsm_range_set)
    __swig_setmethods__["lightColor"] = _bishop.RenderData_lightColor_set
    __swig_getmethods__["lightColor"] = _bishop.RenderData_lightColor_get
    if _newclass:
        lightColor = _swig_property(_bishop.RenderData_lightColor_get, _bishop.RenderData_lightColor_set)
    __swig_setmethods__["lightPosition"] = _bishop.RenderData_lightPosition_set
    __swig_getmethods__["lightPosition"] = _bishop.RenderData_lightPosition_get
    if _newclass:
        lightPosition = _swig_property(_bishop.RenderData_lightPosition_get, _bishop.RenderData_lightPosition_set)
    __swig_setmethods__["colorField"] = _bishop.RenderData_colorField_set
    __swig_getmethods__["colorField"] = _bishop.RenderData_colorField_get
    if _newclass:
        colorField = _swig_property(_bishop.RenderData_colorField_get, _bishop.RenderData_colorField_set)
    __swig_setmethods__["ambientColorField"] = _bishop.RenderData_ambientColorField_set
    __swig_getmethods__["ambientColorField"] = _bishop.RenderData_ambientColorField_get
    if _newclass:
        ambientColorField = _swig_property(_bishop.RenderData_ambientColorField_get, _bishop.RenderData_ambientColorField_set)
    __swig_setmethods__["startPosition"] = _bishop.RenderData_startPosition_set
    __swig_getmethods__["startPosition"] = _bishop.RenderData_startPosition_get
    if _newclass:
        startPosition = _swig_property(_bishop.RenderData_startPosition_get, _bishop.RenderData_startPosition_set)
    __swig_setmethods__["startDirection"] = _bishop.RenderData_startDirection_set
    __swig_getmethods__["startDirection"] = _bishop.RenderData_startDirection_get
    if _newclass:
        startDirection = _swig_property(_bishop.RenderData_startDirection_get, _bishop.RenderData_startDirection_set)
    __swig_setmethods__["scatterCoefficient"] = _bishop.RenderData_scatterCoefficient_set
    __swig_getmethods__["scatterCoefficient"] = _bishop.RenderData_scatterCoefficient_get
    if _newclass:
        scatterCoefficient = _swig_property(_bishop.RenderData_scatterCoefficient_get, _bishop.RenderData_scatterCoefficient_set)
    __swig_setmethods__["ds"] = _bishop.RenderData_ds_set
    __swig_getmethods__["ds"] = _bishop.RenderData_ds_get
    if _newclass:
        ds = _swig_property(_bishop.RenderData_ds_get, _bishop.RenderData_ds_set)
    __swig_setmethods__["maxPathlength"] = _bishop.RenderData_maxPathlength_set
    __swig_getmethods__["maxPathlength"] = _bishop.RenderData_maxPathlength_get
    if _newclass:
        maxPathlength = _swig_property(_bishop.RenderData_maxPathlength_get, _bishop.RenderData_maxPathlength_set)
    __swig_setmethods__["boundingBoxes"] = _bishop.RenderData_boundingBoxes_set
    __swig_getmethods__["boundingBoxes"] = _bishop.RenderData_boundingBoxes_get
    if _newclass:
        boundingBoxes = _swig_property(_bishop.RenderData_boundingBoxes_get, _bishop.RenderData_boundingBoxes_set)
    __swig_setmethods__["sparseGrid"] = _bishop.RenderData_sparseGrid_set
    __swig_getmethods__["sparseGrid"] = _bishop.RenderData_sparseGrid_get
    if _newclass:
        sparseGrid = _swig_property(_bishop.RenderData_sparseGrid_get, _bishop.RenderData_sparseGrid_set)
    __swig_setmethods__["shaders"] = _bishop.RenderData_shaders_set
    __swig_getmethods__["shaders"] = _bishop.RenderData_shaders_get
    if _newclass:
        shaders = _swig_property(_bishop.RenderData_shaders_get, _bishop.RenderData_shaders_set)
    __swig_setmethods__["phaseFunction"] = _bishop.RenderData_phaseFunction_set
    __swig_getmethods__["phaseFunction"] = _bishop.RenderData_phaseFunction_get
    if _newclass:
        phaseFunction = _swig_property(_bishop.RenderData_phaseFunction_get, _bishop.RenderData_phaseFunction_set)
    __swig_setmethods__["holdOut"] = _bishop.RenderData_holdOut_set
    __swig_getmethods__["holdOut"] = _bishop.RenderData_holdOut_get
    if _newclass:
        holdOut = _swig_property(_bishop.RenderData_holdOut_get, _bishop.RenderData_holdOut_set)
    __swig_setmethods__["useHoldOut"] = _bishop.RenderData_useHoldOut_set
    __swig_getmethods__["useHoldOut"] = _bishop.RenderData_useHoldOut_get
    if _newclass:
        useHoldOut = _swig_property(_bishop.RenderData_useHoldOut_get, _bishop.RenderData_useHoldOut_set)
    __swig_setmethods__["intervalTree"] = _bishop.RenderData_intervalTree_set
    __swig_getmethods__["intervalTree"] = _bishop.RenderData_intervalTree_get
    if _newclass:
        intervalTree = _swig_property(_bishop.RenderData_intervalTree_get, _bishop.RenderData_intervalTree_set)
    __swig_setmethods__["volumeLights"] = _bishop.RenderData_volumeLights_set
    __swig_getmethods__["volumeLights"] = _bishop.RenderData_volumeLights_get
    if _newclass:
        volumeLights = _swig_property(_bishop.RenderData_volumeLights_get, _bishop.RenderData_volumeLights_set)
    __swig_setmethods__["vlf_samples"] = _bishop.RenderData_vlf_samples_set
    __swig_getmethods__["vlf_samples"] = _bishop.RenderData_vlf_samples_get
    if _newclass:
        vlf_samples = _swig_property(_bishop.RenderData_vlf_samples_get, _bishop.RenderData_vlf_samples_set)
RenderData_swigregister = _bishop.RenderData_swigregister
RenderData_swigregister(RenderData)


def AddDSM(d, dsm):
    return _bishop.AddDSM(d, dsm)
AddDSM = _bishop.AddDSM

def GetDSM(d, i):
    return _bishop.GetDSM(d, i)
GetDSM = _bishop.GetDSM

def SetDensityField(d, field):
    return _bishop.SetDensityField(d, field)
SetDensityField = _bishop.SetDensityField

def SetHoldOut(d, field):
    return _bishop.SetHoldOut(d, field)
SetHoldOut = _bishop.SetHoldOut

def SetAmbientDensityField(d, field):
    return _bishop.SetAmbientDensityField(d, field)
SetAmbientDensityField = _bishop.SetAmbientDensityField

def SetColorField(d, field):
    return _bishop.SetColorField(d, field)
SetColorField = _bishop.SetColorField

def SetAmbientColorField(d, field):
    return _bishop.SetAmbientColorField(d, field)
SetAmbientColorField = _bishop.SetAmbientColorField

def SetSparseGrid(d, field):
    return _bishop.SetSparseGrid(d, field)
SetSparseGrid = _bishop.SetSparseGrid

def SetUniformPhaseFunction(d, value=1):
    return _bishop.SetUniformPhaseFunction(d, value)
SetUniformPhaseFunction = _bishop.SetUniformPhaseFunction

def SetHenyeyGreensteinPhaseFunction(d, g):
    return _bishop.SetHenyeyGreensteinPhaseFunction(d, g)
SetHenyeyGreensteinPhaseFunction = _bishop.SetHenyeyGreensteinPhaseFunction

def SetDoubleHenyeyGreensteinPhaseFunction(d, g0, g1, mix):
    return _bishop.SetDoubleHenyeyGreensteinPhaseFunction(d, g0, g1, mix)
SetDoubleHenyeyGreensteinPhaseFunction = _bishop.SetDoubleHenyeyGreensteinPhaseFunction

def SetFournierForandPhaseFunction(d, en, mu):
    return _bishop.SetFournierForandPhaseFunction(d, en, mu)
SetFournierForandPhaseFunction = _bishop.SetFournierForandPhaseFunction

def AddBoundingBox(*args):
    return _bishop.AddBoundingBox(*args)
AddBoundingBox = _bishop.AddBoundingBox

def AddBoundingBoxes(d, boxes):
    return _bishop.AddBoundingBoxes(d, boxes)
AddBoundingBoxes = _bishop.AddBoundingBoxes

def SetIntervalTree(d, t):
    return _bishop.SetIntervalTree(d, t)
SetIntervalTree = _bishop.SetIntervalTree

def SetDSMRange(d, value):
    return _bishop.SetDSMRange(d, value)
SetDSMRange = _bishop.SetDSMRange

def AddVolumeLight(d, vlf):
    return _bishop.AddVolumeLight(d, vlf)
AddVolumeLight = _bishop.AddVolumeLight

def SetVolumeLightSamples(d, samples):
    return _bishop.SetVolumeLightSamples(d, samples)
SetVolumeLightSamples = _bishop.SetVolumeLightSamples

def RayMarchVisibleDSMAccumulation(input, lightPosition, cam, dsmField):
    return _bishop.RayMarchVisibleDSMAccumulation(input, lightPosition, cam, dsmField)
RayMarchVisibleDSMAccumulation = _bishop.RayMarchVisibleDSMAccumulation

def RayMarchDSMAccumulation(*args):
    return _bishop.RayMarchDSMAccumulation(*args)
RayMarchDSMAccumulation = _bishop.RayMarchDSMAccumulation

def ssRayMarchAccumulation(input, output_color, output_opacity):
    return _bishop.ssRayMarchAccumulation(input, output_color, output_opacity)
ssRayMarchAccumulation = _bishop.ssRayMarchAccumulation

def ssPointToPointRayMarchAccumulation(input, start, end, output_color, output_opacity):
    return _bishop.ssPointToPointRayMarchAccumulation(input, start, end, output_color, output_opacity)
ssPointToPointRayMarchAccumulation = _bishop.ssPointToPointRayMarchAccumulation

def gatherLight(data, P, Dir):
    return _bishop.gatherLight(data, P, Dir)
gatherLight = _bishop.gatherLight

def setNbCores(nb):
    return _bishop.setNbCores(nb)
setNbCores = _bishop.setNbCores

def PointToPointTransmissivity(d, start, end):
    return _bishop.PointToPointTransmissivity(d, start, end)
PointToPointTransmissivity = _bishop.PointToPointTransmissivity

def PointToPointLWP(d, start, end):
    return _bishop.PointToPointLWP(d, start, end)
PointToPointLWP = _bishop.PointToPointLWP
class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_Particle()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Particle
    __del__ = lambda self: None

    def P(self, *args):
        return _bishop.Particle_P(self, *args)

    def Cd(self, *args):
        return _bishop.Particle_Cd(self, *args)

    def id(self, *args):
        return _bishop.Particle_id(self, *args)

    def pscale(self, *args):
        return _bishop.Particle_pscale(self, *args)

    def octaves(self, *args):
        return _bishop.Particle_octaves(self, *args)

    def roughness(self, *args):
        return _bishop.Particle_roughness(self, *args)

    def freq(self, *args):
        return _bishop.Particle_freq(self, *args)

    def fjump(self, *args):
        return _bishop.Particle_fjump(self, *args)

    def offset(self, *args):
        return _bishop.Particle_offset(self, *args)

    def translate(self, *args):
        return _bishop.Particle_translate(self, *args)

    def fade(self, *args):
        return _bishop.Particle_fade(self, *args)

    def opacity(self, *args):
        return _bishop.Particle_opacity(self, *args)

    def pyroAmplitude(self, *args):
        return _bishop.Particle_pyroAmplitude(self, *args)

    def pyroGamma(self, *args):
        return _bishop.Particle_pyroGamma(self, *args)

    def pyroDensity(self, *args):
        return _bishop.Particle_pyroDensity(self, *args)

    def addAttribute(self, name, value):
        return _bishop.Particle_addAttribute(self, name, value)

    def attribute(self, name):
        return _bishop.Particle_attribute(self, name)

    def v(self, *args):
        return _bishop.Particle_v(self, *args)

    def accel(self, *args):
        return _bishop.Particle_accel(self, *args)

    def normal(self, *args):
        return _bishop.Particle_normal(self, *args)

    def right(self, *args):
        return _bishop.Particle_right(self, *args)

    def up(self, *args):
        return _bishop.Particle_up(self, *args)

    def nbWisps(self, *args):
        return _bishop.Particle_nbWisps(self, *args)

    def wispOctaves(self, *args):
        return _bishop.Particle_wispOctaves(self, *args)

    def wispRoughness(self, *args):
        return _bishop.Particle_wispRoughness(self, *args)

    def wispFreq(self, *args):
        return _bishop.Particle_wispFreq(self, *args)

    def wispFjump(self, *args):
        return _bishop.Particle_wispFjump(self, *args)

    def wispOffset(self, *args):
        return _bishop.Particle_wispOffset(self, *args)

    def wispTranslate(self, *args):
        return _bishop.Particle_wispTranslate(self, *args)

    def shutter(self, *args):
        return _bishop.Particle_shutter(self, *args)

    def framerate(self, *args):
        return _bishop.Particle_framerate(self, *args)

    def lifetime(self, *args):
        return _bishop.Particle_lifetime(self, *args)

    def age(self, *args):
        return _bishop.Particle_age(self, *args)

    def wispCorrelation(self, *args):
        return _bishop.Particle_wispCorrelation(self, *args)

    def wispRadialGroup(self, *args):
        return _bishop.Particle_wispRadialGroup(self, *args)

    def wispDisplacementScale(self, *args):
        return _bishop.Particle_wispDisplacementScale(self, *args)
    __swig_setmethods__["_P"] = _bishop.Particle__P_set
    __swig_getmethods__["_P"] = _bishop.Particle__P_get
    if _newclass:
        _P = _swig_property(_bishop.Particle__P_get, _bishop.Particle__P_set)
    __swig_setmethods__["_Cd"] = _bishop.Particle__Cd_set
    __swig_getmethods__["_Cd"] = _bishop.Particle__Cd_get
    if _newclass:
        _Cd = _swig_property(_bishop.Particle__Cd_get, _bishop.Particle__Cd_set)
    __swig_setmethods__["_id"] = _bishop.Particle__id_set
    __swig_getmethods__["_id"] = _bishop.Particle__id_get
    if _newclass:
        _id = _swig_property(_bishop.Particle__id_get, _bishop.Particle__id_set)
    __swig_setmethods__["_pscale"] = _bishop.Particle__pscale_set
    __swig_getmethods__["_pscale"] = _bishop.Particle__pscale_get
    if _newclass:
        _pscale = _swig_property(_bishop.Particle__pscale_get, _bishop.Particle__pscale_set)
    __swig_setmethods__["_octaves"] = _bishop.Particle__octaves_set
    __swig_getmethods__["_octaves"] = _bishop.Particle__octaves_get
    if _newclass:
        _octaves = _swig_property(_bishop.Particle__octaves_get, _bishop.Particle__octaves_set)
    __swig_setmethods__["_roughness"] = _bishop.Particle__roughness_set
    __swig_getmethods__["_roughness"] = _bishop.Particle__roughness_get
    if _newclass:
        _roughness = _swig_property(_bishop.Particle__roughness_get, _bishop.Particle__roughness_set)
    __swig_setmethods__["_freq"] = _bishop.Particle__freq_set
    __swig_getmethods__["_freq"] = _bishop.Particle__freq_get
    if _newclass:
        _freq = _swig_property(_bishop.Particle__freq_get, _bishop.Particle__freq_set)
    __swig_setmethods__["_fjump"] = _bishop.Particle__fjump_set
    __swig_getmethods__["_fjump"] = _bishop.Particle__fjump_get
    if _newclass:
        _fjump = _swig_property(_bishop.Particle__fjump_get, _bishop.Particle__fjump_set)
    __swig_setmethods__["_offset"] = _bishop.Particle__offset_set
    __swig_getmethods__["_offset"] = _bishop.Particle__offset_get
    if _newclass:
        _offset = _swig_property(_bishop.Particle__offset_get, _bishop.Particle__offset_set)
    __swig_setmethods__["_translate"] = _bishop.Particle__translate_set
    __swig_getmethods__["_translate"] = _bishop.Particle__translate_get
    if _newclass:
        _translate = _swig_property(_bishop.Particle__translate_get, _bishop.Particle__translate_set)
    __swig_setmethods__["_fade"] = _bishop.Particle__fade_set
    __swig_getmethods__["_fade"] = _bishop.Particle__fade_get
    if _newclass:
        _fade = _swig_property(_bishop.Particle__fade_get, _bishop.Particle__fade_set)
    __swig_setmethods__["_opacity"] = _bishop.Particle__opacity_set
    __swig_getmethods__["_opacity"] = _bishop.Particle__opacity_get
    if _newclass:
        _opacity = _swig_property(_bishop.Particle__opacity_get, _bishop.Particle__opacity_set)
    __swig_setmethods__["_normal"] = _bishop.Particle__normal_set
    __swig_getmethods__["_normal"] = _bishop.Particle__normal_get
    if _newclass:
        _normal = _swig_property(_bishop.Particle__normal_get, _bishop.Particle__normal_set)
    __swig_setmethods__["_right"] = _bishop.Particle__right_set
    __swig_getmethods__["_right"] = _bishop.Particle__right_get
    if _newclass:
        _right = _swig_property(_bishop.Particle__right_get, _bishop.Particle__right_set)
    __swig_setmethods__["_up"] = _bishop.Particle__up_set
    __swig_getmethods__["_up"] = _bishop.Particle__up_get
    if _newclass:
        _up = _swig_property(_bishop.Particle__up_get, _bishop.Particle__up_set)
    __swig_setmethods__["_v"] = _bishop.Particle__v_set
    __swig_getmethods__["_v"] = _bishop.Particle__v_get
    if _newclass:
        _v = _swig_property(_bishop.Particle__v_get, _bishop.Particle__v_set)
    __swig_setmethods__["_accel"] = _bishop.Particle__accel_set
    __swig_getmethods__["_accel"] = _bishop.Particle__accel_get
    if _newclass:
        _accel = _swig_property(_bishop.Particle__accel_get, _bishop.Particle__accel_set)
    __swig_setmethods__["_shutter"] = _bishop.Particle__shutter_set
    __swig_getmethods__["_shutter"] = _bishop.Particle__shutter_get
    if _newclass:
        _shutter = _swig_property(_bishop.Particle__shutter_get, _bishop.Particle__shutter_set)
    __swig_setmethods__["_framerate"] = _bishop.Particle__framerate_set
    __swig_getmethods__["_framerate"] = _bishop.Particle__framerate_get
    if _newclass:
        _framerate = _swig_property(_bishop.Particle__framerate_get, _bishop.Particle__framerate_set)
    __swig_setmethods__["_lifetime"] = _bishop.Particle__lifetime_set
    __swig_getmethods__["_lifetime"] = _bishop.Particle__lifetime_get
    if _newclass:
        _lifetime = _swig_property(_bishop.Particle__lifetime_get, _bishop.Particle__lifetime_set)
    __swig_setmethods__["_age"] = _bishop.Particle__age_set
    __swig_getmethods__["_age"] = _bishop.Particle__age_get
    if _newclass:
        _age = _swig_property(_bishop.Particle__age_get, _bishop.Particle__age_set)
    __swig_setmethods__["_nbWisps"] = _bishop.Particle__nbWisps_set
    __swig_getmethods__["_nbWisps"] = _bishop.Particle__nbWisps_get
    if _newclass:
        _nbWisps = _swig_property(_bishop.Particle__nbWisps_get, _bishop.Particle__nbWisps_set)
    __swig_setmethods__["_wisp_octaves"] = _bishop.Particle__wisp_octaves_set
    __swig_getmethods__["_wisp_octaves"] = _bishop.Particle__wisp_octaves_get
    if _newclass:
        _wisp_octaves = _swig_property(_bishop.Particle__wisp_octaves_get, _bishop.Particle__wisp_octaves_set)
    __swig_setmethods__["_wisp_roughness"] = _bishop.Particle__wisp_roughness_set
    __swig_getmethods__["_wisp_roughness"] = _bishop.Particle__wisp_roughness_get
    if _newclass:
        _wisp_roughness = _swig_property(_bishop.Particle__wisp_roughness_get, _bishop.Particle__wisp_roughness_set)
    __swig_setmethods__["_wisp_freq"] = _bishop.Particle__wisp_freq_set
    __swig_getmethods__["_wisp_freq"] = _bishop.Particle__wisp_freq_get
    if _newclass:
        _wisp_freq = _swig_property(_bishop.Particle__wisp_freq_get, _bishop.Particle__wisp_freq_set)
    __swig_setmethods__["_wisp_fjump"] = _bishop.Particle__wisp_fjump_set
    __swig_getmethods__["_wisp_fjump"] = _bishop.Particle__wisp_fjump_get
    if _newclass:
        _wisp_fjump = _swig_property(_bishop.Particle__wisp_fjump_get, _bishop.Particle__wisp_fjump_set)
    __swig_setmethods__["_wisp_offset"] = _bishop.Particle__wisp_offset_set
    __swig_getmethods__["_wisp_offset"] = _bishop.Particle__wisp_offset_get
    if _newclass:
        _wisp_offset = _swig_property(_bishop.Particle__wisp_offset_get, _bishop.Particle__wisp_offset_set)
    __swig_setmethods__["_wisp_translate"] = _bishop.Particle__wisp_translate_set
    __swig_getmethods__["_wisp_translate"] = _bishop.Particle__wisp_translate_get
    if _newclass:
        _wisp_translate = _swig_property(_bishop.Particle__wisp_translate_get, _bishop.Particle__wisp_translate_set)
    __swig_setmethods__["_wisp_correlation"] = _bishop.Particle__wisp_correlation_set
    __swig_getmethods__["_wisp_correlation"] = _bishop.Particle__wisp_correlation_get
    if _newclass:
        _wisp_correlation = _swig_property(_bishop.Particle__wisp_correlation_get, _bishop.Particle__wisp_correlation_set)
    __swig_setmethods__["_wisp_radialgroup"] = _bishop.Particle__wisp_radialgroup_set
    __swig_getmethods__["_wisp_radialgroup"] = _bishop.Particle__wisp_radialgroup_get
    if _newclass:
        _wisp_radialgroup = _swig_property(_bishop.Particle__wisp_radialgroup_get, _bishop.Particle__wisp_radialgroup_set)
    __swig_setmethods__["_wisp_displacementScale"] = _bishop.Particle__wisp_displacementScale_set
    __swig_getmethods__["_wisp_displacementScale"] = _bishop.Particle__wisp_displacementScale_get
    if _newclass:
        _wisp_displacementScale = _swig_property(_bishop.Particle__wisp_displacementScale_get, _bishop.Particle__wisp_displacementScale_set)
    __swig_setmethods__["_pyroAmplitude"] = _bishop.Particle__pyroAmplitude_set
    __swig_getmethods__["_pyroAmplitude"] = _bishop.Particle__pyroAmplitude_get
    if _newclass:
        _pyroAmplitude = _swig_property(_bishop.Particle__pyroAmplitude_get, _bishop.Particle__pyroAmplitude_set)
    __swig_setmethods__["_pyroGamma"] = _bishop.Particle__pyroGamma_set
    __swig_getmethods__["_pyroGamma"] = _bishop.Particle__pyroGamma_get
    if _newclass:
        _pyroGamma = _swig_property(_bishop.Particle__pyroGamma_get, _bishop.Particle__pyroGamma_set)
    __swig_setmethods__["_pyroDensity"] = _bishop.Particle__pyroDensity_set
    __swig_getmethods__["_pyroDensity"] = _bishop.Particle__pyroDensity_get
    if _newclass:
        _pyroDensity = _swig_property(_bishop.Particle__pyroDensity_get, _bishop.Particle__pyroDensity_set)
    __swig_setmethods__["attributes"] = _bishop.Particle_attributes_set
    __swig_getmethods__["attributes"] = _bishop.Particle_attributes_get
    if _newclass:
        attributes = _swig_property(_bishop.Particle_attributes_get, _bishop.Particle_attributes_set)
Particle_swigregister = _bishop.Particle_swigregister
Particle_swigregister(Particle)


def Interpolate(p0, p1, z, interp):
    return _bishop.Interpolate(p0, p1, z, interp)
Interpolate = _bishop.Interpolate

def StampNoiseAndColor(*args):
    return _bishop.StampNoiseAndColor(*args)
StampNoiseAndColor = _bishop.StampNoiseAndColor

def StampSELMA(Xgrid, X, velocity, dt):
    return _bishop.StampSELMA(Xgrid, X, velocity, dt)
StampSELMA = _bishop.StampSELMA
class PointWispWanderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointWispWanderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointWispWanderer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PointWispWanderer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PointWispWanderer
    __del__ = lambda self: None

    def reset(self, *args):
        return _bishop.PointWispWanderer_reset(self, *args)

    def step(self):
        return _bishop.PointWispWanderer_step(self)

    def pos(self):
        return _bishop.PointWispWanderer_pos(self)
PointWispWanderer_swigregister = _bishop.PointWispWanderer_swigregister
PointWispWanderer_swigregister(PointWispWanderer)

class SplineWispWanderer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplineWispWanderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SplineWispWanderer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_SplineWispWanderer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SplineWispWanderer
    __del__ = lambda self: None

    def reset(self, p0, p1):
        return _bishop.SplineWispWanderer_reset(self, p0, p1)

    def step(self):
        return _bishop.SplineWispWanderer_step(self)

    def pos(self):
        return _bishop.SplineWispWanderer_pos(self)

    def interpolatedParticle(self):
        return _bishop.SplineWispWanderer_interpolatedParticle(self)
SplineWispWanderer_swigregister = _bishop.SplineWispWanderer_swigregister
SplineWispWanderer_swigregister(SplineWispWanderer)


def StampFlameWisps(grid, cgrid, particles, baseColor):
    return _bishop.StampFlameWisps(grid, cgrid, particles, baseColor)
StampFlameWisps = _bishop.StampFlameWisps

def StampField(grid, field):
    return _bishop.StampField(grid, field)
StampField = _bishop.StampField

def StampPyro(*args):
    return _bishop.StampPyro(*args)
StampPyro = _bishop.StampPyro

def StampParticles(*args):
    return _bishop.StampParticles(*args)
StampParticles = _bishop.StampParticles

def StampGridPattern(*args):
    return _bishop.StampGridPattern(*args)
StampGridPattern = _bishop.StampGridPattern

def StampSplineWisps(grid, cgrid, particles):
    return _bishop.StampSplineWisps(grid, cgrid, particles)
StampSplineWisps = _bishop.StampSplineWisps

def StampNoise(*args):
    return _bishop.StampNoise(*args)
StampNoise = _bishop.StampNoise

def StampPointWisps(*args):
    return _bishop.StampPointWisps(*args)
StampPointWisps = _bishop.StampPointWisps

def StampBlurredWisps(*args):
    return _bishop.StampBlurredWisps(*args)
StampBlurredWisps = _bishop.StampBlurredWisps

def StampWisps(*args):
    return _bishop.StampWisps(*args)
StampWisps = _bishop.StampWisps

_bishop.LABSHORTLOGO_swigconstant(_bishop)
LABSHORTLOGO = _bishop.LABSHORTLOGO

_bishop.LABLOGOSTRING_swigconstant(_bishop)
LABLOGOSTRING = _bishop.LABLOGOSTRING

def LabLogo():
    return _bishop.LabLogo()
LabLogo = _bishop.LabLogo

def LabShortLogo():
    return _bishop.LabShortLogo()
LabShortLogo = _bishop.LabShortLogo
class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_Logger(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Logger
    __del__ = lambda self: None
Logger_swigregister = _bishop.Logger_swigregister
Logger_swigregister(Logger)

class BlackBodyEmission(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackBodyEmission, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlackBodyEmission, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_BlackBodyEmission()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_BlackBodyEmission
    __del__ = lambda self: None

    def emission(self, *args):
        return _bishop.BlackBodyEmission_emission(self, *args)
BlackBodyEmission_swigregister = _bishop.BlackBodyEmission_swigregister
BlackBodyEmission_swigregister(BlackBodyEmission)

class BlackBodyVolume(ColorVolume, BlackBodyEmission):
    __swig_setmethods__ = {}
    for _s in [ColorVolume, BlackBodyEmission]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlackBodyVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorVolume, BlackBodyEmission]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlackBodyVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_BlackBodyVolume(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_BlackBodyVolume
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.BlackBodyVolume_eval(self, P)
BlackBodyVolume_swigregister = _bishop.BlackBodyVolume_swigregister
BlackBodyVolume_swigregister(BlackBodyVolume)

class PlaneLevelSet(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlaneLevelSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlaneLevelSet, name)
    __repr__ = _swig_repr

    def __init__(self, p0, N):
        this = _bishop.new_PlaneLevelSet(p0, N)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PlaneLevelSet
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.PlaneLevelSet_eval(self, P)

    def grad(self, P):
        return _bishop.PlaneLevelSet_grad(self, P)
PlaneLevelSet_swigregister = _bishop.PlaneLevelSet_swigregister
PlaneLevelSet_swigregister(PlaneLevelSet)

class Triangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triangle, name)
    __repr__ = _swig_repr

    def __init__(self, p0, p1, p2):
        this = _bishop.new_Triangle(p0, p1, p2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Triangle
    __del__ = lambda self: None

    def barycentric(self, P):
        return _bishop.Triangle_barycentric(self, P)

    def Intersected(self, P, D):
        return _bishop.Triangle_Intersected(self, P, D)

    def dU(self):
        return _bishop.Triangle_dU(self)

    def dV(self):
        return _bishop.Triangle_dV(self)

    def N(self):
        return _bishop.Triangle_N(self)

    def P(self):
        return _bishop.Triangle_P(self)

    def Eu(self):
        return _bishop.Triangle_Eu(self)

    def Ev(self):
        return _bishop.Triangle_Ev(self)

    def isGood(self):
        return _bishop.Triangle_isGood(self)
Triangle_swigregister = _bishop.Triangle_swigregister
Triangle_swigregister(Triangle)

class TexturedTriangle(Triangle):
    __swig_setmethods__ = {}
    for _s in [Triangle]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexturedTriangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Triangle]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexturedTriangle, name)
    __repr__ = _swig_repr

    def __init__(self, p0, p1, p2, t0, t1, t2):
        this = _bishop.new_TexturedTriangle(p0, p1, p2, t0, t1, t2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TexturedTriangle
    __del__ = lambda self: None

    def barycentricTexture(self, P):
        return _bishop.TexturedTriangle_barycentricTexture(self, P)

    def T(self):
        return _bishop.TexturedTriangle_T(self)

    def Tu(self):
        return _bishop.TexturedTriangle_Tu(self)

    def Tv(self):
        return _bishop.TexturedTriangle_Tv(self)
TexturedTriangle_swigregister = _bishop.TexturedTriangle_swigregister
TexturedTriangle_swigregister(TexturedTriangle)


def ClosestDistance(*args):
    return _bishop.ClosestDistance(*args)
ClosestDistance = _bishop.ClosestDistance
class TriangleLevelSet(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleLevelSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleLevelSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_TriangleLevelSet(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TriangleLevelSet
    __del__ = lambda self: None

    def eval(self, P):
        return _bishop.TriangleLevelSet_eval(self, P)

    def grad(self, P):
        return _bishop.TriangleLevelSet_grad(self, P)

    def LLC(self):
        return _bishop.TriangleLevelSet_LLC(self)

    def URC(self):
        return _bishop.TriangleLevelSet_URC(self)

    def isRejected(self):
        return _bishop.TriangleLevelSet_isRejected(self)
TriangleLevelSet_swigregister = _bishop.TriangleLevelSet_swigregister
TriangleLevelSet_swigregister(TriangleLevelSet)

class TriangleGeometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleGeometry, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_TriangleGeometry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TriangleGeometry
    __del__ = lambda self: None

    def merge(self, g):
        return _bishop.TriangleGeometry_merge(self, g)

    def addVertex(self, v):
        return _bishop.TriangleGeometry_addVertex(self, v)

    def addNormal(self, v):
        return _bishop.TriangleGeometry_addNormal(self, v)

    def addTextureCoordinate(self, v):
        return _bishop.TriangleGeometry_addTextureCoordinate(self, v)

    def getVertex(self, i):
        return _bishop.TriangleGeometry_getVertex(self, i)

    def getNormal(self, i):
        return _bishop.TriangleGeometry_getNormal(self, i)

    def faceNormal(self, i):
        return _bishop.TriangleGeometry_faceNormal(self, i)

    def faceArea(self, i):
        return _bishop.TriangleGeometry_faceArea(self, i)

    def getTextureCoordinate(self, i):
        return _bishop.TriangleGeometry_getTextureCoordinate(self, i)

    def nbVertices(self):
        return _bishop.TriangleGeometry_nbVertices(self)

    def nbTextureCoordinates(self):
        return _bishop.TriangleGeometry_nbTextureCoordinates(self)

    def nbNormals(self):
        return _bishop.TriangleGeometry_nbNormals(self)

    def setVertex(self, i, v):
        return _bishop.TriangleGeometry_setVertex(self, i, v)

    def setNormal(self, i, v):
        return _bishop.TriangleGeometry_setNormal(self, i, v)

    def addFace(self, *args):
        return _bishop.TriangleGeometry_addFace(self, *args)

    def addTexturedNormaledFace(self, i, j, k, it, jt, kt, arg8, jn, kn):
        return _bishop.TriangleGeometry_addTexturedNormaledFace(self, i, j, k, it, jt, kt, arg8, jn, kn)

    def addTexturedFace(self, *args):
        return _bishop.TriangleGeometry_addTexturedFace(self, *args)

    def getFace(self, f, i, j, k):
        return _bishop.TriangleGeometry_getFace(self, f, i, j, k)

    def getFaceIndex(self, f, index):
        return _bishop.TriangleGeometry_getFaceIndex(self, f, index)

    def getTexturedFace(self, f, i, j, k, it, jt, kt):
        return _bishop.TriangleGeometry_getTexturedFace(self, f, i, j, k, it, jt, kt)

    def nbFaces(self):
        return _bishop.TriangleGeometry_nbFaces(self)

    def clear(self):
        return _bishop.TriangleGeometry_clear(self)

    def LLC(self):
        return _bishop.TriangleGeometry_LLC(self)

    def URC(self):
        return _bishop.TriangleGeometry_URC(self)

    def setScaling(self, sc):
        return _bishop.TriangleGeometry_setScaling(self, sc)

    def scaling(self):
        return _bishop.TriangleGeometry_scaling(self)

    def computeConnectivity(self):
        return _bishop.TriangleGeometry_computeConnectivity(self)

    def connections(self, i):
        return _bishop.TriangleGeometry_connections(self, i)

    def averageNeighborDistance(self, i):
        return _bishop.TriangleGeometry_averageNeighborDistance(self, i)

    def hasTextureCoordinates(self):
        return _bishop.TriangleGeometry_hasTextureCoordinates(self)

    def hasNormals(self):
        return _bishop.TriangleGeometry_hasNormals(self)

    def translate(self, t):
        return _bishop.TriangleGeometry_translate(self, t)

    def rotate(self, t):
        return _bishop.TriangleGeometry_rotate(self, t)
TriangleGeometry_swigregister = _bishop.TriangleGeometry_swigregister
TriangleGeometry_swigregister(TriangleGeometry)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_Mesh(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_Mesh
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.Mesh___str__(self)
Mesh_swigregister = _bishop.Mesh_swigregister
Mesh_swigregister(Mesh)

class SignedDistance(ScalarVolume):
    __swig_setmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignedDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignedDistance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_SignedDistance(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_SignedDistance
    __del__ = lambda self: None

    def addTriangle(self, t):
        return _bishop.SignedDistance_addTriangle(self, t)

    def eval(self, P):
        return _bishop.SignedDistance_eval(self, P)
SignedDistance_swigregister = _bishop.SignedDistance_swigregister
SignedDistance_swigregister(SignedDistance)

class TexturedSignedDistance(VectorVolume):
    __swig_setmethods__ = {}
    for _s in [VectorVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexturedSignedDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexturedSignedDistance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_TexturedSignedDistance(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_TexturedSignedDistance
    __del__ = lambda self: None

    def addTriangle(self, t):
        return _bishop.TexturedSignedDistance_addTriangle(self, t)

    def eval(self, P):
        return _bishop.TexturedSignedDistance_eval(self, P)
TexturedSignedDistance_swigregister = _bishop.TexturedSignedDistance_swigregister
TexturedSignedDistance_swigregister(TexturedSignedDistance)


def ProcessLevelSet(*args):
    return _bishop.ProcessLevelSet(*args)
ProcessLevelSet = _bishop.ProcessLevelSet

def RayMarchLevelSet(*args):
    return _bishop.RayMarchLevelSet(*args)
RayMarchLevelSet = _bishop.RayMarchLevelSet

def ProcessAABox(*args):
    return _bishop.ProcessAABox(*args)
ProcessAABox = _bishop.ProcessAABox

def ProcessPyramid(*args):
    return _bishop.ProcessPyramid(*args)
ProcessPyramid = _bishop.ProcessPyramid

def FindAllIntersections(*args):
    return _bishop.FindAllIntersections(*args)
FindAllIntersections = _bishop.FindAllIntersections

def Geometry2Particles(geom, particles):
    return _bishop.Geometry2Particles(geom, particles)
Geometry2Particles = _bishop.Geometry2Particles

def ClosestPerpDistance(t, P, slop, dist):
    return _bishop.ClosestPerpDistance(t, P, slop, dist)
ClosestPerpDistance = _bishop.ClosestPerpDistance

def GenerateLevelSet(geom, nbIterations, slop, narrow_band_expansion, ls):
    return _bishop.GenerateLevelSet(geom, nbIterations, slop, narrow_band_expansion, ls)
GenerateLevelSet = _bishop.GenerateLevelSet
class ObjParser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjParser, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ObjParser()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ObjParser
    __del__ = lambda self: None

    def ParseFile(self, filename):
        return _bishop.ObjParser_ParseFile(self, filename)

    def Fill(self, *args):
        return _bishop.ObjParser_Fill(self, *args)

    def List(self):
        return _bishop.ObjParser_List(self)

    def IsObjLine(self):
        return _bishop.ObjParser_IsObjLine(self)

    def IsComment(self):
        return _bishop.ObjParser_IsComment(self)

    def IsTexture(self):
        return _bishop.ObjParser_IsTexture(self)

    def IsVertex(self):
        return _bishop.ObjParser_IsVertex(self)

    def IsNormal(self):
        return _bishop.ObjParser_IsNormal(self)

    def IsFace(self):
        return _bishop.ObjParser_IsFace(self)

    def IsGroup(self):
        return _bishop.ObjParser_IsGroup(self)

    def AdvanceToNextLine(self):
        return _bishop.ObjParser_AdvanceToNextLine(self)

    def GetVertex(self, x, y, z):
        return _bishop.ObjParser_GetVertex(self, x, y, z)

    def GetNormal(self, x, y, z):
        return _bishop.ObjParser_GetNormal(self, x, y, z)

    def GetTextureCoordinate(self, x, y, z):
        return _bishop.ObjParser_GetTextureCoordinate(self, x, y, z)

    def GetFace(self, x, y, z):
        return _bishop.ObjParser_GetFace(self, x, y, z)

    def GetTexturedFace(self, x, y, z, xt, yt, zt):
        return _bishop.ObjParser_GetTexturedFace(self, x, y, z, xt, yt, zt)

    def GetTexturedNormaledFace(self, x, y, z, xt, yt, zt, xn, yn, zn):
        return _bishop.ObjParser_GetTexturedNormaledFace(self, x, y, z, xt, yt, zt, xn, yn, zn)

    def GetObjLine(self):
        return _bishop.ObjParser_GetObjLine(self)

    def GetVertexCount(self):
        return _bishop.ObjParser_GetVertexCount(self)

    def GetFaceCount(self):
        return _bishop.ObjParser_GetFaceCount(self)

    def GetHeaderEnd(self):
        return _bishop.ObjParser_GetHeaderEnd(self)
ObjParser_swigregister = _bishop.ObjParser_swigregister
ObjParser_swigregister(ObjParser)


def Union(*args):
    return _bishop.Union(*args)
Union = _bishop.Union

def Intersection(*args):
    return _bishop.Intersection(*args)
Intersection = _bishop.Intersection

def Sample(*args):
    return _bishop.Sample(*args)
Sample = _bishop.Sample

def FloatSample(grid, field):
    return _bishop.FloatSample(grid, field)
FloatSample = _bishop.FloatSample

def VectorSample(grid, field):
    return _bishop.VectorSample(grid, field)
VectorSample = _bishop.VectorSample

def ColorSample(grid, field):
    return _bishop.ColorSample(grid, field)
ColorSample = _bishop.ColorSample
class GasSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GasSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GasSystem, name)
    __repr__ = _swig_repr

    def __init__(self, nx, ny, nz, Lx, Ly, Lz, origin, g, couple, refdensity):
        this = _bishop.new_GasSystem(nx, ny, nz, Lx, Ly, Lz, origin, g, couple, refdensity)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_GasSystem
    __del__ = lambda self: None

    def getVelocityGrid(self):
        return _bishop.GasSystem_getVelocityGrid(self)

    def getDensityGrid(self):
        return _bishop.GasSystem_getDensityGrid(self)

    def setDensitySource(self, s):
        return _bishop.GasSystem_setDensitySource(self, s)

    def setExternalForce(self, f):
        return _bishop.GasSystem_setExternalForce(self, f)

    def update(self, *args):
        return _bishop.GasSystem_update(self, *args)

    def InitializeDensity(self, d):
        return _bishop.GasSystem_InitializeDensity(self, d)

    def InitializeVelocity(self, v):
        return _bishop.GasSystem_InitializeVelocity(self, v)

    def setStepsPerUpdate(self, nb):
        return _bishop.GasSystem_setStepsPerUpdate(self, nb)

    def setProjectionTolerance(self, tol):
        return _bishop.GasSystem_setProjectionTolerance(self, tol)

    def setNbDivFreeIterations(self, nb):
        return _bishop.GasSystem_setNbDivFreeIterations(self, nb)
GasSystem_swigregister = _bishop.GasSystem_swigregister
GasSystem_swigregister(GasSystem)


def GaussSeidelPoissonSolver(p, source, nbiterations, tolerance):
    return _bishop.GaussSeidelPoissonSolver(p, source, nbiterations, tolerance)
GaussSeidelPoissonSolver = _bishop.GaussSeidelPoissonSolver

def GaussSeidelDivFree(divfreeU, U, nbiterations, tolerance):
    return _bishop.GaussSeidelDivFree(divfreeU, U, nbiterations, tolerance)
GaussSeidelDivFree = _bishop.GaussSeidelDivFree

def FFTDivFree(*args):
    return _bishop.FFTDivFree(*args)
FFTDivFree = _bishop.FFTDivFree

def FFTVolumePreserve(b, U):
    return _bishop.FFTVolumePreserve(b, U)
FFTVolumePreserve = _bishop.FFTVolumePreserve
class ParticleGroupA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleGroupA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleGroupA, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _bishop.ParticleGroupA_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bishop.ParticleGroupA___nonzero__(self)

    def __bool__(self):
        return _bishop.ParticleGroupA___bool__(self)

    def __len__(self):
        return _bishop.ParticleGroupA___len__(self)

    def __getslice__(self, i, j):
        return _bishop.ParticleGroupA___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _bishop.ParticleGroupA___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _bishop.ParticleGroupA___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _bishop.ParticleGroupA___delitem__(self, *args)

    def __getitem__(self, *args):
        return _bishop.ParticleGroupA___getitem__(self, *args)

    def __setitem__(self, *args):
        return _bishop.ParticleGroupA___setitem__(self, *args)

    def pop(self):
        return _bishop.ParticleGroupA_pop(self)

    def append(self, x):
        return _bishop.ParticleGroupA_append(self, x)

    def empty(self):
        return _bishop.ParticleGroupA_empty(self)

    def size(self):
        return _bishop.ParticleGroupA_size(self)

    def swap(self, v):
        return _bishop.ParticleGroupA_swap(self, v)

    def begin(self):
        return _bishop.ParticleGroupA_begin(self)

    def end(self):
        return _bishop.ParticleGroupA_end(self)

    def rbegin(self):
        return _bishop.ParticleGroupA_rbegin(self)

    def rend(self):
        return _bishop.ParticleGroupA_rend(self)

    def clear(self):
        return _bishop.ParticleGroupA_clear(self)

    def get_allocator(self):
        return _bishop.ParticleGroupA_get_allocator(self)

    def pop_back(self):
        return _bishop.ParticleGroupA_pop_back(self)

    def erase(self, *args):
        return _bishop.ParticleGroupA_erase(self, *args)

    def __init__(self, *args):
        this = _bishop.new_ParticleGroupA(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _bishop.ParticleGroupA_push_back(self, x)

    def front(self):
        return _bishop.ParticleGroupA_front(self)

    def back(self):
        return _bishop.ParticleGroupA_back(self)

    def assign(self, n, x):
        return _bishop.ParticleGroupA_assign(self, n, x)

    def resize(self, *args):
        return _bishop.ParticleGroupA_resize(self, *args)

    def insert(self, *args):
        return _bishop.ParticleGroupA_insert(self, *args)

    def reserve(self, n):
        return _bishop.ParticleGroupA_reserve(self, n)

    def capacity(self):
        return _bishop.ParticleGroupA_capacity(self)
    __swig_destroy__ = _bishop.delete_ParticleGroupA
    __del__ = lambda self: None
ParticleGroupA_swigregister = _bishop.ParticleGroupA_swigregister
ParticleGroupA_swigregister(ParticleGroupA)


def makeScalarGrid(rg, defValue):
    return _bishop.makeScalarGrid(rg, defValue)
makeScalarGrid = _bishop.makeScalarGrid

def makeVectorGrid(rg, defValue):
    return _bishop.makeVectorGrid(rg, defValue)
makeVectorGrid = _bishop.makeVectorGrid

def makeColorGrid(rg, defValue):
    return _bishop.makeColorGrid(rg, defValue)
makeColorGrid = _bishop.makeColorGrid

def makeMatrixGrid(rg, defValue):
    return _bishop.makeMatrixGrid(rg, defValue)
makeMatrixGrid = _bishop.makeMatrixGrid

def Blur(*args):
    return _bishop.Blur(*args)
Blur = _bishop.Blur

def writeScalarGrid(grid, fname):
    return _bishop.writeScalarGrid(grid, fname)
writeScalarGrid = _bishop.writeScalarGrid

def readScalarGrid(grid, fname):
    return _bishop.readScalarGrid(grid, fname)
readScalarGrid = _bishop.readScalarGrid

def writeVectorGrid(grid, fname):
    return _bishop.writeVectorGrid(grid, fname)
writeVectorGrid = _bishop.writeVectorGrid

def readVectorGrid(grid, fname):
    return _bishop.readVectorGrid(grid, fname)
readVectorGrid = _bishop.readVectorGrid

def writeGrid(*args):
    return _bishop.writeGrid(*args)
writeGrid = _bishop.writeGrid

def writeColorGrid(grid, fname):
    return _bishop.writeColorGrid(grid, fname)
writeColorGrid = _bishop.writeColorGrid

def readGrid(*args):
    return _bishop.readGrid(*args)
readGrid = _bishop.readGrid

def readColorGrid(grid, fname):
    return _bishop.readColorGrid(grid, fname)
readColorGrid = _bishop.readColorGrid

def optimumVelocityFromGrad(m, gb, nb_iterations):
    return _bishop.optimumVelocityFromGrad(m, gb, nb_iterations)
optimumVelocityFromGrad = _bishop.optimumVelocityFromGrad

def gradientStretchCMFromGrad(m, gb, nb_iterations, T, nbgs):
    return _bishop.gradientStretchCMFromGrad(m, gb, nb_iterations, T, nbgs)
gradientStretchCMFromGrad = _bishop.gradientStretchCMFromGrad

def stampPointWisps(grid, particles):
    return _bishop.stampPointWisps(grid, particles)
stampPointWisps = _bishop.stampPointWisps

def stampBlurredWisps(*args):
    return _bishop.stampBlurredWisps(*args)
stampBlurredWisps = _bishop.stampBlurredWisps

def stampParticles(grid, particles, timestep):
    return _bishop.stampParticles(grid, particles, timestep)
stampParticles = _bishop.stampParticles

def gridStatistics(*args):
    return _bishop.gridStatistics(*args)
gridStatistics = _bishop.gridStatistics

def gridMean(g):
    return _bishop.gridMean(g)
gridMean = _bishop.gridMean

def gridStdDev(g):
    return _bishop.gridStdDev(g)
gridStdDev = _bishop.gridStdDev

def gridMax(g):
    return _bishop.gridMax(g)
gridMax = _bishop.gridMax

def gridMin(g):
    return _bishop.gridMin(g)
gridMin = _bishop.gridMin

def getNbAvailablePartitions(g):
    return _bishop.getNbAvailablePartitions(g)
getNbAvailablePartitions = _bishop.getNbAvailablePartitions

def getNbUsedPartitions(g):
    return _bishop.getNbUsedPartitions(g)
getNbUsedPartitions = _bishop.getNbUsedPartitions

def getPartitionSize(g):
    return _bishop.getPartitionSize(g)
getPartitionSize = _bishop.getPartitionSize

def GreenConvolve(m, result):
    return _bishop.GreenConvolve(m, result)
GreenConvolve = _bishop.GreenConvolve

def GreenSurfaceConvolve(X, result):
    return _bishop.GreenSurfaceConvolve(X, result)
GreenSurfaceConvolve = _bishop.GreenSurfaceConvolve

def makeGrid(*args):
    return _bishop.makeGrid(*args)
makeGrid = _bishop.makeGrid

def makeFrustumGrid(*args):
    return _bishop.makeFrustumGrid(*args)
makeFrustumGrid = _bishop.makeFrustumGrid

def makeScalarFrustumGrid(rg, defValue):
    return _bishop.makeScalarFrustumGrid(rg, defValue)
makeScalarFrustumGrid = _bishop.makeScalarFrustumGrid

def makeVectorFrustumGrid(rg, defValue):
    return _bishop.makeVectorFrustumGrid(rg, defValue)
makeVectorFrustumGrid = _bishop.makeVectorFrustumGrid

def makeColorFrustumGrid(rg, defValue):
    return _bishop.makeColorFrustumGrid(rg, defValue)
makeColorFrustumGrid = _bishop.makeColorFrustumGrid

def makeMatrixFrustumGrid(rg, defValue):
    return _bishop.makeMatrixFrustumGrid(rg, defValue)
makeMatrixFrustumGrid = _bishop.makeMatrixFrustumGrid

def getIntervalSet(*args):
    return _bishop.getIntervalSet(*args)
getIntervalSet = _bishop.getIntervalSet

def getMesh(fname):
    return _bishop.getMesh(fname)
getMesh = _bishop.getMesh

def mesh2ls(mesh, gb):
    return _bishop.mesh2ls(mesh, gb)
mesh2ls = _bishop.mesh2ls

def ls2mesh(sf, gb):
    return _bishop.ls2mesh(sf, gb)
ls2mesh = _bishop.ls2mesh

def cross_product(v1, v2):
    return _bishop.cross_product(v1, v2)
cross_product = _bishop.cross_product

def dot_product(v1, v2):
    return _bishop.dot_product(v1, v2)
dot_product = _bishop.dot_product

def __mul__(*args):
    return _bishop.__mul__(*args)
__mul__ = _bishop.__mul__

def mat_prod_vec(m, v):
    return _bishop.mat_prod_vec(m, v)
mat_prod_vec = _bishop.mat_prod_vec

def vec_prod_mat(v, m):
    return _bishop.vec_prod_mat(v, m)
vec_prod_mat = _bishop.vec_prod_mat

def __and__(v1, v2):
    return _bishop.__and__(v1, v2)
__and__ = _bishop.__and__

def outer_product(v1, v2, m):
    return _bishop.outer_product(v1, v2, m)
outer_product = _bishop.outer_product

def exp(*args):
    return _bishop.exp(*args)
exp = _bishop.exp

def sinch(*args):
    return _bishop.sinch(*args)
sinch = _bishop.sinch

def inverse(*args):
    return _bishop.inverse(*args)
inverse = _bishop.inverse

def det(*args):
    return _bishop.det(*args)
det = _bishop.det

def trace(m):
    return _bishop.trace(m)
trace = _bishop.trace

def rotation(*args):
    return _bishop.rotation(*args)
rotation = _bishop.rotation

def unitMatrix():
    return _bishop.unitMatrix()
unitMatrix = _bishop.unitMatrix

def Pauli0():
    return _bishop.Pauli0()
Pauli0 = _bishop.Pauli0

def Pauli1():
    return _bishop.Pauli1()
Pauli1 = _bishop.Pauli1

def Pauli2():
    return _bishop.Pauli2()
Pauli2 = _bishop.Pauli2

def orderedSinch(*args):
    return _bishop.orderedSinch(*args)
orderedSinch = _bishop.orderedSinch

def RMIncompressibleGradient(gf, g, S, nS, base_nS, threshold, div_width, nbblur):
    return _bishop.RMIncompressibleGradient(gf, g, S, nS, base_nS, threshold, div_width, nbblur)
RMIncompressibleGradient = _bishop.RMIncompressibleGradient
class ParticleGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleGroup, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_ParticleGroup()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_ParticleGroup
    __del__ = lambda self: None

    def create_attr(self, *args):
        return _bishop.ParticleGroup_create_attr(self, *args)

    def add_particle(self):
        return _bishop.ParticleGroup_add_particle(self)

    def add_particles(self, nb):
        return _bishop.ParticleGroup_add_particles(self, nb)

    def nb_particles(self):
        return _bishop.ParticleGroup_nb_particles(self)

    def get_int_attr(self, nam, p):
        return _bishop.ParticleGroup_get_int_attr(self, nam, p)

    def get_float_attr(self, nam, p):
        return _bishop.ParticleGroup_get_float_attr(self, nam, p)

    def get_vector_attr(self, nam, p):
        return _bishop.ParticleGroup_get_vector_attr(self, nam, p)

    def get_color_attr(self, nam, p):
        return _bishop.ParticleGroup_get_color_attr(self, nam, p)

    def id(self, p):
        return _bishop.ParticleGroup_id(self, p)

    def pos(self, p):
        return _bishop.ParticleGroup_pos(self, p)

    def vel(self, p):
        return _bishop.ParticleGroup_vel(self, p)

    def ci(self, p):
        return _bishop.ParticleGroup_ci(self, p)

    def pscale(self, p):
        return _bishop.ParticleGroup_pscale(self, p)

    def density(self, p):
        return _bishop.ParticleGroup_density(self, p)

    def roughness(self, p):
        return _bishop.ParticleGroup_roughness(self, p)

    def octaves(self, p):
        return _bishop.ParticleGroup_octaves(self, p)

    def fjump(self, p):
        return _bishop.ParticleGroup_fjump(self, p)

    def frequency(self, p):
        return _bishop.ParticleGroup_frequency(self, p)

    def translate(self, p):
        return _bishop.ParticleGroup_translate(self, p)

    def set_attr(self, *args):
        return _bishop.ParticleGroup_set_attr(self, *args)

    def set_id(self, p, value):
        return _bishop.ParticleGroup_set_id(self, p, value)

    def set_pos(self, p, value):
        return _bishop.ParticleGroup_set_pos(self, p, value)

    def set_vel(self, p, value):
        return _bishop.ParticleGroup_set_vel(self, p, value)

    def set_ci(self, p, value):
        return _bishop.ParticleGroup_set_ci(self, p, value)

    def set_pscale(self, p, value):
        return _bishop.ParticleGroup_set_pscale(self, p, value)

    def set_density(self, p, value):
        return _bishop.ParticleGroup_set_density(self, p, value)

    def set_roughness(self, p, value):
        return _bishop.ParticleGroup_set_roughness(self, p, value)

    def set_octaves(self, p, value):
        return _bishop.ParticleGroup_set_octaves(self, p, value)

    def set_fjump(self, p, value):
        return _bishop.ParticleGroup_set_fjump(self, p, value)

    def set_frequency(self, p, value):
        return _bishop.ParticleGroup_set_frequency(self, p, value)

    def set_translate(self, p, value):
        return _bishop.ParticleGroup_set_translate(self, p, value)

    def show_int_attrs(self):
        return _bishop.ParticleGroup_show_int_attrs(self)

    def show_float_attrs(self):
        return _bishop.ParticleGroup_show_float_attrs(self)

    def show_vector_attrs(self):
        return _bishop.ParticleGroup_show_vector_attrs(self)

    def show_color_attrs(self):
        return _bishop.ParticleGroup_show_color_attrs(self)

    def show_all_attrs(self):
        return _bishop.ParticleGroup_show_all_attrs(self)

    def attr_exists(self, nam):
        return _bishop.ParticleGroup_attr_exists(self, nam)

    def int_attr_exists(self, nam):
        return _bishop.ParticleGroup_int_attr_exists(self, nam)

    def float_attr_exists(self, nam):
        return _bishop.ParticleGroup_float_attr_exists(self, nam)

    def vector_attr_exists(self, nam):
        return _bishop.ParticleGroup_vector_attr_exists(self, nam)

    def color_attr_exists(self, nam):
        return _bishop.ParticleGroup_color_attr_exists(self, nam)

    def merge(self, g):
        return _bishop.ParticleGroup_merge(self, g)
ParticleGroup_swigregister = _bishop.ParticleGroup_swigregister
ParticleGroup_swigregister(ParticleGroup)

class PointCloud(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointCloud, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointCloud, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bishop.new_PointCloud(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PointCloud
    __del__ = lambda self: None

    def __str__(self):
        return _bishop.PointCloud___str__(self)

    def __doc__(self):
        return _bishop.PointCloud___doc__(self)

    def __add__(self, e2):
        return _bishop.PointCloud___add__(self, e2)
PointCloud_swigregister = _bishop.PointCloud_swigregister
PointCloud_swigregister(PointCloud)

class PointCloudBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointCloudBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointCloudBase, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bishop.new_PointCloudBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bishop.delete_PointCloudBase
    __del__ = lambda self: None
PointCloudBase_swigregister = _bishop.PointCloudBase_swigregister
PointCloudBase_swigregister(PointCloudBase)


def makePointCloud(nb):
    return _bishop.makePointCloud(nb)
makePointCloud = _bishop.makePointCloud

def create_attr(*args):
    return _bishop.create_attr(*args)
create_attr = _bishop.create_attr

def add_particle(p):
    return _bishop.add_particle(p)
add_particle = _bishop.add_particle

def add_particles(p, nb):
    return _bishop.add_particles(p, nb)
add_particles = _bishop.add_particles

def nb_particles(p):
    return _bishop.nb_particles(p)
nb_particles = _bishop.nb_particles

def get_int_attr(p, nam, i):
    return _bishop.get_int_attr(p, nam, i)
get_int_attr = _bishop.get_int_attr

def get_float_attr(p, nam, i):
    return _bishop.get_float_attr(p, nam, i)
get_float_attr = _bishop.get_float_attr

def get_vector_attr(p, nam, i):
    return _bishop.get_vector_attr(p, nam, i)
get_vector_attr = _bishop.get_vector_attr

def get_color_attr(p, nam, i):
    return _bishop.get_color_attr(p, nam, i)
get_color_attr = _bishop.get_color_attr

def id(p, i):
    return _bishop.id(p, i)
id = _bishop.id

def pos(p, i):
    return _bishop.pos(p, i)
pos = _bishop.pos

def vel(p, i):
    return _bishop.vel(p, i)
vel = _bishop.vel

def ci(p, i):
    return _bishop.ci(p, i)
ci = _bishop.ci

def pscale(p, i):
    return _bishop.pscale(p, i)
pscale = _bishop.pscale

def density(p, i):
    return _bishop.density(p, i)
density = _bishop.density

def roughness(p, i):
    return _bishop.roughness(p, i)
roughness = _bishop.roughness

def octaves(p, i):
    return _bishop.octaves(p, i)
octaves = _bishop.octaves

def fjump(p, i):
    return _bishop.fjump(p, i)
fjump = _bishop.fjump

def frequency(p, i):
    return _bishop.frequency(p, i)
frequency = _bishop.frequency

def translate(*args):
    return _bishop.translate(*args)
translate = _bishop.translate

def set_attr(*args):
    return _bishop.set_attr(*args)
set_attr = _bishop.set_attr

def set_id(p, i, value):
    return _bishop.set_id(p, i, value)
set_id = _bishop.set_id

def set_pos(p, i, value):
    return _bishop.set_pos(p, i, value)
set_pos = _bishop.set_pos

def set_vel(p, i, value):
    return _bishop.set_vel(p, i, value)
set_vel = _bishop.set_vel

def set_ci(p, i, value):
    return _bishop.set_ci(p, i, value)
set_ci = _bishop.set_ci

def set_pscale(p, i, value):
    return _bishop.set_pscale(p, i, value)
set_pscale = _bishop.set_pscale

def set_density(p, i, value):
    return _bishop.set_density(p, i, value)
set_density = _bishop.set_density

def set_roughness(p, i, value):
    return _bishop.set_roughness(p, i, value)
set_roughness = _bishop.set_roughness

def set_octaves(p, i, value):
    return _bishop.set_octaves(p, i, value)
set_octaves = _bishop.set_octaves

def set_fjump(p, i, value):
    return _bishop.set_fjump(p, i, value)
set_fjump = _bishop.set_fjump

def set_frequency(p, i, value):
    return _bishop.set_frequency(p, i, value)
set_frequency = _bishop.set_frequency

def set_translate(p, i, value):
    return _bishop.set_translate(p, i, value)
set_translate = _bishop.set_translate

def show_int_attrs(p):
    return _bishop.show_int_attrs(p)
show_int_attrs = _bishop.show_int_attrs

def show_float_attrs(p):
    return _bishop.show_float_attrs(p)
show_float_attrs = _bishop.show_float_attrs

def show_vector_attrs(p):
    return _bishop.show_vector_attrs(p)
show_vector_attrs = _bishop.show_vector_attrs

def show_color_attrs(p):
    return _bishop.show_color_attrs(p)
show_color_attrs = _bishop.show_color_attrs

def show_all_attrs(p):
    return _bishop.show_all_attrs(p)
show_all_attrs = _bishop.show_all_attrs

def attr_exists(p, nam):
    return _bishop.attr_exists(p, nam)
attr_exists = _bishop.attr_exists

def int_attr_exists(p, nam):
    return _bishop.int_attr_exists(p, nam)
int_attr_exists = _bishop.int_attr_exists

def float_attr_exists(p, nam):
    return _bishop.float_attr_exists(p, nam)
float_attr_exists = _bishop.float_attr_exists

def vector_attr_exists(p, nam):
    return _bishop.vector_attr_exists(p, nam)
vector_attr_exists = _bishop.vector_attr_exists

def color_attr_exists(p, nam):
    return _bishop.color_attr_exists(p, nam)
color_attr_exists = _bishop.color_attr_exists

def merge(p, g):
    return _bishop.merge(p, g)
merge = _bishop.merge

def llc(*args):
    return _bishop.llc(*args)
llc = _bishop.llc

def urc(*args):
    return _bishop.urc(*args)
urc = _bishop.urc

def makeWispCloud(nb):
    return _bishop.makeWispCloud(nb)
makeWispCloud = _bishop.makeWispCloud

def makeNoiseCloud(nb):
    return _bishop.makeNoiseCloud(nb)
makeNoiseCloud = _bishop.makeNoiseCloud

def makePyroCloud(nb):
    return _bishop.makePyroCloud(nb)
makePyroCloud = _bishop.makePyroCloud

def writeObj(*args):
    return _bishop.writeObj(*args)
writeObj = _bishop.writeObj

def warp(*args):
    return _bishop.warp(*args)
warp = _bishop.warp

def advect(*args):
    return _bishop.advect(*args)
advect = _bishop.advect

def self_advect(pc, dt):
    return _bishop.self_advect(pc, dt)
self_advect = _bishop.self_advect

def stamp(*args):
    return _bishop.stamp(*args)
stamp = _bishop.stamp

def stampDensityVelocityColor(pc, gs, gv, gc):
    return _bishop.stampDensityVelocityColor(pc, gs, gv, gc)
stampDensityVelocityColor = _bishop.stampDensityVelocityColor

def stampDensityColor(pc, gs, gc):
    return _bishop.stampDensityColor(pc, gs, gc)
stampDensityColor = _bishop.stampDensityColor

def stampNoise(*args):
    return _bishop.stampNoise(*args)
stampNoise = _bishop.stampNoise
# This file is compatible with both classic and new-style classes.



docDocumentationList = []


def newDocumentationItem( item, ret, sig, desc, seealso ):
	docItem = {
	"item":item,
	"return":ret,
	"signature":sig,
	"description":desc,
	"seealso":seealso
	}
	docDocumentationList.append( docItem.copy() )

def bishopdocLongList( docitem ):
	listing = docitem["return"] + " " + docitem["item"] + "( "
	signature = docitem["signature"]
	for i in range(0,len(signature)):
		listing += signature[i] + " (" + str(i+1) + ")"
		if i < len(signature)-1:
			listing += ", "
	listing +=  " )"
	listing += "\n\n"
	listing += docitem["description"] + "\n\n"
	if docitem["seealso"] != "":
		listing += "See also: " + docitem["seealso"] + "\n\n"
	return listing




def bishophelp( item ):
	nbFoundItems = 0
	for docitem in docDocumentationList:
		if str(docitem["item"]).lower().find( str(item).lower() ) >= 0:
			nbFoundItems += 1
			listing = "--------------------------------------------------------------\n\n"
			listing += bishopdocLongList( docitem )
			print(listing)
	if nbFoundItems > 0:
		print("--------------------------------------------------------------\n\n")



def bishopsearch( item ):
	nbFoundItems = 0
	for docitem in docDocumentationList:
		if str(docitem["item"]).lower().find( str(item).lower() ) >= 0 or str(docitem["description"]).lower().find( str(item).lower() ) >= 0:
			nbFoundItems += 1
			listing = "--------------------------------------------------------------\n\n"
			listing += bishopdocLongList( docitem )
			print(listing)
	if nbFoundItems > 0:
		print("--------------------------------------------------------------\n\n")





IN = "integer"
FL = "float"
VE = "Vector"
VO = "No Retrun"
SF = "ScalarField"
VF = "VectorField"
MF = "MatrixField"
CF = "ColorField"
FF = "FormField"
CO = "Color"
MA = "Matrix"
FO = "Form"
ST = "String"
SG = "ScalarGrid"
VG = "VectorGrid"
CG = "ColorGrid"
MG = "MatrixGrid"
GB = "GridBox"


newDocumentationItem( "evaluate", FL, [SF, VE], 
          "Evaluates the scalar field (1) at the spatial position (2) and returns the value.",
          ""
          )

newDocumentationItem( "evaluate", VE, [VF, VE], 
          "Evaluates the vector field (1) at the spatial position (2) and returns the value.",
          ""
          )


newDocumentationItem( "evaluate", CO, [CF, VE], 
          "Evaluates the color field (1) at the spatial position (2) and returns the value.",
          ""
          )

newDocumentationItem( "evaluate", MA, [MF, VE], 
          "Evaluates the matrix field (1) at the spatial position (2) and returns the value.",
          ""
          )

newDocumentationItem( "evaluate", FO, [FF, VE], 
          "Evaluates the form field (1) at the spatial position (2) and returns the value.",
          ""
          )

newDocumentationItem( "grad", VF, [SF], 
          "Returns a vector field of the gradient of the scalar field (1)",
          "curl, div"
          )

newDocumentationItem( "grad", MF, [VF], 
          "Returns a matrix field of the gradient of the vector field (1)",
          ""
          )

newDocumentationItem( "grad", FF, [FF], 
          "Returns a form field of the exterior derivative of the form field (1)",
          ""
          )

newDocumentationItem( "constant", SF, [FL], 
          "Returns a scalar field that always evaluates to the value of the float (1)",
          ""
          )

newDocumentationItem( "constant", VF, [VE], 
          "Returns a vector field that always evaluates to the value of the vector (1)",
          ""
          )

newDocumentationItem( "constant", MF, [MA], 
          "Returns a matrix field that always evaluates to the value of the matrix (1)",
          ""
          )

newDocumentationItem( "constant", CF, [CO], 
          "Returns a color field that always evaluates to the value of the color (1)",
          ""
          )

newDocumentationItem( "constant", FF, [FO], 
          "Returns a form field that always evaluates to the value of the form (1)",
          ""
          )

newDocumentationItem( "scale", SF, [SF,VE], 
          "Generates a scalar field using a scaling transformation on the scalar field (1).\n" +
	  "The evaluation position is scaled in each direction by the scaling parameters in (2).",
          "translate, rotate"
          )

newDocumentationItem( "scale", VF, [VF,VE], 
          "Generates a vector field using a scaling transformation on the vector field (1).\n" +
	  "The evaluation position is scaled in each direction by the scaling parameters in (2).\n"+
	  "Inverse scaling is applied to the value of the vector field.",
          "translate, rotate"
          )

newDocumentationItem( "scale", CF, [CF,VE], 
          "Generates a color field using a scaling transformation on the color field (1).\n" +
	  "The evaluation position is scaled in each direction by the scaling parameters in (2).",
          "translate, rotate"
          )

newDocumentationItem( "scale", FF, [FF,VE], 
          "Generates a form field using a scaling transformation on the form field (1).\n" +
	  "The evaluation position is scaled in each direction by the scaling parameters in (2).",
          "translate, rotate"
          )


newDocumentationItem( "translate", SF, [SF,VE], 
          "Generates a scalar field using a translation by (2) on the scalar field (1).",
          "scale, rotate"
          )

newDocumentationItem( "translate", VF, [VF,VE], 
          "Generates a vector field using a translation by (2) on the vector field (1).",
          "scale, rotate"
          )

newDocumentationItem( "translate", CF, [CF,VE], 
          "Generates a color field using a translation by (2) on the color field (1).",
          "scale, rotate"
          )

newDocumentationItem( "translate", FF, [FF,VE], 
          "Generates a form field using a translation by (2) on the form field (1).",
          "scale, rotate"
          )




newDocumentationItem( "rotate", SF, [SF,VE], 
          "Generates a scalar field using a rotation by (2) on the scalar field (1).\n" +
	  "The direction of the Vector (2) is the axis of rotation, and its magnitude\n" +
	  "is the angle of rotation in radians.",
          "scale, translate"
          )

newDocumentationItem( "rotate", VF, [VF,VE], 
          "Generates a vector field using a rotation by (2) on the vector field (1).\n" +
	  "The direction of the Vector (2) is the axis of rotation, and its magnitude\n" +
	  "is the angle of rotation in radians.",
          "scale, translate"
          )

newDocumentationItem( "rotate", CF, [CF,VE], 
          "Generates a color field using a rotation by (2) on the color field (1).\n" +
	  "The direction of the Vector (2) is the axis of rotation, and its magnitude\n" +
	  "is the angle of rotation in radians.",
          "scale, translate"
          )

newDocumentationItem( "rotate", FF, [FF,VE], 
          "Generates a form field using a rotation by (2) on the form field (1).\n" +
	  "The direction of the Vector (2) is the axis of rotation, and its magnitude\n" +
	  "is the angle of rotation in radians.",
          "scale, translate"
          )


newDocumentationItem( "rotation", MF, [VE], 
          "Generates a matrix field of of a rotation by vector field in (1).\n" +
	  "The direction of the vector field (1) is the axis of rotation, and\n" +
	  "its magnitude is the angle of rotation in radians.",
          "scale, translate, rotate"
          )


newDocumentationItem( "exp", SF, [SF], 
          "Generates a scalar field that is the exponential of the values of the scalar field (1).",
          ""
          )

newDocumentationItem( "exp", MF, [MF], 
          "Generates a matrix field that is the exponential of the values of the matrix field (1).",
          ""
          )


newDocumentationItem( "det", SF, [MF], 
          "Generates a scalar field that is the determinant of the values of the matrix field (1).",
          ""
          )


newDocumentationItem( "report", SF, [SF,ST], 
          "Generates a scalar field that returns the same value as the scalar field (1),\n" +
	  "but also prints out the string (2), location of evaluation, and the evaluated value.",
          ""
          )

newDocumentationItem( "report", VF, [VF,ST], 
          "Generates a vector field that returns the same value as the vector field (1),\n" +
	  "but also prints out the string (2), location of evaluation, and the evaluated value.",
          ""
          )

newDocumentationItem( "report", CF, [CF,ST], 
          "Generates a color field that returns the same value as the color field (1),\n" +
	  "but also prints out the string (2), location of evaluation, and the evaluated value.",
          ""
          )

newDocumentationItem( "report", FF, [FF,ST], 
          "Generates a form field that returns the same value as the form field (1),\n" +
	  "but also prints out the string (2), location of evaluation, and the evaluated value.",
          ""
          )


newDocumentationItem( "negate", SF, [SF], 
          "Generates a scalar field that returns the negative of the scalar field (1).",
          ""
          )

newDocumentationItem( "negate", VF, [VF], 
          "Generates a vector field that returns the negative of the vector field (1).",
          ""
          )

newDocumentationItem( "negate", CF, [CF], 
          "Generates a color field that returns the negative of the color field (1).",
          ""
          )

newDocumentationItem( "negate", MF, [MF], 
          "Generates a matrix field that returns the negative of the matrix field (1).",
          ""
          )

newDocumentationItem( "negate", FF, [FF], 
          "Generates a form field that returns the negative of the form field (1).",
          ""
          )


newDocumentationItem( "abs", SF, [SF], 
          "Generates a scalar field that returns the absolute value of the scalar field (1).",
          ""
          )

newDocumentationItem( "abs", SF, [VF], 
          "Generates a scalar field that returns the magnitude of the vector field (1).",
          ""
          )

newDocumentationItem( "which", SF, [SF,SF,SF], 
          "Generates a scalar field that evaluates to the value of either scalar field (2)\n" +
	  "or scalar field (3) depending on the value of scalar field (1). A positive value\n" +
	  "for (1) chooses the value from (2), negative chooses the value from (3). The unchosen\n" +
	  "field is not evaluated.",
          ""
          )

newDocumentationItem( "which", VF, [SF,VF,VF], 
          "Generates a vector field that evaluates to the value of either vector field (2)\n" +
	  "or vector field (3) depending on the value of scalar field (1). A positive value\n" +
	  "for (1) chooses the value from (2), negative chooses the value from (3). The unchosen\n" +
	  "field is not evaluated.",
          ""
          )

newDocumentationItem( "which", CF, [SF,CF,CF], 
          "Generates a color field that evaluates to the value of either color field (2)\n" +
	  "or color field (3) depending on the value of scalar field (1). A positive value\n" +
	  "for (1) chooses the value from (2), negative chooses the value from (3). The unchosen\n" +
	  "field is not evaluated.",
          ""
          )

newDocumentationItem( "which", FF, [SF,FF,FF], 
          "Generates a form field that evaluates to the value of either form field (2)\n" +
	  "or form field (3) depending on the value of scalar field (1). A positive value\n" +
	  "for (1) chooses the value from (2), negative chooses the value from (3). The unchosen\n" +
	  "field is not evaluated.",
          ""
          )



newDocumentationItem( "multiply", SF, [SF,FL], 
          "Generates a scalar field that returns the product of the scalar field (1)\n" +
	  "and the float value (2).",
          ""
          )

newDocumentationItem( "multiply", SF, [SF,SF], 
          "Generates a scalar field that returns the product of the scalar field (1)\n" +
	  "and the scalar field (2).",
          ""
          )

newDocumentationItem( "multiply", VF, [VF,FL], 
          "Generates a vector field that returns the product of the vector field (1)\n" +
	  "and the float value (2).",
          ""
          )

newDocumentationItem( "multiply", VF, [VF,SF], 
          "Generates a vector field that returns the product of the vector field (1)\n" +
	  "and the scalar field (2).",
          ""
          )

newDocumentationItem( "multiply", CF, [CF,FL], 
          "Generates a color field that returns the product of the color field (1)\n" +
	  "and the float value (2).",
          ""
          )

newDocumentationItem( "multiply", CF, [CF,SF], 
          "Generates a color field that returns the product of the color field (1)\n" +
	  "and the scalar field (2).",
          ""
          )

newDocumentationItem( "multiply", CF, [CF,CF], 
          "Generates a color field that returns the product of the color field (1)\n" +
	  "and the color field (2). This is a component-by-component multiplication.",
          ""
          )


newDocumentationItem( "multiply", MF, [MF,FL], 
          "Generates a matrix field that returns the product of the matrix field (1)\n" +
	  "and the float value (2).",
          ""
          )

newDocumentationItem( "multiply", MF, [MF,SF], 
          "Generates a matrix field that returns the product of the matrix field (1)\n" +
	  "and the scalar field (2).",
          ""
          )

newDocumentationItem( "multiply", FF, [FF,FL], 
          "Generates a form field that returns the product of the form field (1)\n" +
	  "and the float value (2).",
          ""
          )

newDocumentationItem( "multiply", FF, [FF,SF], 
          "Generates a form field that returns the product of the form field (1)\n" +
	  "and the scalar field (2).",
          ""
          )


newDocumentationItem( "divide", SF, [SF,FL], 
          "Generates a scalar field that returns the scalar field (1) divided by\n" +
	  "the float value (2).",
          ""
          )

newDocumentationItem( "divide", SF, [SF,SF], 
          "Generates a scalar field that returns the scalar field (1) divided by\n" +
	  "the scalar field (2).",
          ""
          )


newDocumentationItem( "divide", VF, [VF,FL], 
          "Generates a vector field that returns the vector field (1) divided by\n" +
	  "the float value (2).",
          ""
          )

newDocumentationItem( "divide", FF, [VF,SF], 
          "Generates a vector field that returns the vector field (1) divided by\n" +
	  "the scalar field (2).",
          ""
          )


newDocumentationItem( "divide", CF, [CF,FL], 
          "Generates a color field that returns the color field (1) divided by\n" +
	  "the float value (2).",
          ""
          )

newDocumentationItem( "divide", CF, [CF,SF], 
          "Generates a color field that returns the color field (1) divided by\n" +
	  "the scalar field (2).",
          ""
          )

newDocumentationItem( "divide", MF, [MF,FL], 
          "Generates a matrix field that returns the matrix field (1) divided by\n" +
	  "the float value (2).",
          ""
          )

newDocumentationItem( "divide", MF, [MF,SF], 
          "Generates a matrix field that returns the matrix field (1) divided by\n" +
	  "the scalar field (2).",
          ""
          )

newDocumentationItem( "divide", FF, [FF,FL], 
          "Generates a form field that returns the form field (1) divided by\n" +
	  "the float value (2).",
          ""
          )

newDocumentationItem( "divide", FF, [FF,SF], 
          "Generates a form field that returns the form field (1) divided by\n" +
	  "the scalar field (2).",
          ""
          )


newDocumentationItem( "add", SF, [SF,SF], 
          "Generates a scalar field that returns the sum of scalar fields (1) and (2).",
          ""
          )

newDocumentationItem( "add", VF, [VF,VF], 
          "Generates a vector field that returns the sum of vector fields (1) and (2).",
          ""
          )

newDocumentationItem( "add", CF, [CF,CF], 
          "Generates a color field that returns the sum of color fields (1) and (2).",
          ""
          )

newDocumentationItem( "add", MF, [MF,MF], 
          "Generates a matrix field that returns the sum of matrix fields (1) and (2).",
          ""
          )

newDocumentationItem( "add", FF, [FF,FF], 
          "Generates a form field that returns the sum of form fields (1) and (2).",
          ""
          )


newDocumentationItem( "subtract", SF, [SF,SF], 
          "Generates a scalar field that returns the difference of scalar fields (1) and (2).",
          ""
          )

newDocumentationItem( "subtract", VF, [VF,VF], 
          "Generates a vector field that returns the difference of vector fields (1) and (2).",
          ""
          )

newDocumentationItem( "subtract", CF, [CF,CF], 
          "Generates a color field that returns the difference of color fields (1) and (2).",
          ""
          )

newDocumentationItem( "subtract", MF, [MF,MF], 
          "Generates a matrix field that returns the difference of matrix fields (1) and (2).",
          ""
          )

newDocumentationItem( "subtract", FF, [FF,FF], 
          "Generates a form field that returns the difference of form fields (1) and (2).",
          ""
          )

newDocumentationItem( "Sphere", SF, [VE,FL], 
          "Generates a scalar field for the implicit function of a sphere centered at\n" +
	  "position (1) with radius (2).",
          ""
          )

newDocumentationItem( "Ellipse", SF, [VE,VE,FL,FL], 
          "Generates a scalar field for the implicit function of an ellipse centered at\n" +
	  "position (1) with radii (3) and (4).  The axis (2) is the orientation of the\n" +
	  "radius (3).",
          ""
          )

newDocumentationItem( "CsgBox", SF, [VE,FL,FL], 
          "Generates a scalar field for the implicit function of a rounded-corner box\n" +
	  "centered at position (1) with radius (2). The sharpness of the corners depends\n" +
	  "on the value of (3).  If (3) has the value 2, the box is a sphere. Higher values\n" +
	  "better define the corners of the box.",
          "CsgRectangularBox, HardBox"
          )

newDocumentationItem( "CsgRectangularBox", SF, [VE,FL,VE,FL], 
          "Similar to CsgBox, except the sides may be unequal with aspect ratios (3). The box is\n" +
	  "centered at position (1) with radius (2). The sharpness of the corners depends\n" +
	  "on the value of (4).  If (4) has the value 2, the box is an ellipse. Higher values\n" +
	  "better define the corners of the box.",
          "CsgBox, HardBox"
          )

newDocumentationItem( "HardBox", SF, [VE,VE], 
          "Generates a scalar field of the implicit function of a sharp-edged box from the\n" +
	  "intersection of six planes. The bounds of the box are the \"lower left corner\" (1)\n" +
	  "and the \"upper right corner\" (2).\n",
          "CsgBox, CsgRectangularBox, Plane"
          )

newDocumentationItem( "Cone", SF, [VE,VE,FL,FL], 
          "Generates a scalar field of the implicit function of a cone with the tip of the cone\n" +
	  "at the position (1), cone axis (2), cone length (3), and angular width (4).",
          ""
          )

newDocumentationItem( "Plane", SF, [VE,VE], 
          "Generates a scalar field of the implicit function of an infinite plane which has\n" +
	  "the position (1) in the plane, and (2) is the normal to the plane.",
          ""
          )

newDocumentationItem( "Torus", SF, [VE,VE,FL,FL], 
          "Generates a scalar field of the implicit function of a torus centered at the\n" +
	  "position (1) with axis (2), major radius (3) and minor radius (4).",
          ""
          )

newDocumentationItem( "SteinerPatch", SF, [], 
          "Generates a scalar field of the implicit function of a Steiner Patch.",
          ""
          )

newDocumentationItem( "Icosahedron", SF, [], 
          "Generates a scalar field of the implicit function of an icosahedron.",
          ""
          )

newDocumentationItem( "Cylinder", SF, [VE,FL], 
          "Generates a scalar field of the implicit function of an infinitely long cylinder\n" +
	  "centered at the origin, oriented along axis (1) with radius (2).",
          "CappedCylinder"
          )

newDocumentationItem( "CappedCylinder", SF, [VE,VE,FL,FL], 
          "Generates a scalar field of the implicit function of an cylinder with capped ends,\n" +
	  "centered at (1), oriented along axis (2) with radius (4) and length (3).",
          "Cylinder"
          )

newDocumentationItem( "Shell", SF, [SF,FL], 
          "Generates a scalar field of the implicit function of shell around scalar field (1)\n" +
	  "with thickness (2).",
          ""
          )


newDocumentationItem( "mask", SF, [SF], 
          "Generates a scalar field mask of the scalar field (1). The mask evaluates to 1\n" +
	  "if (1) evaluates to a positive value, and 0 if (1) evaluates to 0 or negative.",
          ""
          )

newDocumentationItem( "clamp", SF, [SF,FL,FL], 
          "Generates a scalar field that evaluates to that of (1), but clamped between (2) and (3).\n",
          ""
          )

newDocumentationItem( "pow", SF, [SF,FL], 
          "Generates a scalar field that evaluates to that of (1) raised to the power of (2).\n",
          ""
          )

newDocumentationItem( "pow", SF, [SF,SF], 
          "Generates a scalar field that evaluates to that of (1) raised to the power of\n" +
	  "the evaluation of (2).",
          ""
          )

newDocumentationItem( "pow", CF, [CF,FL], 
          "Generates a color field that evaluates to that of (1) raised to the power of (2)\n" +
	  "on a component-by-component basis.",
          ""
          )

newDocumentationItem( "pow", CF, [CF,SF], 
          "Generates a scalar field that evaluates to that of (1) raised to the power of\n" +
	  "the evaluation of (2) on a component-by-component basis.",
          ""
          )

newDocumentationItem( "BlinnBlend", SF, [SF,SF,FL], 
          "Generates a scalar field that is the implicit function Blinn blend of the two\n" +
	  "scalar fields (1) and (2), with threshold (3), i.e.\n" +
	  "\n" +
	  "    BlinnBlend( s1, s2, a ) = exp(s1) + exp(s2) - a",
          "exp, constant"
          )

newDocumentationItem( "Union", SF, [SF,SF], 
          "Generates a scalar field that is the Constructive Solid Geometry union of\n" +
	  "scalar fields (1) and (2).\n",
          "intersection, cutout"
          )

newDocumentationItem( "intersection", SF, [SF,SF], 
          "Generates a scalar field that is the Constructive Solid Geometry intersection of\n" +
	  "scalar fields (1) and (2).\n",
          "Union, cutout"
          )

newDocumentationItem( "cutout", SF, [SF,SF], 
          "Generates a scalar field that is the Constructive Solid Geometry cutout of\n" +
	  "scalar fields (1) and (2).\n",
          "Union, intersection"
          )

newDocumentationItem( "outer", MF, [VF,VF], 
          "Generates a matrix field that is the outer product of two vector fields (1) and (2).",
          ""
          )

newDocumentationItem( "inverse", MF, [MF], 
          "Generates a matrix field that is the matrix inverse of the matrix field (1).",
          ""
          )

newDocumentationItem( "Pyroclast", SF, [VE,FL,FL,FL,FL,FL,VE,FL,FL], 
          "Generates a scalar field of a sphere displaced pyroclastically. The displacement\n" +
	  "uses fractal summed Perlin noise. The parameters are:\n\n" +
	  "   (1)  Location of the center of the displaced sphere.\n" +
	  "   (2)  Radius of the sphere.\n" +
	  "   (3)  Amplitude of the displacements.\n" +
	  "   (4)  Number of octaves in the fractal sum.\n" +
	  "   (5)  Scaling of the spatial frequency of the noise.\n" +
	  "   (6)  Roughness of the fractal sum.\n" +
	  "   (7)  Translation vector of the Perlin noise.\n" +
	  "   (8)  Time parameter for evolving noise in time.\n" +
	  "   (9)  Power exponent to apply to the displacement noise.",
          "RadialPyroclast"
          )


newDocumentationItem( "RadialPyroclast", SF, [VE,FL,FL,FL,FL,FL,FL,FL,FL], 
          "Generates a scalar field of a sphere displaced pyroclastically. The displacement\n" +
	  "uses fractal summed Perlin noise. The parameters are:\n\n" +
	  "   (1)  Location of the center of the displaced sphere.\n" +
	  "   (2)  Radius of the sphere.\n" +
	  "   (3)  Amplitude of the displacements.\n" +
	  "   (4)  Number of octaves in the fractal sum.\n" +
	  "   (5)  Scaling of the spatial frequency of the noise.\n" +
	  "   (6)  Roughness of the fractal sum.\n" +
	  "   (7)  Radial translation amount of the Perlin noise.\n" +
	  "   (8)  Time parameter for evolving noise in time.\n" +
	  "   (9)  Power exponent to apply to the displacement noise.",
          "Pyroclast"
          )



newDocumentationItem( "SFFFTNoise", SF, [FL,FL,FL,FL,IN], 
          "A scalar field that evaluates to Gaussian random values with spatial correlations.\n" +
	  "Uses Fast Fourier Transforms to create spectral coloration of the random values.\n" +
	  "The parameters are:\n\n" +
	  "   (1)  Power law from scale fall off.\n" +
	  "   (2)  Smallest spatial scale of the noise.\n" +
	  "   (3)  Largest spatial scale of the noise.\n" +
	  "   (4)  Length scale of the peak of the spectrum.\n" +
	  "   (5)  Number of grid points for the fft, applied to all three dimentions.",
          ""
          )




newDocumentationItem( "gridded", SF, [SG], 
          "Generates a scalar field from interpolating gridded data (1).",
          ""
          )

newDocumentationItem( "gridded", VF, [VG], 
          "Generates a vector field from interpolating gridded data (1).",
          ""
          )

newDocumentationItem( "gridded", CF, [CG], 
          "Generates a color field from interpolating gridded data (1).",
          ""
          )

newDocumentationItem( "gridded", MF, [MG], 
          "Generates a matrix field from interpolating gridded data (1).",
          ""
          )

newDocumentationItem( "advect", SF, [SF,VF,FL], 
          "Advect scalar field (1) via Semi-Lagrangian advection using the\n" +
	  "velocity field (2) and time step (3).",
          "warp"
          )
newDocumentationItem( "advect", VF, [VF,VF,FL], 
          "Advect vector field (1) via Semi-Lagrangian advection using the\n" +
	  "velocity field (2) and time step (3).",
          "warp"
          )

newDocumentationItem( "advect", CF, [CF,VF,FL], 
          "Advect color field (1) via Semi-Lagrangian advection using the\n" +
	  "velocity field (2) and time step (3).",
          "warp"
          )

newDocumentationItem( "advect", MF, [MF,VF,FL], 
          "Advect matrix field (1) via Semi-Lagrangian advection using the\n" +
	  "velocity field (2) and time step (3).",
          "warp"
          )

newDocumentationItem( "advect", FF, [FF,VF,FL], 
          "Advect form field (1) via Semi-Lagrangian advection using the\n" +
	  "velocity field (2) and time step (3).",
          "warp"
          )

newDocumentationItem( "warp", SF, [SF,VF], 
          "Remap the scalar field (1) using the mapping field (2).",
          "advect"
          )

newDocumentationItem( "warp", VF, [VF,VF], 
          "Remap the vector field (1) using the mapping field (2).",
          "advect"
          )

newDocumentationItem( "warp", CF, [CF,VF], 
          "Remap the color field (1) using the mapping field (2).",
          "advect"
          )

newDocumentationItem( "warp", MF, [MF,VF], 
          "Remap the matrix field (1) using the mapping field (2).",
          "advect"
          )

newDocumentationItem( "warp", FF, [FF,VF], 
          "Remap the form field (1) using the mapping field (2).",
          "advect"
          )


newDocumentationItem( "Periodic", SF, [SF,VE,VE], 
          "Make scalar field (1) periodic, centered on the point (2), with\n" +
	  "period length (3) in each direction.",
          ""
          )

newDocumentationItem( "Periodic", VF, [VF,VE,VE], 
          "Make vector field (1) periodic, centered on the point (2), with\n" +
	  "period length (3) in each direction.",
          ""
          )

newDocumentationItem( "Periodic", CF, [CF,VE,VE], 
          "Make color field (1) periodic, centered on the point (2), with\n" +
	  "period length (3) in each direction.",
          ""
          )

newDocumentationItem( "Periodic", FF, [FF,VE,VE], 
          "Make form field (1) periodic, centered on the point (2), with\n" +
	  "period length (3) in each direction.",
          ""
          )


newDocumentationItem( "wedge", FF, [FF,FF], 
	  "Wedge (outer) product of two form fields.",
          ""
          )


newDocumentationItem( "start", FF, [FF], 
	  "Hodge star of a form field.",
          ""
          )

newDocumentationItem( "contraction", FF, [VE,FF], 
	  "Contraction of a form field with a vector field.",
          ""
          )

newDocumentationItem( "dot", SF, [VF,VF], 
	  "Inner product of two vector fields.",
          ""
          )

newDocumentationItem( "unitvector", VF, [VF], 
	  "Generates a unit vector field from the vector field (1).",
          ""
          )

newDocumentationItem( "identity", VF, [], 
	  "Generates a vector field that evaluates to the evaluation position.",
          ""
          )

newDocumentationItem( "ImplicitSurfacePoint", VF, [SF,FL,IN], 
	  "Vector field that returns the corresponding position on the implicit surface (1)\n" +
	  "using (3) reversals and maximum step size of (2). ",
          ""
          )

newDocumentationItem( "cross", VF, [VF,VF], 
	  "Generates a vector field that evaluates to the cross product of the input vector fields.",
          ""
          )

newDocumentationItem( "div", SF, [VF], 
	  "Generates a scalar field that evaluates to the divergence of the input vector field.",
          ""
          )

newDocumentationItem( "curl", VF, [VF], 
	  "Generates a vector field that evaluates to the curl of the input vector field.",
          ""
          )

newDocumentationItem( "ContinuedFractionDisplacement", VF, [VF,IN], 
	  "Generates a vector field that evaluates to an iterative approximation of the inverse\n" +
	  "displacement. (1) is the displacement, and (2) is the number of iterations to solve for\n" +
	  "the inverse map. The displacement is frequently used to evaluate a field at a warped location,\n" +
	  "i.e. the warp function using a map X is\n\n" +
	  "   warp( f, X )  =  f( X )\n\n" +
	  "For some applications the inverse Y of the map X is needed, defined as\n\n" +
	  "   Y(X) = identity()\n\n" +
	  "ContinuedFractionDisplacement is an algorithm for constructing Y from the displacement field\n" +
	  "dX = X - x.",
          "warp,advect"
          )

newDocumentationItem( "XYZ", VF, [SF,SF,SF], 
	  "Generates a vector field whose components are the scalar fields (1), (2), and (3).\n" +
	  "Identical to the function \"component\"",
          "component"
          )

newDocumentationItem( "Chroma", CF, [CF], 
	  "Generates a color field consisting of the chroma of the input color field (1).",
          ""
          )

newDocumentationItem( "Blackbody", CF, [SF], 
	  "Generates a color field that returns the Planckian Locus blackbody color in XIE color space.\n" +
	  "The input scalar field (1) serves as the temperature in K.",
          ""
          )

newDocumentationItem( "RGB", CF, [SF,SF,SF], 
	  "Generates a color field whose components are the scalar fields (1), (2), and (3).",
          ""
          )

newDocumentationItem( "DetGrad", SF, [VF], 
	  "Generates a scalar field that evaluates to the determinant of the gradient of the\n" +
	  "vector field (1).",
          ""
          )

newDocumentationItem( "xComponent", SF, [VF], 
	  "Generates a scalar field that evaluates to the x component of the vector field (1).",
          ""
          )

newDocumentationItem( "yComponent", SF, [VF], 
	  "Generates a scalar field that evaluates to the y component of the vector field (1).",
          ""
          )

newDocumentationItem( "zComponent", SF, [VF], 
	  "Generates a scalar field that evaluates to the z component of the vector field (1).",
          ""
          )

newDocumentationItem( "component", VF, [SF,SF,SF], 
	  "Generates a vector field whose components are the scalar fields (1), (2), and (3).\n" +
	  "Identical to the function \"XYZ\"",
          "XYZ"
          )

newDocumentationItem( "zeroComponent", SF, [FF], 
	  "Generates a scalar field that evaluates to the 0-form part of the form field (1).",
          "oneComponent,twoComponent,threeComponent,component"
          )

newDocumentationItem( "oneComponent", VF, [FF], 
	  "Generates a vector field that evaluates to the 1-form part of the form field (1).",
          "zeroComponent,twoComponent,threeComponent,component"
          )

newDocumentationItem( "twoComponent", VF, [FF], 
	  "Generates a vector field that evaluates to the 2-form part of the form field (1).",
          "zeroComponent,oneComponent,threeComponent,component"
          )

newDocumentationItem( "threeComponent", SF, [FF], 
	  "Generates a scalar field that evaluates to the 3-form part of the form field (1).",
          "zeroComponent,oneComponent,twoComponent,component"
          )

newDocumentationItem( "component", FF, [SF,VF,VF,SF], 
	  "Generates a form field using (1) as the 0-form, (2) as the 1-form, (3) as the 2-form,\n" +
	  "and (4) as the 3-form.",
          "zeroComponent,oneComponent,twoComponent,threeComponent"
          )

newDocumentationItem( "lie", FF, [VF,FF], 
	  "Generates a form field of the Lie Derivative of (2) using the vector field (1).",
          ""
          )

newDocumentationItem( "makeGrid",SG, [GB,FL], 
	  "Initializes a scalar grid with dimensions and resolution (1), and default value (2).",
          ""
          )

newDocumentationItem( "makeGrid",VG, [GB,VE], 
	  "Initializes a vector grid with dimensions and resolution (1), and default value (2).",
          ""
          )

newDocumentationItem( "makeGrid",CG, [GB,CO], 
	  "Initializes a color grid with dimensions and resolution (1), and default value (2).",
	  ""
	  )

newDocumentationItem( "makeGrid",MG, [GB,MA], 
	  "Initializes a matrix grid with dimensions and resolution (1), and default value (2).",
	  ""
	  )



newDocumentationItem( "Blur",VO, [SG], 
	  "Simple blur of scalar grid (1) using averaging over all of the nearest neighbors.",
	  ""
	  )

newDocumentationItem( "Blur",VO, [VG], 
	  "Simple blur of vector grid (1) using averaging over all of the nearest neighbors.",
	  ""
	  )

newDocumentationItem( "Blur",VO, [CG], 
	  "Simple blur of color grid (1) using averaging over all of the nearest neighbors.",
	  ""
	  )

newDocumentationItem( "writeGrid",VO, [SG,ST], 
	  "Write a scalar grid (1) into a file with name (2).",
	  ""
	  )

newDocumentationItem( "writeGrid",VO, [VG,ST], 
	  "Write a vector grid (1) into a file with name (2).",
	  ""
	  )

newDocumentationItem( "writeGrid",VO, [CG,ST], 
	  "Write a color grid (1) into a file with name (2).",
	  ""
	  )

newDocumentationItem( "stampBlurredWisps",VO, [SG,VE,FL,VE,VE,FL,IN], 
	  "Stamped an antialiased streak into scalar grid (1), beginning at position (2),\n" +
	  "with a streak length from the velocity (4), acceleration (5), and time (3).\n" +
	  "The scalar value of the wisp is (5), and (6) is a seed for a random number sampling.",
	  ""
	  )

