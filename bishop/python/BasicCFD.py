# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BasicCFD', [dirname(__file__)])
        except ImportError:
            import _BasicCFD
            return _BasicCFD
        if fp is not None:
            try:
                _mod = imp.load_module('_BasicCFD', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BasicCFD = swig_import_helper()
    del swig_import_helper
else:
    import _BasicCFD
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BasicCFD.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _BasicCFD.SwigPyIterator_value(self)
    def incr(self, n = 1): return _BasicCFD.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _BasicCFD.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _BasicCFD.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _BasicCFD.SwigPyIterator_equal(self, *args)
    def copy(self): return _BasicCFD.SwigPyIterator_copy(self)
    def next(self): return _BasicCFD.SwigPyIterator_next(self)
    def __next__(self): return _BasicCFD.SwigPyIterator___next__(self)
    def previous(self): return _BasicCFD.SwigPyIterator_previous(self)
    def advance(self, *args): return _BasicCFD.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _BasicCFD.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _BasicCFD.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _BasicCFD.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _BasicCFD.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _BasicCFD.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _BasicCFD.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _BasicCFD.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _BasicCFD.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BasicCFD.delete_Vector
    __del__ = lambda self : None;
    def set(self, *args): return _BasicCFD.Vector_set(self, *args)
    def __add__(self, *args): return _BasicCFD.Vector___add__(self, *args)
    def __sub__(self, *args): return _BasicCFD.Vector___sub__(self, *args)
    def __div__(self, *args): return _BasicCFD.Vector___div__(self, *args)
    def __mul__(self, *args): return _BasicCFD.Vector___mul__(self, *args)
    def __xor__(self, *args): return _BasicCFD.Vector___xor__(self, *args)
    def __iadd__(self, *args): return _BasicCFD.Vector___iadd__(self, *args)
    def __isub__(self, *args): return _BasicCFD.Vector___isub__(self, *args)
    def __imul__(self, *args): return _BasicCFD.Vector___imul__(self, *args)
    def __idiv__(self, *args): return _BasicCFD.Vector___idiv__(self, *args)
    def __call__(self, *args): return _BasicCFD.Vector___call__(self, *args)
    def X(self): return _BasicCFD.Vector_X(self)
    def Y(self): return _BasicCFD.Vector_Y(self)
    def Z(self): return _BasicCFD.Vector_Z(self)
    def magnitude(self): return _BasicCFD.Vector_magnitude(self)
    def unitvector(self): return _BasicCFD.Vector_unitvector(self)
    def normalize(self): return _BasicCFD.Vector_normalize(self)
    def __eq__(self, *args): return _BasicCFD.Vector___eq__(self, *args)
    def __ne__(self, *args): return _BasicCFD.Vector___ne__(self, *args)
    def __lt__(self, *args): return _BasicCFD.Vector___lt__(self, *args)
    def __le__(self, *args): return _BasicCFD.Vector___le__(self, *args)
    def __gt__(self, *args): return _BasicCFD.Vector___gt__(self, *args)
    def __ge__(self, *args): return _BasicCFD.Vector___ge__(self, *args)
Vector_swigregister = _BasicCFD.Vector_swigregister
Vector_swigregister(Vector)

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _BasicCFD.new_Color(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BasicCFD.delete_Color
    __del__ = lambda self : None;
    def set(self, *args): return _BasicCFD.Color_set(self, *args)
    def __add__(self, *args): return _BasicCFD.Color___add__(self, *args)
    def __sub__(self, *args): return _BasicCFD.Color___sub__(self, *args)
    def __div__(self, *args): return _BasicCFD.Color___div__(self, *args)
    def __mul__(self, *args): return _BasicCFD.Color___mul__(self, *args)
    def __iadd__(self, *args): return _BasicCFD.Color___iadd__(self, *args)
    def __isub__(self, *args): return _BasicCFD.Color___isub__(self, *args)
    def __imul__(self, *args): return _BasicCFD.Color___imul__(self, *args)
    def __idiv__(self, *args): return _BasicCFD.Color___idiv__(self, *args)
    def __call__(self, *args): return _BasicCFD.Color___call__(self, *args)
    def X(self): return _BasicCFD.Color_X(self)
    def Y(self): return _BasicCFD.Color_Y(self)
    def Z(self): return _BasicCFD.Color_Z(self)
    def W(self): return _BasicCFD.Color_W(self)
    def __eq__(self, *args): return _BasicCFD.Color___eq__(self, *args)
    def __ne__(self, *args): return _BasicCFD.Color___ne__(self, *args)
Color_swigregister = _BasicCFD.Color_swigregister
Color_swigregister(Color)

class VolumeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VolumeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _BasicCFD.new_VolumeBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BasicCFD.delete_VolumeBase
    __del__ = lambda self : None;
    def transform(self, *args): return _BasicCFD.VolumeBase_transform(self, *args)
    def addAttribute(self, *args): return _BasicCFD.VolumeBase_addAttribute(self, *args)
    def attribute(self, *args): return _BasicCFD.VolumeBase_attribute(self, *args)
VolumeBase_swigregister = _BasicCFD.VolumeBase_swigregister
VolumeBase_swigregister(VolumeBase)

class ScalarVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _BasicCFD.new_ScalarVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BasicCFD.delete_ScalarVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _BasicCFD.ScalarVolume_eval(self, *args)
    def grad(self, *args): return _BasicCFD.ScalarVolume_grad(self, *args)
    def getFloatElement(self, *args): return _BasicCFD.ScalarVolume_getFloatElement(self, *args)
    def getColorElement(self, *args): return _BasicCFD.ScalarVolume_getColorElement(self, *args)
    def getVectorElement(self, *args): return _BasicCFD.ScalarVolume_getVectorElement(self, *args)
ScalarVolume_swigregister = _BasicCFD.ScalarVolume_swigregister
ScalarVolume_swigregister(ScalarVolume)

class VectorVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _BasicCFD.new_VectorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BasicCFD.delete_VectorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _BasicCFD.VectorVolume_eval(self, *args)
    def grad(self, *args): return _BasicCFD.VectorVolume_grad(self, *args)
    def getFloatElement(self, *args): return _BasicCFD.VectorVolume_getFloatElement(self, *args)
    def getColorElement(self, *args): return _BasicCFD.VectorVolume_getColorElement(self, *args)
    def getVectorElement(self, *args): return _BasicCFD.VectorVolume_getVectorElement(self, *args)
VectorVolume_swigregister = _BasicCFD.VectorVolume_swigregister
VectorVolume_swigregister(VectorVolume)

class ColorVolume(VolumeBase):
    __swig_setmethods__ = {}
    for _s in [VolumeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [VolumeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVolume, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _BasicCFD.new_ColorVolume()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BasicCFD.delete_ColorVolume
    __del__ = lambda self : None;
    def eval(self, *args): return _BasicCFD.ColorVolume_eval(self, *args)
    def grad(self, *args): return _BasicCFD.ColorVolume_grad(self, *args)
    def getFloatElement(self, *args): return _BasicCFD.ColorVolume_getFloatElement(self, *args)
    def getColorElement(self, *args): return _BasicCFD.ColorVolume_getColorElement(self, *args)
    def getVectorElement(self, *args): return _BasicCFD.ColorVolume_getVectorElement(self, *args)
ColorVolume_swigregister = _BasicCFD.ColorVolume_swigregister
ColorVolume_swigregister(ColorVolume)

# This file is compatible with both classic and new-style classes.


